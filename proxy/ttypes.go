// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type PartialKey int64

const (
	PartialKey_ROW                                PartialKey = 0
	PartialKey_ROW_COLFAM                         PartialKey = 1
	PartialKey_ROW_COLFAM_COLQUAL                 PartialKey = 2
	PartialKey_ROW_COLFAM_COLQUAL_COLVIS          PartialKey = 3
	PartialKey_ROW_COLFAM_COLQUAL_COLVIS_TIME     PartialKey = 4
	PartialKey_ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL PartialKey = 5
)

func (p PartialKey) String() string {
	switch p {
	case PartialKey_ROW:
		return "ROW"
	case PartialKey_ROW_COLFAM:
		return "ROW_COLFAM"
	case PartialKey_ROW_COLFAM_COLQUAL:
		return "ROW_COLFAM_COLQUAL"
	case PartialKey_ROW_COLFAM_COLQUAL_COLVIS:
		return "ROW_COLFAM_COLQUAL_COLVIS"
	case PartialKey_ROW_COLFAM_COLQUAL_COLVIS_TIME:
		return "ROW_COLFAM_COLQUAL_COLVIS_TIME"
	case PartialKey_ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL:
		return "ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL"
	}
	return "<UNSET>"
}

func PartialKeyFromString(s string) (PartialKey, error) {
	switch s {
	case "ROW":
		return PartialKey_ROW, nil
	case "ROW_COLFAM":
		return PartialKey_ROW_COLFAM, nil
	case "ROW_COLFAM_COLQUAL":
		return PartialKey_ROW_COLFAM_COLQUAL, nil
	case "ROW_COLFAM_COLQUAL_COLVIS":
		return PartialKey_ROW_COLFAM_COLQUAL_COLVIS, nil
	case "ROW_COLFAM_COLQUAL_COLVIS_TIME":
		return PartialKey_ROW_COLFAM_COLQUAL_COLVIS_TIME, nil
	case "ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL":
		return PartialKey_ROW_COLFAM_COLQUAL_COLVIS_TIME_DEL, nil
	}
	return PartialKey(0), fmt.Errorf("not a valid PartialKey string")
}

func PartialKeyPtr(v PartialKey) *PartialKey { return &v }

func (p PartialKey) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *PartialKey) UnmarshalText(text []byte) error {
	q, err := PartialKeyFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TablePermission int64

const (
	TablePermission_READ        TablePermission = 2
	TablePermission_WRITE       TablePermission = 3
	TablePermission_BULK_IMPORT TablePermission = 4
	TablePermission_ALTER_TABLE TablePermission = 5
	TablePermission_GRANT       TablePermission = 6
	TablePermission_DROP_TABLE  TablePermission = 7
)

func (p TablePermission) String() string {
	switch p {
	case TablePermission_READ:
		return "READ"
	case TablePermission_WRITE:
		return "WRITE"
	case TablePermission_BULK_IMPORT:
		return "BULK_IMPORT"
	case TablePermission_ALTER_TABLE:
		return "ALTER_TABLE"
	case TablePermission_GRANT:
		return "GRANT"
	case TablePermission_DROP_TABLE:
		return "DROP_TABLE"
	}
	return "<UNSET>"
}

func TablePermissionFromString(s string) (TablePermission, error) {
	switch s {
	case "READ":
		return TablePermission_READ, nil
	case "WRITE":
		return TablePermission_WRITE, nil
	case "BULK_IMPORT":
		return TablePermission_BULK_IMPORT, nil
	case "ALTER_TABLE":
		return TablePermission_ALTER_TABLE, nil
	case "GRANT":
		return TablePermission_GRANT, nil
	case "DROP_TABLE":
		return TablePermission_DROP_TABLE, nil
	}
	return TablePermission(0), fmt.Errorf("not a valid TablePermission string")
}

func TablePermissionPtr(v TablePermission) *TablePermission { return &v }

func (p TablePermission) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TablePermission) UnmarshalText(text []byte) error {
	q, err := TablePermissionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type SystemPermission int64

const (
	SystemPermission_GRANT        SystemPermission = 0
	SystemPermission_CREATE_TABLE SystemPermission = 1
	SystemPermission_DROP_TABLE   SystemPermission = 2
	SystemPermission_ALTER_TABLE  SystemPermission = 3
	SystemPermission_CREATE_USER  SystemPermission = 4
	SystemPermission_DROP_USER    SystemPermission = 5
	SystemPermission_ALTER_USER   SystemPermission = 6
	SystemPermission_SYSTEM       SystemPermission = 7
)

func (p SystemPermission) String() string {
	switch p {
	case SystemPermission_GRANT:
		return "GRANT"
	case SystemPermission_CREATE_TABLE:
		return "CREATE_TABLE"
	case SystemPermission_DROP_TABLE:
		return "DROP_TABLE"
	case SystemPermission_ALTER_TABLE:
		return "ALTER_TABLE"
	case SystemPermission_CREATE_USER:
		return "CREATE_USER"
	case SystemPermission_DROP_USER:
		return "DROP_USER"
	case SystemPermission_ALTER_USER:
		return "ALTER_USER"
	case SystemPermission_SYSTEM:
		return "SYSTEM"
	}
	return "<UNSET>"
}

func SystemPermissionFromString(s string) (SystemPermission, error) {
	switch s {
	case "GRANT":
		return SystemPermission_GRANT, nil
	case "CREATE_TABLE":
		return SystemPermission_CREATE_TABLE, nil
	case "DROP_TABLE":
		return SystemPermission_DROP_TABLE, nil
	case "ALTER_TABLE":
		return SystemPermission_ALTER_TABLE, nil
	case "CREATE_USER":
		return SystemPermission_CREATE_USER, nil
	case "DROP_USER":
		return SystemPermission_DROP_USER, nil
	case "ALTER_USER":
		return SystemPermission_ALTER_USER, nil
	case "SYSTEM":
		return SystemPermission_SYSTEM, nil
	}
	return SystemPermission(0), fmt.Errorf("not a valid SystemPermission string")
}

func SystemPermissionPtr(v SystemPermission) *SystemPermission { return &v }

func (p SystemPermission) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *SystemPermission) UnmarshalText(text []byte) error {
	q, err := SystemPermissionFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ScanType int64

const (
	ScanType_SINGLE ScanType = 0
	ScanType_BATCH  ScanType = 1
)

func (p ScanType) String() string {
	switch p {
	case ScanType_SINGLE:
		return "SINGLE"
	case ScanType_BATCH:
		return "BATCH"
	}
	return "<UNSET>"
}

func ScanTypeFromString(s string) (ScanType, error) {
	switch s {
	case "SINGLE":
		return ScanType_SINGLE, nil
	case "BATCH":
		return ScanType_BATCH, nil
	}
	return ScanType(0), fmt.Errorf("not a valid ScanType string")
}

func ScanTypePtr(v ScanType) *ScanType { return &v }

func (p ScanType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ScanType) UnmarshalText(text []byte) error {
	q, err := ScanTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ScanState int64

const (
	ScanState_IDLE    ScanState = 0
	ScanState_RUNNING ScanState = 1
	ScanState_QUEUED  ScanState = 2
)

func (p ScanState) String() string {
	switch p {
	case ScanState_IDLE:
		return "IDLE"
	case ScanState_RUNNING:
		return "RUNNING"
	case ScanState_QUEUED:
		return "QUEUED"
	}
	return "<UNSET>"
}

func ScanStateFromString(s string) (ScanState, error) {
	switch s {
	case "IDLE":
		return ScanState_IDLE, nil
	case "RUNNING":
		return ScanState_RUNNING, nil
	case "QUEUED":
		return ScanState_QUEUED, nil
	}
	return ScanState(0), fmt.Errorf("not a valid ScanState string")
}

func ScanStatePtr(v ScanState) *ScanState { return &v }

func (p ScanState) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ScanState) UnmarshalText(text []byte) error {
	q, err := ScanStateFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type ConditionalStatus int64

const (
	ConditionalStatus_ACCEPTED             ConditionalStatus = 0
	ConditionalStatus_REJECTED             ConditionalStatus = 1
	ConditionalStatus_VIOLATED             ConditionalStatus = 2
	ConditionalStatus_UNKNOWN              ConditionalStatus = 3
	ConditionalStatus_INVISIBLE_VISIBILITY ConditionalStatus = 4
)

func (p ConditionalStatus) String() string {
	switch p {
	case ConditionalStatus_ACCEPTED:
		return "ACCEPTED"
	case ConditionalStatus_REJECTED:
		return "REJECTED"
	case ConditionalStatus_VIOLATED:
		return "VIOLATED"
	case ConditionalStatus_UNKNOWN:
		return "UNKNOWN"
	case ConditionalStatus_INVISIBLE_VISIBILITY:
		return "INVISIBLE_VISIBILITY"
	}
	return "<UNSET>"
}

func ConditionalStatusFromString(s string) (ConditionalStatus, error) {
	switch s {
	case "ACCEPTED":
		return ConditionalStatus_ACCEPTED, nil
	case "REJECTED":
		return ConditionalStatus_REJECTED, nil
	case "VIOLATED":
		return ConditionalStatus_VIOLATED, nil
	case "UNKNOWN":
		return ConditionalStatus_UNKNOWN, nil
	case "INVISIBLE_VISIBILITY":
		return ConditionalStatus_INVISIBLE_VISIBILITY, nil
	}
	return ConditionalStatus(0), fmt.Errorf("not a valid ConditionalStatus string")
}

func ConditionalStatusPtr(v ConditionalStatus) *ConditionalStatus { return &v }

func (p ConditionalStatus) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *ConditionalStatus) UnmarshalText(text []byte) error {
	q, err := ConditionalStatusFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type Durability int64

const (
	Durability_DEFAULT Durability = 0
	Durability_NONE    Durability = 1
	Durability_LOG     Durability = 2
	Durability_FLUSH   Durability = 3
	Durability_SYNC    Durability = 4
)

func (p Durability) String() string {
	switch p {
	case Durability_DEFAULT:
		return "DEFAULT"
	case Durability_NONE:
		return "NONE"
	case Durability_LOG:
		return "LOG"
	case Durability_FLUSH:
		return "FLUSH"
	case Durability_SYNC:
		return "SYNC"
	}
	return "<UNSET>"
}

func DurabilityFromString(s string) (Durability, error) {
	switch s {
	case "DEFAULT":
		return Durability_DEFAULT, nil
	case "NONE":
		return Durability_NONE, nil
	case "LOG":
		return Durability_LOG, nil
	case "FLUSH":
		return Durability_FLUSH, nil
	case "SYNC":
		return Durability_SYNC, nil
	}
	return Durability(0), fmt.Errorf("not a valid Durability string")
}

func DurabilityPtr(v Durability) *Durability { return &v }

func (p Durability) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *Durability) UnmarshalText(text []byte) error {
	q, err := DurabilityFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type CompactionType int64

const (
	CompactionType_MINOR CompactionType = 0
	CompactionType_MERGE CompactionType = 1
	CompactionType_MAJOR CompactionType = 2
	CompactionType_FULL  CompactionType = 3
)

func (p CompactionType) String() string {
	switch p {
	case CompactionType_MINOR:
		return "MINOR"
	case CompactionType_MERGE:
		return "MERGE"
	case CompactionType_MAJOR:
		return "MAJOR"
	case CompactionType_FULL:
		return "FULL"
	}
	return "<UNSET>"
}

func CompactionTypeFromString(s string) (CompactionType, error) {
	switch s {
	case "MINOR":
		return CompactionType_MINOR, nil
	case "MERGE":
		return CompactionType_MERGE, nil
	case "MAJOR":
		return CompactionType_MAJOR, nil
	case "FULL":
		return CompactionType_FULL, nil
	}
	return CompactionType(0), fmt.Errorf("not a valid CompactionType string")
}

func CompactionTypePtr(v CompactionType) *CompactionType { return &v }

func (p CompactionType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CompactionType) UnmarshalText(text []byte) error {
	q, err := CompactionTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type CompactionReason int64

const (
	CompactionReason_USER   CompactionReason = 0
	CompactionReason_SYSTEM CompactionReason = 1
	CompactionReason_CHOP   CompactionReason = 2
	CompactionReason_IDLE   CompactionReason = 3
	CompactionReason_CLOSE  CompactionReason = 4
)

func (p CompactionReason) String() string {
	switch p {
	case CompactionReason_USER:
		return "USER"
	case CompactionReason_SYSTEM:
		return "SYSTEM"
	case CompactionReason_CHOP:
		return "CHOP"
	case CompactionReason_IDLE:
		return "IDLE"
	case CompactionReason_CLOSE:
		return "CLOSE"
	}
	return "<UNSET>"
}

func CompactionReasonFromString(s string) (CompactionReason, error) {
	switch s {
	case "USER":
		return CompactionReason_USER, nil
	case "SYSTEM":
		return CompactionReason_SYSTEM, nil
	case "CHOP":
		return CompactionReason_CHOP, nil
	case "IDLE":
		return CompactionReason_IDLE, nil
	case "CLOSE":
		return CompactionReason_CLOSE, nil
	}
	return CompactionReason(0), fmt.Errorf("not a valid CompactionReason string")
}

func CompactionReasonPtr(v CompactionReason) *CompactionReason { return &v }

func (p CompactionReason) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *CompactionReason) UnmarshalText(text []byte) error {
	q, err := CompactionReasonFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type IteratorScope int64

const (
	IteratorScope_MINC IteratorScope = 0
	IteratorScope_MAJC IteratorScope = 1
	IteratorScope_SCAN IteratorScope = 2
)

func (p IteratorScope) String() string {
	switch p {
	case IteratorScope_MINC:
		return "MINC"
	case IteratorScope_MAJC:
		return "MAJC"
	case IteratorScope_SCAN:
		return "SCAN"
	}
	return "<UNSET>"
}

func IteratorScopeFromString(s string) (IteratorScope, error) {
	switch s {
	case "MINC":
		return IteratorScope_MINC, nil
	case "MAJC":
		return IteratorScope_MAJC, nil
	case "SCAN":
		return IteratorScope_SCAN, nil
	}
	return IteratorScope(0), fmt.Errorf("not a valid IteratorScope string")
}

func IteratorScopePtr(v IteratorScope) *IteratorScope { return &v }

func (p IteratorScope) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *IteratorScope) UnmarshalText(text []byte) error {
	q, err := IteratorScopeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

type TimeType int64

const (
	TimeType_LOGICAL TimeType = 0
	TimeType_MILLIS  TimeType = 1
)

func (p TimeType) String() string {
	switch p {
	case TimeType_LOGICAL:
		return "LOGICAL"
	case TimeType_MILLIS:
		return "MILLIS"
	}
	return "<UNSET>"
}

func TimeTypeFromString(s string) (TimeType, error) {
	switch s {
	case "LOGICAL":
		return TimeType_LOGICAL, nil
	case "MILLIS":
		return TimeType_MILLIS, nil
	}
	return TimeType(0), fmt.Errorf("not a valid TimeType string")
}

func TimeTypePtr(v TimeType) *TimeType { return &v }

func (p TimeType) MarshalText() ([]byte, error) {
	return []byte(p.String()), nil
}

func (p *TimeType) UnmarshalText(text []byte) error {
	q, err := TimeTypeFromString(string(text))
	if err != nil {
		return err
	}
	*p = q
	return nil
}

// Attributes:
//  - Row
//  - ColFamily
//  - ColQualifier
//  - ColVisibility
//  - Timestamp
type Key struct {
	Row           []byte `thrift:"row,1" json:"row"`
	ColFamily     []byte `thrift:"colFamily,2" json:"colFamily"`
	ColQualifier  []byte `thrift:"colQualifier,3" json:"colQualifier"`
	ColVisibility []byte `thrift:"colVisibility,4" json:"colVisibility"`
	Timestamp     int64  `thrift:"timestamp,5" json:"timestamp,omitempty"`
}

func NewKey() *Key {
	return &Key{
		Timestamp: 9223372036854775807,
	}
}

func (p *Key) GetRow() []byte {
	return p.Row
}

func (p *Key) GetColFamily() []byte {
	return p.ColFamily
}

func (p *Key) GetColQualifier() []byte {
	return p.ColQualifier
}

func (p *Key) GetColVisibility() []byte {
	return p.ColVisibility
}

var Key_Timestamp_DEFAULT int64 = 9223372036854775807

func (p *Key) GetTimestamp() int64 {
	return p.Timestamp
}
func (p *Key) IsSetTimestamp() bool {
	return p.Timestamp != Key_Timestamp_DEFAULT
}

func (p *Key) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Key) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *Key) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ColFamily = v
	}
	return nil
}

func (p *Key) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ColQualifier = v
	}
	return nil
}

func (p *Key) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.ColVisibility = v
	}
	return nil
}

func (p *Key) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *Key) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Key"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Key) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err)
	}
	return err
}

func (p *Key) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colFamily", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:colFamily: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColFamily); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colFamily (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:colFamily: ", p), err)
	}
	return err
}

func (p *Key) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colQualifier", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:colQualifier: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColQualifier); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colQualifier (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:colQualifier: ", p), err)
	}
	return err
}

func (p *Key) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colVisibility", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:colVisibility: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColVisibility); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colVisibility (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:colVisibility: ", p), err)
	}
	return err
}

func (p *Key) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:timestamp: ", p), err)
		}
	}
	return err
}

func (p *Key) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Key(%+v)", *p)
}

// Attributes:
//  - ColFamily
//  - ColQualifier
//  - ColVisibility
//  - Timestamp
//  - Value
//  - DeleteCell
type ColumnUpdate struct {
	ColFamily     []byte `thrift:"colFamily,1" json:"colFamily"`
	ColQualifier  []byte `thrift:"colQualifier,2" json:"colQualifier"`
	ColVisibility []byte `thrift:"colVisibility,3" json:"colVisibility,omitempty"`
	Timestamp     *int64 `thrift:"timestamp,4" json:"timestamp,omitempty"`
	Value         []byte `thrift:"value,5" json:"value,omitempty"`
	DeleteCell    *bool  `thrift:"deleteCell,6" json:"deleteCell,omitempty"`
}

func NewColumnUpdate() *ColumnUpdate {
	return &ColumnUpdate{}
}

func (p *ColumnUpdate) GetColFamily() []byte {
	return p.ColFamily
}

func (p *ColumnUpdate) GetColQualifier() []byte {
	return p.ColQualifier
}

var ColumnUpdate_ColVisibility_DEFAULT []byte

func (p *ColumnUpdate) GetColVisibility() []byte {
	return p.ColVisibility
}

var ColumnUpdate_Timestamp_DEFAULT int64

func (p *ColumnUpdate) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return ColumnUpdate_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var ColumnUpdate_Value_DEFAULT []byte

func (p *ColumnUpdate) GetValue() []byte {
	return p.Value
}

var ColumnUpdate_DeleteCell_DEFAULT bool

func (p *ColumnUpdate) GetDeleteCell() bool {
	if !p.IsSetDeleteCell() {
		return ColumnUpdate_DeleteCell_DEFAULT
	}
	return *p.DeleteCell
}
func (p *ColumnUpdate) IsSetColVisibility() bool {
	return p.ColVisibility != nil
}

func (p *ColumnUpdate) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *ColumnUpdate) IsSetValue() bool {
	return p.Value != nil
}

func (p *ColumnUpdate) IsSetDeleteCell() bool {
	return p.DeleteCell != nil
}

func (p *ColumnUpdate) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ColumnUpdate) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ColFamily = v
	}
	return nil
}

func (p *ColumnUpdate) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ColQualifier = v
	}
	return nil
}

func (p *ColumnUpdate) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ColVisibility = v
	}
	return nil
}

func (p *ColumnUpdate) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *ColumnUpdate) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *ColumnUpdate) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.DeleteCell = &v
	}
	return nil
}

func (p *ColumnUpdate) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnUpdate"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ColumnUpdate) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colFamily", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colFamily: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColFamily); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colFamily (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colFamily: ", p), err)
	}
	return err
}

func (p *ColumnUpdate) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colQualifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:colQualifier: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColQualifier); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colQualifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:colQualifier: ", p), err)
	}
	return err
}

func (p *ColumnUpdate) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColVisibility() {
		if err := oprot.WriteFieldBegin("colVisibility", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:colVisibility: ", p), err)
		}
		if err := oprot.WriteBinary(p.ColVisibility); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.colVisibility (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:colVisibility: ", p), err)
		}
	}
	return err
}

func (p *ColumnUpdate) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timestamp: ", p), err)
		}
	}
	return err
}

func (p *ColumnUpdate) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:value: ", p), err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:value: ", p), err)
		}
	}
	return err
}

func (p *ColumnUpdate) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetDeleteCell() {
		if err := oprot.WriteFieldBegin("deleteCell", thrift.BOOL, 6); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:deleteCell: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.DeleteCell)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.deleteCell (6) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 6:deleteCell: ", p), err)
		}
	}
	return err
}

func (p *ColumnUpdate) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnUpdate(%+v)", *p)
}

// Attributes:
//  - Tables
//  - Usage
type DiskUsage struct {
	Tables []string `thrift:"tables,1" json:"tables"`
	Usage  int64    `thrift:"usage,2" json:"usage"`
}

func NewDiskUsage() *DiskUsage {
	return &DiskUsage{}
}

func (p *DiskUsage) GetTables() []string {
	return p.Tables
}

func (p *DiskUsage) GetUsage() int64 {
	return p.Usage
}
func (p *DiskUsage) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *DiskUsage) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Tables = tSlice
	for i := 0; i < size; i++ {
		var _elem0 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem0 = v
		}
		p.Tables = append(p.Tables, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *DiskUsage) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Usage = v
	}
	return nil
}

func (p *DiskUsage) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DiskUsage"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *DiskUsage) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tables", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tables: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Tables)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Tables {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tables: ", p), err)
	}
	return err
}

func (p *DiskUsage) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("usage", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:usage: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Usage)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.usage (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:usage: ", p), err)
	}
	return err
}

func (p *DiskUsage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DiskUsage(%+v)", *p)
}

// Attributes:
//  - Key
//  - Value
type KeyValue struct {
	Key   *Key   `thrift:"key,1" json:"key"`
	Value []byte `thrift:"value,2" json:"value"`
}

func NewKeyValue() *KeyValue {
	return &KeyValue{}
}

var KeyValue_Key_DEFAULT *Key

func (p *KeyValue) GetKey() *Key {
	if !p.IsSetKey() {
		return KeyValue_Key_DEFAULT
	}
	return p.Key
}

func (p *KeyValue) GetValue() []byte {
	return p.Value
}
func (p *KeyValue) IsSetKey() bool {
	return p.Key != nil
}

func (p *KeyValue) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeyValue) readField1(iprot thrift.TProtocol) error {
	p.Key = &Key{
		Timestamp: 9223372036854775807,
	}
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *KeyValue) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *KeyValue) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeyValue"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyValue) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *KeyValue) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err)
	}
	if err := oprot.WriteBinary(p.Value); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err)
	}
	return err
}

func (p *KeyValue) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyValue(%+v)", *p)
}

// Attributes:
//  - Results
//  - More
type ScanResult_ struct {
	Results []*KeyValue `thrift:"results,1" json:"results"`
	More    bool        `thrift:"more,2" json:"more"`
}

func NewScanResult_() *ScanResult_ {
	return &ScanResult_{}
}

func (p *ScanResult_) GetResults() []*KeyValue {
	return p.Results
}

func (p *ScanResult_) GetMore() bool {
	return p.More
}
func (p *ScanResult_) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScanResult_) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*KeyValue, 0, size)
	p.Results = tSlice
	for i := 0; i < size; i++ {
		_elem1 := &KeyValue{}
		if err := _elem1.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
		}
		p.Results = append(p.Results, _elem1)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ScanResult_) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.More = v
	}
	return nil
}

func (p *ScanResult_) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanResult"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScanResult_) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("results", thrift.LIST, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:results: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Results)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Results {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:results: ", p), err)
	}
	return err
}

func (p *ScanResult_) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("more", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:more: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.More)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.more (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:more: ", p), err)
	}
	return err
}

func (p *ScanResult_) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanResult_(%+v)", *p)
}

// Attributes:
//  - Start
//  - StartInclusive
//  - Stop
//  - StopInclusive
type Range struct {
	Start          *Key `thrift:"start,1" json:"start"`
	StartInclusive bool `thrift:"startInclusive,2" json:"startInclusive"`
	Stop           *Key `thrift:"stop,3" json:"stop"`
	StopInclusive  bool `thrift:"stopInclusive,4" json:"stopInclusive"`
}

func NewRange() *Range {
	return &Range{}
}

var Range_Start_DEFAULT *Key

func (p *Range) GetStart() *Key {
	if !p.IsSetStart() {
		return Range_Start_DEFAULT
	}
	return p.Start
}

func (p *Range) GetStartInclusive() bool {
	return p.StartInclusive
}

var Range_Stop_DEFAULT *Key

func (p *Range) GetStop() *Key {
	if !p.IsSetStop() {
		return Range_Stop_DEFAULT
	}
	return p.Stop
}

func (p *Range) GetStopInclusive() bool {
	return p.StopInclusive
}
func (p *Range) IsSetStart() bool {
	return p.Start != nil
}

func (p *Range) IsSetStop() bool {
	return p.Stop != nil
}

func (p *Range) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Range) readField1(iprot thrift.TProtocol) error {
	p.Start = &Key{
		Timestamp: 9223372036854775807,
	}
	if err := p.Start.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Start), err)
	}
	return nil
}

func (p *Range) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.StartInclusive = v
	}
	return nil
}

func (p *Range) readField3(iprot thrift.TProtocol) error {
	p.Stop = &Key{
		Timestamp: 9223372036854775807,
	}
	if err := p.Stop.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Stop), err)
	}
	return nil
}

func (p *Range) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StopInclusive = v
	}
	return nil
}

func (p *Range) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Range"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Range) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("start", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:start: ", p), err)
	}
	if err := p.Start.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Start), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:start: ", p), err)
	}
	return err
}

func (p *Range) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startInclusive", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startInclusive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.StartInclusive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startInclusive (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startInclusive: ", p), err)
	}
	return err
}

func (p *Range) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stop", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stop: ", p), err)
	}
	if err := p.Stop.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Stop), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stop: ", p), err)
	}
	return err
}

func (p *Range) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("stopInclusive", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stopInclusive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.StopInclusive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.stopInclusive (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stopInclusive: ", p), err)
	}
	return err
}

func (p *Range) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Range(%+v)", *p)
}

// Attributes:
//  - ColFamily
//  - ColQualifier
type ScanColumn struct {
	ColFamily    []byte `thrift:"colFamily,1" json:"colFamily"`
	ColQualifier []byte `thrift:"colQualifier,2" json:"colQualifier,omitempty"`
}

func NewScanColumn() *ScanColumn {
	return &ScanColumn{}
}

func (p *ScanColumn) GetColFamily() []byte {
	return p.ColFamily
}

var ScanColumn_ColQualifier_DEFAULT []byte

func (p *ScanColumn) GetColQualifier() []byte {
	return p.ColQualifier
}
func (p *ScanColumn) IsSetColQualifier() bool {
	return p.ColQualifier != nil
}

func (p *ScanColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScanColumn) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ColFamily = v
	}
	return nil
}

func (p *ScanColumn) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ColQualifier = v
	}
	return nil
}

func (p *ScanColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanColumn"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScanColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colFamily", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colFamily: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColFamily); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colFamily (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colFamily: ", p), err)
	}
	return err
}

func (p *ScanColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetColQualifier() {
		if err := oprot.WriteFieldBegin("colQualifier", thrift.STRING, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:colQualifier: ", p), err)
		}
		if err := oprot.WriteBinary(p.ColQualifier); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.colQualifier (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:colQualifier: ", p), err)
		}
	}
	return err
}

func (p *ScanColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanColumn(%+v)", *p)
}

// Attributes:
//  - Priority
//  - Name
//  - IteratorClass
//  - Properties
type IteratorSetting struct {
	Priority      int32             `thrift:"priority,1" json:"priority"`
	Name          string            `thrift:"name,2" json:"name"`
	IteratorClass string            `thrift:"iteratorClass,3" json:"iteratorClass"`
	Properties    map[string]string `thrift:"properties,4" json:"properties"`
}

func NewIteratorSetting() *IteratorSetting {
	return &IteratorSetting{}
}

func (p *IteratorSetting) GetPriority() int32 {
	return p.Priority
}

func (p *IteratorSetting) GetName() string {
	return p.Name
}

func (p *IteratorSetting) GetIteratorClass() string {
	return p.IteratorClass
}

func (p *IteratorSetting) GetProperties() map[string]string {
	return p.Properties
}
func (p *IteratorSetting) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *IteratorSetting) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Priority = v
	}
	return nil
}

func (p *IteratorSetting) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *IteratorSetting) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IteratorClass = v
	}
	return nil
}

func (p *IteratorSetting) readField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val3 = v
		}
		p.Properties[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *IteratorSetting) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IteratorSetting"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *IteratorSetting) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("priority", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:priority: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Priority)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.priority (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:priority: ", p), err)
	}
	return err
}

func (p *IteratorSetting) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *IteratorSetting) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iteratorClass", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:iteratorClass: ", p), err)
	}
	if err := oprot.WriteString(string(p.IteratorClass)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iteratorClass (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:iteratorClass: ", p), err)
	}
	return err
}

func (p *IteratorSetting) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("properties", thrift.MAP, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:properties: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:properties: ", p), err)
	}
	return err
}

func (p *IteratorSetting) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IteratorSetting(%+v)", *p)
}

// Attributes:
//  - Authorizations
//  - Range
//  - Columns
//  - Iterators
//  - BufferSize
type ScanOptions struct {
	Authorizations map[string]bool    `thrift:"authorizations,1" json:"authorizations,omitempty"`
	Range          *Range             `thrift:"range,2" json:"range,omitempty"`
	Columns        []*ScanColumn      `thrift:"columns,3" json:"columns,omitempty"`
	Iterators      []*IteratorSetting `thrift:"iterators,4" json:"iterators,omitempty"`
	BufferSize     *int32             `thrift:"bufferSize,5" json:"bufferSize,omitempty"`
}

func NewScanOptions() *ScanOptions {
	return &ScanOptions{}
}

var ScanOptions_Authorizations_DEFAULT map[string]bool

func (p *ScanOptions) GetAuthorizations() map[string]bool {
	return p.Authorizations
}

var ScanOptions_Range_DEFAULT *Range

func (p *ScanOptions) GetRange() *Range {
	if !p.IsSetRange() {
		return ScanOptions_Range_DEFAULT
	}
	return p.Range
}

var ScanOptions_Columns_DEFAULT []*ScanColumn

func (p *ScanOptions) GetColumns() []*ScanColumn {
	return p.Columns
}

var ScanOptions_Iterators_DEFAULT []*IteratorSetting

func (p *ScanOptions) GetIterators() []*IteratorSetting {
	return p.Iterators
}

var ScanOptions_BufferSize_DEFAULT int32

func (p *ScanOptions) GetBufferSize() int32 {
	if !p.IsSetBufferSize() {
		return ScanOptions_BufferSize_DEFAULT
	}
	return *p.BufferSize
}
func (p *ScanOptions) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *ScanOptions) IsSetRange() bool {
	return p.Range != nil
}

func (p *ScanOptions) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *ScanOptions) IsSetIterators() bool {
	return p.Iterators != nil
}

func (p *ScanOptions) IsSetBufferSize() bool {
	return p.BufferSize != nil
}

func (p *ScanOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ScanOptions) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Authorizations = tSet
	for i := 0; i < size; i++ {
		var _elem4 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem4 = v
		}
		p.Authorizations[string(_elem4)] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ScanOptions) readField2(iprot thrift.TProtocol) error {
	p.Range = &Range{}
	if err := p.Range.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Range), err)
	}
	return nil
}

func (p *ScanOptions) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ScanColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem5 := &ScanColumn{}
		if err := _elem5.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem5), err)
		}
		p.Columns = append(p.Columns, _elem5)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ScanOptions) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IteratorSetting, 0, size)
	p.Iterators = tSlice
	for i := 0; i < size; i++ {
		_elem6 := &IteratorSetting{}
		if err := _elem6.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
		}
		p.Iterators = append(p.Iterators, _elem6)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ScanOptions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.BufferSize = &v
	}
	return nil
}

func (p *ScanOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ScanOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ScanOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.SET, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authorizations: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Authorizations)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Authorizations {
			if err := oprot.WriteBinary([]byte(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authorizations: ", p), err)
		}
	}
	return err
}

func (p *ScanOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRange() {
		if err := oprot.WriteFieldBegin("range", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:range: ", p), err)
		}
		if err := p.Range.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Range), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:range: ", p), err)
		}
	}
	return err
}

func (p *ScanOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
		}
	}
	return err
}

func (p *ScanOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIterators() {
		if err := oprot.WriteFieldBegin("iterators", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iterators: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Iterators)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Iterators {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iterators: ", p), err)
		}
	}
	return err
}

func (p *ScanOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetBufferSize() {
		if err := oprot.WriteFieldBegin("bufferSize", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:bufferSize: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.BufferSize)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.bufferSize (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:bufferSize: ", p), err)
		}
	}
	return err
}

func (p *ScanOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ScanOptions(%+v)", *p)
}

// Attributes:
//  - Authorizations
//  - Ranges
//  - Columns
//  - Iterators
//  - Threads
type BatchScanOptions struct {
	Authorizations map[string]bool    `thrift:"authorizations,1" json:"authorizations,omitempty"`
	Ranges         []*Range           `thrift:"ranges,2" json:"ranges,omitempty"`
	Columns        []*ScanColumn      `thrift:"columns,3" json:"columns,omitempty"`
	Iterators      []*IteratorSetting `thrift:"iterators,4" json:"iterators,omitempty"`
	Threads        *int32             `thrift:"threads,5" json:"threads,omitempty"`
}

func NewBatchScanOptions() *BatchScanOptions {
	return &BatchScanOptions{}
}

var BatchScanOptions_Authorizations_DEFAULT map[string]bool

func (p *BatchScanOptions) GetAuthorizations() map[string]bool {
	return p.Authorizations
}

var BatchScanOptions_Ranges_DEFAULT []*Range

func (p *BatchScanOptions) GetRanges() []*Range {
	return p.Ranges
}

var BatchScanOptions_Columns_DEFAULT []*ScanColumn

func (p *BatchScanOptions) GetColumns() []*ScanColumn {
	return p.Columns
}

var BatchScanOptions_Iterators_DEFAULT []*IteratorSetting

func (p *BatchScanOptions) GetIterators() []*IteratorSetting {
	return p.Iterators
}

var BatchScanOptions_Threads_DEFAULT int32

func (p *BatchScanOptions) GetThreads() int32 {
	if !p.IsSetThreads() {
		return BatchScanOptions_Threads_DEFAULT
	}
	return *p.Threads
}
func (p *BatchScanOptions) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *BatchScanOptions) IsSetRanges() bool {
	return p.Ranges != nil
}

func (p *BatchScanOptions) IsSetColumns() bool {
	return p.Columns != nil
}

func (p *BatchScanOptions) IsSetIterators() bool {
	return p.Iterators != nil
}

func (p *BatchScanOptions) IsSetThreads() bool {
	return p.Threads != nil
}

func (p *BatchScanOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *BatchScanOptions) readField1(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Authorizations = tSet
	for i := 0; i < size; i++ {
		var _elem7 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem7 = v
		}
		p.Authorizations[string(_elem7)] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *BatchScanOptions) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Range, 0, size)
	p.Ranges = tSlice
	for i := 0; i < size; i++ {
		_elem8 := &Range{}
		if err := _elem8.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
		}
		p.Ranges = append(p.Ranges, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BatchScanOptions) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ScanColumn, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem9 := &ScanColumn{}
		if err := _elem9.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem9), err)
		}
		p.Columns = append(p.Columns, _elem9)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BatchScanOptions) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IteratorSetting, 0, size)
	p.Iterators = tSlice
	for i := 0; i < size; i++ {
		_elem10 := &IteratorSetting{}
		if err := _elem10.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
		}
		p.Iterators = append(p.Iterators, _elem10)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *BatchScanOptions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Threads = &v
	}
	return nil
}

func (p *BatchScanOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchScanOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *BatchScanOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.SET, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:authorizations: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Authorizations)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Authorizations {
			if err := oprot.WriteBinary([]byte(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:authorizations: ", p), err)
		}
	}
	return err
}

func (p *BatchScanOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRanges() {
		if err := oprot.WriteFieldBegin("ranges", thrift.LIST, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ranges: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Ranges)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Ranges {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ranges: ", p), err)
		}
	}
	return err
}

func (p *BatchScanOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetColumns() {
		if err := oprot.WriteFieldBegin("columns", thrift.LIST, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:columns: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Columns {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:columns: ", p), err)
		}
	}
	return err
}

func (p *BatchScanOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIterators() {
		if err := oprot.WriteFieldBegin("iterators", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iterators: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Iterators)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Iterators {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iterators: ", p), err)
		}
	}
	return err
}

func (p *BatchScanOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreads() {
		if err := oprot.WriteFieldBegin("threads", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:threads: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Threads)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.threads (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:threads: ", p), err)
		}
	}
	return err
}

func (p *BatchScanOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchScanOptions(%+v)", *p)
}

// Attributes:
//  - KeyValue
//  - HasNext
type KeyValueAndPeek struct {
	KeyValue *KeyValue `thrift:"keyValue,1" json:"keyValue"`
	HasNext  bool      `thrift:"hasNext,2" json:"hasNext"`
}

func NewKeyValueAndPeek() *KeyValueAndPeek {
	return &KeyValueAndPeek{}
}

var KeyValueAndPeek_KeyValue_DEFAULT *KeyValue

func (p *KeyValueAndPeek) GetKeyValue() *KeyValue {
	if !p.IsSetKeyValue() {
		return KeyValueAndPeek_KeyValue_DEFAULT
	}
	return p.KeyValue
}

func (p *KeyValueAndPeek) GetHasNext() bool {
	return p.HasNext
}
func (p *KeyValueAndPeek) IsSetKeyValue() bool {
	return p.KeyValue != nil
}

func (p *KeyValueAndPeek) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeyValueAndPeek) readField1(iprot thrift.TProtocol) error {
	p.KeyValue = &KeyValue{}
	if err := p.KeyValue.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.KeyValue), err)
	}
	return nil
}

func (p *KeyValueAndPeek) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.HasNext = v
	}
	return nil
}

func (p *KeyValueAndPeek) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeyValueAndPeek"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyValueAndPeek) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyValue", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:keyValue: ", p), err)
	}
	if err := p.KeyValue.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.KeyValue), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:keyValue: ", p), err)
	}
	return err
}

func (p *KeyValueAndPeek) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("hasNext", thrift.BOOL, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hasNext: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.HasNext)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.hasNext (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hasNext: ", p), err)
	}
	return err
}

func (p *KeyValueAndPeek) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyValueAndPeek(%+v)", *p)
}

// Attributes:
//  - TableId
//  - EndRow
//  - PrevEndRow
type KeyExtent struct {
	TableId    string `thrift:"tableId,1" json:"tableId"`
	EndRow     []byte `thrift:"endRow,2" json:"endRow"`
	PrevEndRow []byte `thrift:"prevEndRow,3" json:"prevEndRow"`
}

func NewKeyExtent() *KeyExtent {
	return &KeyExtent{}
}

func (p *KeyExtent) GetTableId() string {
	return p.TableId
}

func (p *KeyExtent) GetEndRow() []byte {
	return p.EndRow
}

func (p *KeyExtent) GetPrevEndRow() []byte {
	return p.PrevEndRow
}
func (p *KeyExtent) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *KeyExtent) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.TableId = v
	}
	return nil
}

func (p *KeyExtent) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *KeyExtent) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.PrevEndRow = v
	}
	return nil
}

func (p *KeyExtent) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("KeyExtent"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *KeyExtent) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableId", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tableId: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableId)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableId (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tableId: ", p), err)
	}
	return err
}

func (p *KeyExtent) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endRow", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:endRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endRow (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:endRow: ", p), err)
	}
	return err
}

func (p *KeyExtent) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("prevEndRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prevEndRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.PrevEndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.prevEndRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prevEndRow: ", p), err)
	}
	return err
}

func (p *KeyExtent) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("KeyExtent(%+v)", *p)
}

// Attributes:
//  - ColFamily
//  - ColQualifier
//  - ColVisibility
type Column struct {
	ColFamily     []byte `thrift:"colFamily,1" json:"colFamily"`
	ColQualifier  []byte `thrift:"colQualifier,2" json:"colQualifier"`
	ColVisibility []byte `thrift:"colVisibility,3" json:"colVisibility"`
}

func NewColumn() *Column {
	return &Column{}
}

func (p *Column) GetColFamily() []byte {
	return p.ColFamily
}

func (p *Column) GetColQualifier() []byte {
	return p.ColQualifier
}

func (p *Column) GetColVisibility() []byte {
	return p.ColVisibility
}
func (p *Column) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Column) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ColFamily = v
	}
	return nil
}

func (p *Column) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ColQualifier = v
	}
	return nil
}

func (p *Column) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ColVisibility = v
	}
	return nil
}

func (p *Column) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Column"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Column) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colFamily", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:colFamily: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColFamily); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colFamily (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:colFamily: ", p), err)
	}
	return err
}

func (p *Column) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colQualifier", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:colQualifier: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColQualifier); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colQualifier (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:colQualifier: ", p), err)
	}
	return err
}

func (p *Column) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("colVisibility", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:colVisibility: ", p), err)
	}
	if err := oprot.WriteBinary(p.ColVisibility); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.colVisibility (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:colVisibility: ", p), err)
	}
	return err
}

func (p *Column) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Column(%+v)", *p)
}

// Attributes:
//  - Column
//  - Timestamp
//  - Value
//  - Iterators
type Condition struct {
	Column    *Column            `thrift:"column,1" json:"column"`
	Timestamp *int64             `thrift:"timestamp,2" json:"timestamp,omitempty"`
	Value     []byte             `thrift:"value,3" json:"value,omitempty"`
	Iterators []*IteratorSetting `thrift:"iterators,4" json:"iterators,omitempty"`
}

func NewCondition() *Condition {
	return &Condition{}
}

var Condition_Column_DEFAULT *Column

func (p *Condition) GetColumn() *Column {
	if !p.IsSetColumn() {
		return Condition_Column_DEFAULT
	}
	return p.Column
}

var Condition_Timestamp_DEFAULT int64

func (p *Condition) GetTimestamp() int64 {
	if !p.IsSetTimestamp() {
		return Condition_Timestamp_DEFAULT
	}
	return *p.Timestamp
}

var Condition_Value_DEFAULT []byte

func (p *Condition) GetValue() []byte {
	return p.Value
}

var Condition_Iterators_DEFAULT []*IteratorSetting

func (p *Condition) GetIterators() []*IteratorSetting {
	return p.Iterators
}
func (p *Condition) IsSetColumn() bool {
	return p.Column != nil
}

func (p *Condition) IsSetTimestamp() bool {
	return p.Timestamp != nil
}

func (p *Condition) IsSetValue() bool {
	return p.Value != nil
}

func (p *Condition) IsSetIterators() bool {
	return p.Iterators != nil
}

func (p *Condition) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Condition) readField1(iprot thrift.TProtocol) error {
	p.Column = &Column{}
	if err := p.Column.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Column), err)
	}
	return nil
}

func (p *Condition) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Timestamp = &v
	}
	return nil
}

func (p *Condition) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *Condition) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IteratorSetting, 0, size)
	p.Iterators = tSlice
	for i := 0; i < size; i++ {
		_elem11 := &IteratorSetting{}
		if err := _elem11.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem11), err)
		}
		p.Iterators = append(p.Iterators, _elem11)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Condition) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Condition"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Condition) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("column", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:column: ", p), err)
	}
	if err := p.Column.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Column), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:column: ", p), err)
	}
	return err
}

func (p *Condition) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.Timestamp)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
		}
	}
	return err
}

func (p *Condition) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetValue() {
		if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
		}
	}
	return err
}

func (p *Condition) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetIterators() {
		if err := oprot.WriteFieldBegin("iterators", thrift.LIST, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iterators: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Iterators)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Iterators {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iterators: ", p), err)
		}
	}
	return err
}

func (p *Condition) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Condition(%+v)", *p)
}

// Attributes:
//  - Conditions
//  - Updates
type ConditionalUpdates struct {
	// unused field # 1
	Conditions []*Condition    `thrift:"conditions,2" json:"conditions"`
	Updates    []*ColumnUpdate `thrift:"updates,3" json:"updates"`
}

func NewConditionalUpdates() *ConditionalUpdates {
	return &ConditionalUpdates{}
}

func (p *ConditionalUpdates) GetConditions() []*Condition {
	return p.Conditions
}

func (p *ConditionalUpdates) GetUpdates() []*ColumnUpdate {
	return p.Updates
}
func (p *ConditionalUpdates) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConditionalUpdates) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Condition, 0, size)
	p.Conditions = tSlice
	for i := 0; i < size; i++ {
		_elem12 := &Condition{}
		if err := _elem12.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
		}
		p.Conditions = append(p.Conditions, _elem12)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConditionalUpdates) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ColumnUpdate, 0, size)
	p.Updates = tSlice
	for i := 0; i < size; i++ {
		_elem13 := &ColumnUpdate{}
		if err := _elem13.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem13), err)
		}
		p.Updates = append(p.Updates, _elem13)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ConditionalUpdates) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConditionalUpdates"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConditionalUpdates) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conditions", thrift.LIST, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:conditions: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Conditions)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Conditions {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:conditions: ", p), err)
	}
	return err
}

func (p *ConditionalUpdates) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updates", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:updates: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Updates)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Updates {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:updates: ", p), err)
	}
	return err
}

func (p *ConditionalUpdates) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConditionalUpdates(%+v)", *p)
}

// Attributes:
//  - MaxMemory
//  - TimeoutMs
//  - Threads
//  - Authorizations
//  - Durability
type ConditionalWriterOptions struct {
	MaxMemory      *int64          `thrift:"maxMemory,1" json:"maxMemory,omitempty"`
	TimeoutMs      *int64          `thrift:"timeoutMs,2" json:"timeoutMs,omitempty"`
	Threads        *int32          `thrift:"threads,3" json:"threads,omitempty"`
	Authorizations map[string]bool `thrift:"authorizations,4" json:"authorizations,omitempty"`
	Durability     *Durability     `thrift:"durability,5" json:"durability,omitempty"`
}

func NewConditionalWriterOptions() *ConditionalWriterOptions {
	return &ConditionalWriterOptions{}
}

var ConditionalWriterOptions_MaxMemory_DEFAULT int64

func (p *ConditionalWriterOptions) GetMaxMemory() int64 {
	if !p.IsSetMaxMemory() {
		return ConditionalWriterOptions_MaxMemory_DEFAULT
	}
	return *p.MaxMemory
}

var ConditionalWriterOptions_TimeoutMs_DEFAULT int64

func (p *ConditionalWriterOptions) GetTimeoutMs() int64 {
	if !p.IsSetTimeoutMs() {
		return ConditionalWriterOptions_TimeoutMs_DEFAULT
	}
	return *p.TimeoutMs
}

var ConditionalWriterOptions_Threads_DEFAULT int32

func (p *ConditionalWriterOptions) GetThreads() int32 {
	if !p.IsSetThreads() {
		return ConditionalWriterOptions_Threads_DEFAULT
	}
	return *p.Threads
}

var ConditionalWriterOptions_Authorizations_DEFAULT map[string]bool

func (p *ConditionalWriterOptions) GetAuthorizations() map[string]bool {
	return p.Authorizations
}

var ConditionalWriterOptions_Durability_DEFAULT Durability

func (p *ConditionalWriterOptions) GetDurability() Durability {
	if !p.IsSetDurability() {
		return ConditionalWriterOptions_Durability_DEFAULT
	}
	return *p.Durability
}
func (p *ConditionalWriterOptions) IsSetMaxMemory() bool {
	return p.MaxMemory != nil
}

func (p *ConditionalWriterOptions) IsSetTimeoutMs() bool {
	return p.TimeoutMs != nil
}

func (p *ConditionalWriterOptions) IsSetThreads() bool {
	return p.Threads != nil
}

func (p *ConditionalWriterOptions) IsSetAuthorizations() bool {
	return p.Authorizations != nil
}

func (p *ConditionalWriterOptions) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *ConditionalWriterOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ConditionalWriterOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaxMemory = &v
	}
	return nil
}

func (p *ConditionalWriterOptions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TimeoutMs = &v
	}
	return nil
}

func (p *ConditionalWriterOptions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Threads = &v
	}
	return nil
}

func (p *ConditionalWriterOptions) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Authorizations = tSet
	for i := 0; i < size; i++ {
		var _elem14 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem14 = v
		}
		p.Authorizations[string(_elem14)] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *ConditionalWriterOptions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Durability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *ConditionalWriterOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ConditionalWriterOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ConditionalWriterOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetMaxMemory() {
		if err := oprot.WriteFieldBegin("maxMemory", thrift.I64, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxMemory: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.MaxMemory)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.maxMemory (1) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxMemory: ", p), err)
		}
	}
	return err
}

func (p *ConditionalWriterOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimeoutMs() {
		if err := oprot.WriteFieldBegin("timeoutMs", thrift.I64, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeoutMs: ", p), err)
		}
		if err := oprot.WriteI64(int64(*p.TimeoutMs)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (2) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeoutMs: ", p), err)
		}
	}
	return err
}

func (p *ConditionalWriterOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetThreads() {
		if err := oprot.WriteFieldBegin("threads", thrift.I32, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:threads: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Threads)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.threads (3) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:threads: ", p), err)
		}
	}
	return err
}

func (p *ConditionalWriterOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetAuthorizations() {
		if err := oprot.WriteFieldBegin("authorizations", thrift.SET, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:authorizations: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Authorizations)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Authorizations {
			if err := oprot.WriteBinary([]byte(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:authorizations: ", p), err)
		}
	}
	return err
}

func (p *ConditionalWriterOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:durability: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.durability (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:durability: ", p), err)
		}
	}
	return err
}

func (p *ConditionalWriterOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ConditionalWriterOptions(%+v)", *p)
}

// Attributes:
//  - Client
//  - User
//  - Table
//  - Age
//  - IdleTime
//  - Type
//  - State
//  - Extent
//  - Columns
//  - Iterators
//  - Authorizations
type ActiveScan struct {
	Client         string             `thrift:"client,1" json:"client"`
	User           string             `thrift:"user,2" json:"user"`
	Table          string             `thrift:"table,3" json:"table"`
	Age            int64              `thrift:"age,4" json:"age"`
	IdleTime       int64              `thrift:"idleTime,5" json:"idleTime"`
	Type           ScanType           `thrift:"type,6" json:"type"`
	State          ScanState          `thrift:"state,7" json:"state"`
	Extent         *KeyExtent         `thrift:"extent,8" json:"extent"`
	Columns        []*Column          `thrift:"columns,9" json:"columns"`
	Iterators      []*IteratorSetting `thrift:"iterators,10" json:"iterators"`
	Authorizations [][]byte           `thrift:"authorizations,11" json:"authorizations"`
}

func NewActiveScan() *ActiveScan {
	return &ActiveScan{}
}

func (p *ActiveScan) GetClient() string {
	return p.Client
}

func (p *ActiveScan) GetUser() string {
	return p.User
}

func (p *ActiveScan) GetTable() string {
	return p.Table
}

func (p *ActiveScan) GetAge() int64 {
	return p.Age
}

func (p *ActiveScan) GetIdleTime() int64 {
	return p.IdleTime
}

func (p *ActiveScan) GetType() ScanType {
	return p.Type
}

func (p *ActiveScan) GetState() ScanState {
	return p.State
}

var ActiveScan_Extent_DEFAULT *KeyExtent

func (p *ActiveScan) GetExtent() *KeyExtent {
	if !p.IsSetExtent() {
		return ActiveScan_Extent_DEFAULT
	}
	return p.Extent
}

func (p *ActiveScan) GetColumns() []*Column {
	return p.Columns
}

func (p *ActiveScan) GetIterators() []*IteratorSetting {
	return p.Iterators
}

func (p *ActiveScan) GetAuthorizations() [][]byte {
	return p.Authorizations
}
func (p *ActiveScan) IsSetExtent() bool {
	return p.Extent != nil
}

func (p *ActiveScan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		case 11:
			if err := p.readField11(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ActiveScan) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Client = v
	}
	return nil
}

func (p *ActiveScan) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *ActiveScan) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Table = v
	}
	return nil
}

func (p *ActiveScan) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Age = v
	}
	return nil
}

func (p *ActiveScan) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.IdleTime = v
	}
	return nil
}

func (p *ActiveScan) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := ScanType(v)
		p.Type = temp
	}
	return nil
}

func (p *ActiveScan) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		temp := ScanState(v)
		p.State = temp
	}
	return nil
}

func (p *ActiveScan) readField8(iprot thrift.TProtocol) error {
	p.Extent = &KeyExtent{}
	if err := p.Extent.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extent), err)
	}
	return nil
}

func (p *ActiveScan) readField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*Column, 0, size)
	p.Columns = tSlice
	for i := 0; i < size; i++ {
		_elem15 := &Column{}
		if err := _elem15.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
		}
		p.Columns = append(p.Columns, _elem15)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActiveScan) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IteratorSetting, 0, size)
	p.Iterators = tSlice
	for i := 0; i < size; i++ {
		_elem16 := &IteratorSetting{}
		if err := _elem16.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem16), err)
		}
		p.Iterators = append(p.Iterators, _elem16)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActiveScan) readField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Authorizations = tSlice
	for i := 0; i < size; i++ {
		var _elem17 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem17 = v
		}
		p.Authorizations = append(p.Authorizations, _elem17)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActiveScan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ActiveScan"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := p.writeField11(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ActiveScan) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("client", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:client: ", p), err)
	}
	if err := oprot.WriteString(string(p.Client)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.client (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:client: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("age", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:age: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Age)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.age (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:age: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("idleTime", thrift.I64, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:idleTime: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.IdleTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.idleTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:idleTime: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:type: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("state", thrift.I32, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:state: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.State)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.state (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:state: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extent", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:extent: ", p), err)
	}
	if err := p.Extent.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extent), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:extent: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("columns", thrift.LIST, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:columns: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Columns)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Columns {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:columns: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iterators", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:iterators: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Iterators)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Iterators {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:iterators: ", p), err)
	}
	return err
}

func (p *ActiveScan) writeField11(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorizations", thrift.LIST, 11); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:authorizations: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.Authorizations)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Authorizations {
		if err := oprot.WriteBinary(v); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 11:authorizations: ", p), err)
	}
	return err
}

func (p *ActiveScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActiveScan(%+v)", *p)
}

// Attributes:
//  - Extent
//  - Age
//  - InputFiles
//  - OutputFile
//  - Type
//  - Reason
//  - LocalityGroup
//  - EntriesRead
//  - EntriesWritten
//  - Iterators
type ActiveCompaction struct {
	Extent         *KeyExtent         `thrift:"extent,1" json:"extent"`
	Age            int64              `thrift:"age,2" json:"age"`
	InputFiles     []string           `thrift:"inputFiles,3" json:"inputFiles"`
	OutputFile     string             `thrift:"outputFile,4" json:"outputFile"`
	Type           CompactionType     `thrift:"type,5" json:"type"`
	Reason         CompactionReason   `thrift:"reason,6" json:"reason"`
	LocalityGroup  string             `thrift:"localityGroup,7" json:"localityGroup"`
	EntriesRead    int64              `thrift:"entriesRead,8" json:"entriesRead"`
	EntriesWritten int64              `thrift:"entriesWritten,9" json:"entriesWritten"`
	Iterators      []*IteratorSetting `thrift:"iterators,10" json:"iterators"`
}

func NewActiveCompaction() *ActiveCompaction {
	return &ActiveCompaction{}
}

var ActiveCompaction_Extent_DEFAULT *KeyExtent

func (p *ActiveCompaction) GetExtent() *KeyExtent {
	if !p.IsSetExtent() {
		return ActiveCompaction_Extent_DEFAULT
	}
	return p.Extent
}

func (p *ActiveCompaction) GetAge() int64 {
	return p.Age
}

func (p *ActiveCompaction) GetInputFiles() []string {
	return p.InputFiles
}

func (p *ActiveCompaction) GetOutputFile() string {
	return p.OutputFile
}

func (p *ActiveCompaction) GetType() CompactionType {
	return p.Type
}

func (p *ActiveCompaction) GetReason() CompactionReason {
	return p.Reason
}

func (p *ActiveCompaction) GetLocalityGroup() string {
	return p.LocalityGroup
}

func (p *ActiveCompaction) GetEntriesRead() int64 {
	return p.EntriesRead
}

func (p *ActiveCompaction) GetEntriesWritten() int64 {
	return p.EntriesWritten
}

func (p *ActiveCompaction) GetIterators() []*IteratorSetting {
	return p.Iterators
}
func (p *ActiveCompaction) IsSetExtent() bool {
	return p.Extent != nil
}

func (p *ActiveCompaction) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		case 10:
			if err := p.readField10(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ActiveCompaction) readField1(iprot thrift.TProtocol) error {
	p.Extent = &KeyExtent{}
	if err := p.Extent.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Extent), err)
	}
	return nil
}

func (p *ActiveCompaction) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Age = v
	}
	return nil
}

func (p *ActiveCompaction) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.InputFiles = tSlice
	for i := 0; i < size; i++ {
		var _elem18 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem18 = v
		}
		p.InputFiles = append(p.InputFiles, _elem18)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActiveCompaction) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.OutputFile = v
	}
	return nil
}

func (p *ActiveCompaction) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := CompactionType(v)
		p.Type = temp
	}
	return nil
}

func (p *ActiveCompaction) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		temp := CompactionReason(v)
		p.Reason = temp
	}
	return nil
}

func (p *ActiveCompaction) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.LocalityGroup = v
	}
	return nil
}

func (p *ActiveCompaction) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.EntriesRead = v
	}
	return nil
}

func (p *ActiveCompaction) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.EntriesWritten = v
	}
	return nil
}

func (p *ActiveCompaction) readField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IteratorSetting, 0, size)
	p.Iterators = tSlice
	for i := 0; i < size; i++ {
		_elem19 := &IteratorSetting{}
		if err := _elem19.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem19), err)
		}
		p.Iterators = append(p.Iterators, _elem19)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *ActiveCompaction) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ActiveCompaction"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := p.writeField10(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ActiveCompaction) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("extent", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:extent: ", p), err)
	}
	if err := p.Extent.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Extent), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:extent: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("age", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:age: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Age)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.age (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:age: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inputFiles", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:inputFiles: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.InputFiles)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.InputFiles {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:inputFiles: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("outputFile", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:outputFile: ", p), err)
	}
	if err := oprot.WriteString(string(p.OutputFile)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.outputFile (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:outputFile: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:type: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("reason", thrift.I32, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:reason: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Reason)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.reason (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:reason: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("localityGroup", thrift.STRING, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:localityGroup: ", p), err)
	}
	if err := oprot.WriteString(string(p.LocalityGroup)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.localityGroup (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:localityGroup: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entriesRead", thrift.I64, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:entriesRead: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EntriesRead)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.entriesRead (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:entriesRead: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("entriesWritten", thrift.I64, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:entriesWritten: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.EntriesWritten)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.entriesWritten (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:entriesWritten: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) writeField10(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iterators", thrift.LIST, 10); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:iterators: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Iterators)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Iterators {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 10:iterators: ", p), err)
	}
	return err
}

func (p *ActiveCompaction) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ActiveCompaction(%+v)", *p)
}

// Attributes:
//  - MaxMemory
//  - LatencyMs
//  - TimeoutMs
//  - Threads
//  - Durability
type WriterOptions struct {
	MaxMemory  int64       `thrift:"maxMemory,1" json:"maxMemory"`
	LatencyMs  int64       `thrift:"latencyMs,2" json:"latencyMs"`
	TimeoutMs  int64       `thrift:"timeoutMs,3" json:"timeoutMs"`
	Threads    int32       `thrift:"threads,4" json:"threads"`
	Durability *Durability `thrift:"durability,5" json:"durability,omitempty"`
}

func NewWriterOptions() *WriterOptions {
	return &WriterOptions{}
}

func (p *WriterOptions) GetMaxMemory() int64 {
	return p.MaxMemory
}

func (p *WriterOptions) GetLatencyMs() int64 {
	return p.LatencyMs
}

func (p *WriterOptions) GetTimeoutMs() int64 {
	return p.TimeoutMs
}

func (p *WriterOptions) GetThreads() int32 {
	return p.Threads
}

var WriterOptions_Durability_DEFAULT Durability

func (p *WriterOptions) GetDurability() Durability {
	if !p.IsSetDurability() {
		return WriterOptions_Durability_DEFAULT
	}
	return *p.Durability
}
func (p *WriterOptions) IsSetDurability() bool {
	return p.Durability != nil
}

func (p *WriterOptions) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *WriterOptions) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.MaxMemory = v
	}
	return nil
}

func (p *WriterOptions) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.LatencyMs = v
	}
	return nil
}

func (p *WriterOptions) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.TimeoutMs = v
	}
	return nil
}

func (p *WriterOptions) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Threads = v
	}
	return nil
}

func (p *WriterOptions) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		temp := Durability(v)
		p.Durability = &temp
	}
	return nil
}

func (p *WriterOptions) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("WriterOptions"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *WriterOptions) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxMemory", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:maxMemory: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.MaxMemory)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxMemory (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:maxMemory: ", p), err)
	}
	return err
}

func (p *WriterOptions) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("latencyMs", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:latencyMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.LatencyMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.latencyMs (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:latencyMs: ", p), err)
	}
	return err
}

func (p *WriterOptions) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeoutMs", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeoutMs: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.TimeoutMs)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timeoutMs (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeoutMs: ", p), err)
	}
	return err
}

func (p *WriterOptions) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("threads", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:threads: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Threads)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.threads (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:threads: ", p), err)
	}
	return err
}

func (p *WriterOptions) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetDurability() {
		if err := oprot.WriteFieldBegin("durability", thrift.I32, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:durability: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Durability)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.durability (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:durability: ", p), err)
		}
	}
	return err
}

func (p *WriterOptions) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("WriterOptions(%+v)", *p)
}

// Attributes:
//  - ClassName
//  - Options
type CompactionStrategyConfig struct {
	ClassName string            `thrift:"className,1" json:"className"`
	Options   map[string]string `thrift:"options,2" json:"options"`
}

func NewCompactionStrategyConfig() *CompactionStrategyConfig {
	return &CompactionStrategyConfig{}
}

func (p *CompactionStrategyConfig) GetClassName() string {
	return p.ClassName
}

func (p *CompactionStrategyConfig) GetOptions() map[string]string {
	return p.Options
}
func (p *CompactionStrategyConfig) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CompactionStrategyConfig) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *CompactionStrategyConfig) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Options = tMap
	for i := 0; i < size; i++ {
		var _key20 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key20 = v
		}
		var _val21 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val21 = v
		}
		p.Options[_key20] = _val21
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *CompactionStrategyConfig) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CompactionStrategyConfig"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CompactionStrategyConfig) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:className: ", p), err)
	}
	return err
}

func (p *CompactionStrategyConfig) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:options: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Options)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Options {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:options: ", p), err)
	}
	return err
}

func (p *CompactionStrategyConfig) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CompactionStrategyConfig(%+v)", *p)
}

// Attributes:
//  - Msg
type UnknownScanner struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewUnknownScanner() *UnknownScanner {
	return &UnknownScanner{}
}

func (p *UnknownScanner) GetMsg() string {
	return p.Msg
}
func (p *UnknownScanner) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UnknownScanner) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UnknownScanner) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownScanner"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnknownScanner) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *UnknownScanner) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownScanner(%+v)", *p)
}

func (p *UnknownScanner) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type UnknownWriter struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewUnknownWriter() *UnknownWriter {
	return &UnknownWriter{}
}

func (p *UnknownWriter) GetMsg() string {
	return p.Msg
}
func (p *UnknownWriter) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *UnknownWriter) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *UnknownWriter) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UnknownWriter"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *UnknownWriter) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *UnknownWriter) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UnknownWriter(%+v)", *p)
}

func (p *UnknownWriter) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type NoMoreEntriesException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewNoMoreEntriesException() *NoMoreEntriesException {
	return &NoMoreEntriesException{}
}

func (p *NoMoreEntriesException) GetMsg() string {
	return p.Msg
}
func (p *NoMoreEntriesException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *NoMoreEntriesException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *NoMoreEntriesException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("NoMoreEntriesException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *NoMoreEntriesException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *NoMoreEntriesException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("NoMoreEntriesException(%+v)", *p)
}

func (p *NoMoreEntriesException) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type AccumuloException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewAccumuloException() *AccumuloException {
	return &AccumuloException{}
}

func (p *AccumuloException) GetMsg() string {
	return p.Msg
}
func (p *AccumuloException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AccumuloException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccumuloException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *AccumuloException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloException(%+v)", *p)
}

func (p *AccumuloException) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type AccumuloSecurityException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewAccumuloSecurityException() *AccumuloSecurityException {
	return &AccumuloSecurityException{}
}

func (p *AccumuloSecurityException) GetMsg() string {
	return p.Msg
}
func (p *AccumuloSecurityException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloSecurityException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *AccumuloSecurityException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AccumuloSecurityException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloSecurityException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *AccumuloSecurityException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloSecurityException(%+v)", *p)
}

func (p *AccumuloSecurityException) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type TableNotFoundException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewTableNotFoundException() *TableNotFoundException {
	return &TableNotFoundException{}
}

func (p *TableNotFoundException) GetMsg() string {
	return p.Msg
}
func (p *TableNotFoundException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TableNotFoundException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *TableNotFoundException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableNotFoundException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TableNotFoundException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *TableNotFoundException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableNotFoundException(%+v)", *p)
}

func (p *TableNotFoundException) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type TableExistsException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewTableExistsException() *TableExistsException {
	return &TableExistsException{}
}

func (p *TableExistsException) GetMsg() string {
	return p.Msg
}
func (p *TableExistsException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *TableExistsException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *TableExistsException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TableExistsException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *TableExistsException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *TableExistsException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TableExistsException(%+v)", *p)
}

func (p *TableExistsException) Error() string {
	return p.String()
}

// Attributes:
//  - Msg
type MutationsRejectedException struct {
	Msg string `thrift:"msg,1" json:"msg"`
}

func NewMutationsRejectedException() *MutationsRejectedException {
	return &MutationsRejectedException{}
}

func (p *MutationsRejectedException) GetMsg() string {
	return p.Msg
}
func (p *MutationsRejectedException) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *MutationsRejectedException) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Msg = v
	}
	return nil
}

func (p *MutationsRejectedException) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MutationsRejectedException"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *MutationsRejectedException) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err)
	}
	if err := oprot.WriteString(string(p.Msg)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err)
	}
	return err
}

func (p *MutationsRejectedException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MutationsRejectedException(%+v)", *p)
}

func (p *MutationsRejectedException) Error() string {
	return p.String()
}
