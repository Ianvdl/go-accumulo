// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package proxy

import (
	"bytes"
	"fmt"

	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type AccumuloProxy interface {
	// Parameters:
	//  - Principal
	//  - LoginProperties
	Login(principal string, loginProperties map[string]string) (r []byte, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - ConstraintClassName
	AddConstraint(login []byte, tableName string, constraintClassName string) (r int32, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Splits
	AddSplits(login []byte, tableName string, splits map[string]bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Setting
	//  - Scopes
	AttachIterator(login []byte, tableName string, setting *IteratorSetting, scopes map[IteratorScope]bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Setting
	//  - Scopes
	CheckIteratorConflicts(login []byte, tableName string, setting *IteratorSetting, scopes map[IteratorScope]bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	ClearLocatorCache(login []byte, tableName string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - NewTableName_
	//  - Flush
	//  - PropertiesToSet
	//  - PropertiesToExclude
	CloneTable(login []byte, tableName string, newTableName string, flush bool, propertiesToSet map[string]string, propertiesToExclude map[string]bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - StartRow
	//  - EndRow
	//  - Iterators
	//  - Flush
	//  - Wait
	//  - CompactionStrategy
	CompactTable(login []byte, tableName string, startRow []byte, endRow []byte, iterators []*IteratorSetting, flush bool, wait bool, compactionStrategy *CompactionStrategyConfig) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	CancelCompaction(login []byte, tableName string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - VersioningIter
	//  - Type
	CreateTable(login []byte, tableName string, versioningIter bool, type_a1 TimeType) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	DeleteTable(login []byte, tableName string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - StartRow
	//  - EndRow
	DeleteRows(login []byte, tableName string, startRow []byte, endRow []byte) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - ExportDir
	ExportTable(login []byte, tableName string, exportDir string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - StartRow
	//  - EndRow
	//  - Wait
	FlushTable(login []byte, tableName string, startRow []byte, endRow []byte, wait bool) (err error)
	// Parameters:
	//  - Login
	//  - Tables
	GetDiskUsage(login []byte, tables map[string]bool) (r []*DiskUsage, err error)
	// Parameters:
	//  - Login
	//  - TableName
	GetLocalityGroups(login []byte, tableName string) (r map[string]map[string]bool, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - IteratorName
	//  - Scope
	GetIteratorSetting(login []byte, tableName string, iteratorName string, scope IteratorScope) (r *IteratorSetting, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Auths
	//  - StartRow
	//  - StartInclusive
	//  - EndRow
	//  - EndInclusive
	GetMaxRow(login []byte, tableName string, auths map[string]bool, startRow []byte, startInclusive bool, endRow []byte, endInclusive bool) (r []byte, err error)
	// Parameters:
	//  - Login
	//  - TableName
	GetTableProperties(login []byte, tableName string) (r map[string]string, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - ImportDir
	//  - FailureDir
	//  - SetTime
	ImportDirectory(login []byte, tableName string, importDir string, failureDir string, setTime bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - ImportDir
	ImportTable(login []byte, tableName string, importDir string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - MaxSplits
	ListSplits(login []byte, tableName string, maxSplits int32) (r [][]byte, err error)
	// Parameters:
	//  - Login
	ListTables(login []byte) (r map[string]bool, err error)
	// Parameters:
	//  - Login
	//  - TableName
	ListIterators(login []byte, tableName string) (r map[string]map[IteratorScope]bool, err error)
	// Parameters:
	//  - Login
	//  - TableName
	ListConstraints(login []byte, tableName string) (r map[string]int32, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - StartRow
	//  - EndRow
	MergeTablets(login []byte, tableName string, startRow []byte, endRow []byte) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Wait
	OfflineTable(login []byte, tableName string, wait bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Wait
	OnlineTable(login []byte, tableName string, wait bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Constraint
	RemoveConstraint(login []byte, tableName string, constraint int32) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - IterName
	//  - Scopes
	RemoveIterator(login []byte, tableName string, iterName string, scopes map[IteratorScope]bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Property
	RemoveTableProperty(login []byte, tableName string, property string) (err error)
	// Parameters:
	//  - Login
	//  - OldTableName
	//  - NewTableName_
	RenameTable(login []byte, oldTableName string, newTableName string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Groups
	SetLocalityGroups(login []byte, tableName string, groups map[string]map[string]bool) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Property
	//  - Value
	SetTableProperty(login []byte, tableName string, property string, value string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Range
	//  - MaxSplits
	SplitRangeByTablets(login []byte, tableName string, range_a1 *Range, maxSplits int32) (r map[*Range]bool, err error)
	// Parameters:
	//  - Login
	//  - TableName
	TableExists(login []byte, tableName string) (r bool, err error)
	// Parameters:
	//  - Login
	TableIdMap(login []byte) (r map[string]string, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - ClassName
	//  - AsTypeName
	TestTableClassLoad(login []byte, tableName string, className string, asTypeName string) (r bool, err error)
	// Parameters:
	//  - Login
	//  - Tserver
	PingTabletServer(login []byte, tserver string) (err error)
	// Parameters:
	//  - Login
	//  - Tserver
	GetActiveScans(login []byte, tserver string) (r []*ActiveScan, err error)
	// Parameters:
	//  - Login
	//  - Tserver
	GetActiveCompactions(login []byte, tserver string) (r []*ActiveCompaction, err error)
	// Parameters:
	//  - Login
	GetSiteConfiguration(login []byte) (r map[string]string, err error)
	// Parameters:
	//  - Login
	GetSystemConfiguration(login []byte) (r map[string]string, err error)
	// Parameters:
	//  - Login
	GetTabletServers(login []byte) (r []string, err error)
	// Parameters:
	//  - Login
	//  - Property
	RemoveProperty(login []byte, property string) (err error)
	// Parameters:
	//  - Login
	//  - Property
	//  - Value
	SetProperty(login []byte, property string, value string) (err error)
	// Parameters:
	//  - Login
	//  - ClassName
	//  - AsTypeName
	TestClassLoad(login []byte, className string, asTypeName string) (r bool, err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Properties
	AuthenticateUser(login []byte, user string, properties map[string]string) (r bool, err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Authorizations
	ChangeUserAuthorizations(login []byte, user string, authorizations map[string]bool) (err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Password
	ChangeLocalUserPassword(login []byte, user string, password []byte) (err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Password
	CreateLocalUser(login []byte, user string, password []byte) (err error)
	// Parameters:
	//  - Login
	//  - User
	DropLocalUser(login []byte, user string) (err error)
	// Parameters:
	//  - Login
	//  - User
	GetUserAuthorizations(login []byte, user string) (r [][]byte, err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Perm
	GrantSystemPermission(login []byte, user string, perm SystemPermission) (err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Table
	//  - Perm
	GrantTablePermission(login []byte, user string, table string, perm TablePermission) (err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Perm
	HasSystemPermission(login []byte, user string, perm SystemPermission) (r bool, err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Table
	//  - Perm
	HasTablePermission(login []byte, user string, table string, perm TablePermission) (r bool, err error)
	// Parameters:
	//  - Login
	ListLocalUsers(login []byte) (r map[string]bool, err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Perm
	RevokeSystemPermission(login []byte, user string, perm SystemPermission) (err error)
	// Parameters:
	//  - Login
	//  - User
	//  - Table
	//  - Perm
	RevokeTablePermission(login []byte, user string, table string, perm TablePermission) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Options
	CreateBatchScanner(login []byte, tableName string, options *BatchScanOptions) (r string, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Options
	CreateScanner(login []byte, tableName string, options *ScanOptions) (r string, err error)
	// Parameters:
	//  - Scanner
	HasNext(scanner string) (r bool, err error)
	// Parameters:
	//  - Scanner
	NextEntry(scanner string) (r *KeyValueAndPeek, err error)
	// Parameters:
	//  - Scanner
	//  - K
	NextK(scanner string, k int32) (r *ScanResult_, err error)
	// Parameters:
	//  - Scanner
	CloseScanner(scanner string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Cells
	UpdateAndFlush(login []byte, tableName string, cells map[string][]*ColumnUpdate) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Opts
	CreateWriter(login []byte, tableName string, opts *WriterOptions) (r string, err error)
	// Parameters:
	//  - Writer
	//  - Cells
	Update(writer string, cells map[string][]*ColumnUpdate) (err error)
	// Parameters:
	//  - Writer
	Flush(writer string) (err error)
	// Parameters:
	//  - Writer
	CloseWriter(writer string) (err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Row
	//  - Updates
	UpdateRowConditionally(login []byte, tableName string, row []byte, updates *ConditionalUpdates) (r ConditionalStatus, err error)
	// Parameters:
	//  - Login
	//  - TableName
	//  - Options
	CreateConditionalWriter(login []byte, tableName string, options *ConditionalWriterOptions) (r string, err error)
	// Parameters:
	//  - ConditionalWriter
	//  - Updates
	UpdateRowsConditionally(conditionalWriter string, updates map[string]*ConditionalUpdates) (r map[string]ConditionalStatus, err error)
	// Parameters:
	//  - ConditionalWriter
	CloseConditionalWriter(conditionalWriter string) (err error)
	// Parameters:
	//  - Row
	GetRowRange(row []byte) (r *Range, err error)
	// Parameters:
	//  - Key
	//  - Part
	GetFollowing(key *Key, part PartialKey) (r *Key, err error)
}

type AccumuloProxyClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewAccumuloProxyClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AccumuloProxyClient {
	return &AccumuloProxyClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewAccumuloProxyClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AccumuloProxyClient {
	return &AccumuloProxyClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

// Parameters:
//  - Principal
//  - LoginProperties
func (p *AccumuloProxyClient) Login(principal string, loginProperties map[string]string) (r []byte, err error) {
	if err = p.sendLogin(principal, loginProperties); err != nil {
		return
	}
	return p.recvLogin()
}

func (p *AccumuloProxyClient) sendLogin(principal string, loginProperties map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("login", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyLoginArgs{
		Principal:       principal,
		LoginProperties: loginProperties,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvLogin() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "login" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "login failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "login failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error22 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error23 error
		error23, err = error22.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error23
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "login failed: invalid message type")
		return
	}
	result := AccumuloProxyLoginResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - ConstraintClassName
func (p *AccumuloProxyClient) AddConstraint(login []byte, tableName string, constraintClassName string) (r int32, err error) {
	if err = p.sendAddConstraint(login, tableName, constraintClassName); err != nil {
		return
	}
	return p.recvAddConstraint()
}

func (p *AccumuloProxyClient) sendAddConstraint(login []byte, tableName string, constraintClassName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addConstraint", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyAddConstraintArgs{
		Login:               login,
		TableName:           tableName,
		ConstraintClassName: constraintClassName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvAddConstraint() (value int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addConstraint" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addConstraint failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addConstraint failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error24 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error25 error
		error25, err = error24.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error25
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addConstraint failed: invalid message type")
		return
	}
	result := AccumuloProxyAddConstraintResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Splits
func (p *AccumuloProxyClient) AddSplits(login []byte, tableName string, splits map[string]bool) (err error) {
	if err = p.sendAddSplits(login, tableName, splits); err != nil {
		return
	}
	return p.recvAddSplits()
}

func (p *AccumuloProxyClient) sendAddSplits(login []byte, tableName string, splits map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("addSplits", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyAddSplitsArgs{
		Login:     login,
		TableName: tableName,
		Splits:    splits,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvAddSplits() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "addSplits" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "addSplits failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "addSplits failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error26 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error27 error
		error27, err = error26.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error27
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "addSplits failed: invalid message type")
		return
	}
	result := AccumuloProxyAddSplitsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Setting
//  - Scopes
func (p *AccumuloProxyClient) AttachIterator(login []byte, tableName string, setting *IteratorSetting, scopes map[IteratorScope]bool) (err error) {
	if err = p.sendAttachIterator(login, tableName, setting, scopes); err != nil {
		return
	}
	return p.recvAttachIterator()
}

func (p *AccumuloProxyClient) sendAttachIterator(login []byte, tableName string, setting *IteratorSetting, scopes map[IteratorScope]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("attachIterator", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyAttachIteratorArgs{
		Login:     login,
		TableName: tableName,
		Setting:   setting,
		Scopes:    scopes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvAttachIterator() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "attachIterator" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "attachIterator failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "attachIterator failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error28 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error29 error
		error29, err = error28.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error29
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "attachIterator failed: invalid message type")
		return
	}
	result := AccumuloProxyAttachIteratorResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Setting
//  - Scopes
func (p *AccumuloProxyClient) CheckIteratorConflicts(login []byte, tableName string, setting *IteratorSetting, scopes map[IteratorScope]bool) (err error) {
	if err = p.sendCheckIteratorConflicts(login, tableName, setting, scopes); err != nil {
		return
	}
	return p.recvCheckIteratorConflicts()
}

func (p *AccumuloProxyClient) sendCheckIteratorConflicts(login []byte, tableName string, setting *IteratorSetting, scopes map[IteratorScope]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("checkIteratorConflicts", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCheckIteratorConflictsArgs{
		Login:     login,
		TableName: tableName,
		Setting:   setting,
		Scopes:    scopes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCheckIteratorConflicts() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "checkIteratorConflicts" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "checkIteratorConflicts failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "checkIteratorConflicts failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error30 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error31 error
		error31, err = error30.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error31
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "checkIteratorConflicts failed: invalid message type")
		return
	}
	result := AccumuloProxyCheckIteratorConflictsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) ClearLocatorCache(login []byte, tableName string) (err error) {
	if err = p.sendClearLocatorCache(login, tableName); err != nil {
		return
	}
	return p.recvClearLocatorCache()
}

func (p *AccumuloProxyClient) sendClearLocatorCache(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("clearLocatorCache", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyClearLocatorCacheArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvClearLocatorCache() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "clearLocatorCache" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "clearLocatorCache failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "clearLocatorCache failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error32 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error33 error
		error33, err = error32.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error33
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "clearLocatorCache failed: invalid message type")
		return
	}
	result := AccumuloProxyClearLocatorCacheResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - NewTableName_
//  - Flush
//  - PropertiesToSet
//  - PropertiesToExclude
func (p *AccumuloProxyClient) CloneTable(login []byte, tableName string, newTableName string, flush bool, propertiesToSet map[string]string, propertiesToExclude map[string]bool) (err error) {
	if err = p.sendCloneTable(login, tableName, newTableName, flush, propertiesToSet, propertiesToExclude); err != nil {
		return
	}
	return p.recvCloneTable()
}

func (p *AccumuloProxyClient) sendCloneTable(login []byte, tableName string, newTableName string, flush bool, propertiesToSet map[string]string, propertiesToExclude map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cloneTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCloneTableArgs{
		Login:               login,
		TableName:           tableName,
		NewTableName_:       newTableName,
		Flush:               flush,
		PropertiesToSet:     propertiesToSet,
		PropertiesToExclude: propertiesToExclude,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCloneTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cloneTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cloneTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cloneTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error34 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error35 error
		error35, err = error34.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error35
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cloneTable failed: invalid message type")
		return
	}
	result := AccumuloProxyCloneTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	} else if result.Ouch4 != nil {
		err = result.Ouch4
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
//  - Iterators
//  - Flush
//  - Wait
//  - CompactionStrategy
func (p *AccumuloProxyClient) CompactTable(login []byte, tableName string, startRow []byte, endRow []byte, iterators []*IteratorSetting, flush bool, wait bool, compactionStrategy *CompactionStrategyConfig) (err error) {
	if err = p.sendCompactTable(login, tableName, startRow, endRow, iterators, flush, wait, compactionStrategy); err != nil {
		return
	}
	return p.recvCompactTable()
}

func (p *AccumuloProxyClient) sendCompactTable(login []byte, tableName string, startRow []byte, endRow []byte, iterators []*IteratorSetting, flush bool, wait bool, compactionStrategy *CompactionStrategyConfig) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("compactTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCompactTableArgs{
		Login:              login,
		TableName:          tableName,
		StartRow:           startRow,
		EndRow:             endRow,
		Iterators:          iterators,
		Flush:              flush,
		Wait:               wait,
		CompactionStrategy: compactionStrategy,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCompactTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "compactTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "compactTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "compactTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error36 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error37 error
		error37, err = error36.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error37
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "compactTable failed: invalid message type")
		return
	}
	result := AccumuloProxyCompactTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) CancelCompaction(login []byte, tableName string) (err error) {
	if err = p.sendCancelCompaction(login, tableName); err != nil {
		return
	}
	return p.recvCancelCompaction()
}

func (p *AccumuloProxyClient) sendCancelCompaction(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("cancelCompaction", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCancelCompactionArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCancelCompaction() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "cancelCompaction" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "cancelCompaction failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "cancelCompaction failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error38 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error39 error
		error39, err = error38.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error39
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "cancelCompaction failed: invalid message type")
		return
	}
	result := AccumuloProxyCancelCompactionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - VersioningIter
//  - Type
func (p *AccumuloProxyClient) CreateTable(login []byte, tableName string, versioningIter bool, type_a1 TimeType) (err error) {
	if err = p.sendCreateTable(login, tableName, versioningIter, type_a1); err != nil {
		return
	}
	return p.recvCreateTable()
}

func (p *AccumuloProxyClient) sendCreateTable(login []byte, tableName string, versioningIter bool, type_a1 TimeType) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCreateTableArgs{
		Login:          login,
		TableName:      tableName,
		VersioningIter: versioningIter,
		Type:           type_a1,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCreateTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error40 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error41 error
		error41, err = error40.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error41
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createTable failed: invalid message type")
		return
	}
	result := AccumuloProxyCreateTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) DeleteTable(login []byte, tableName string) (err error) {
	if err = p.sendDeleteTable(login, tableName); err != nil {
		return
	}
	return p.recvDeleteTable()
}

func (p *AccumuloProxyClient) sendDeleteTable(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyDeleteTableArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvDeleteTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error42 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error43 error
		error43, err = error42.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error43
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteTable failed: invalid message type")
		return
	}
	result := AccumuloProxyDeleteTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
func (p *AccumuloProxyClient) DeleteRows(login []byte, tableName string, startRow []byte, endRow []byte) (err error) {
	if err = p.sendDeleteRows(login, tableName, startRow, endRow); err != nil {
		return
	}
	return p.recvDeleteRows()
}

func (p *AccumuloProxyClient) sendDeleteRows(login []byte, tableName string, startRow []byte, endRow []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("deleteRows", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyDeleteRowsArgs{
		Login:     login,
		TableName: tableName,
		StartRow:  startRow,
		EndRow:    endRow,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvDeleteRows() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "deleteRows" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "deleteRows failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "deleteRows failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error44 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error45 error
		error45, err = error44.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error45
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "deleteRows failed: invalid message type")
		return
	}
	result := AccumuloProxyDeleteRowsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - ExportDir
func (p *AccumuloProxyClient) ExportTable(login []byte, tableName string, exportDir string) (err error) {
	if err = p.sendExportTable(login, tableName, exportDir); err != nil {
		return
	}
	return p.recvExportTable()
}

func (p *AccumuloProxyClient) sendExportTable(login []byte, tableName string, exportDir string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("exportTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyExportTableArgs{
		Login:     login,
		TableName: tableName,
		ExportDir: exportDir,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvExportTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "exportTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "exportTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "exportTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error46 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error47 error
		error47, err = error46.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error47
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "exportTable failed: invalid message type")
		return
	}
	result := AccumuloProxyExportTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
//  - Wait
func (p *AccumuloProxyClient) FlushTable(login []byte, tableName string, startRow []byte, endRow []byte, wait bool) (err error) {
	if err = p.sendFlushTable(login, tableName, startRow, endRow, wait); err != nil {
		return
	}
	return p.recvFlushTable()
}

func (p *AccumuloProxyClient) sendFlushTable(login []byte, tableName string, startRow []byte, endRow []byte, wait bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("flushTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyFlushTableArgs{
		Login:     login,
		TableName: tableName,
		StartRow:  startRow,
		EndRow:    endRow,
		Wait:      wait,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvFlushTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "flushTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "flushTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "flushTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error48 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error49 error
		error49, err = error48.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error49
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "flushTable failed: invalid message type")
		return
	}
	result := AccumuloProxyFlushTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - Tables
func (p *AccumuloProxyClient) GetDiskUsage(login []byte, tables map[string]bool) (r []*DiskUsage, err error) {
	if err = p.sendGetDiskUsage(login, tables); err != nil {
		return
	}
	return p.recvGetDiskUsage()
}

func (p *AccumuloProxyClient) sendGetDiskUsage(login []byte, tables map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getDiskUsage", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetDiskUsageArgs{
		Login:  login,
		Tables: tables,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetDiskUsage() (value []*DiskUsage, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getDiskUsage" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getDiskUsage failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getDiskUsage failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error50 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error51 error
		error51, err = error50.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error51
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getDiskUsage failed: invalid message type")
		return
	}
	result := AccumuloProxyGetDiskUsageResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) GetLocalityGroups(login []byte, tableName string) (r map[string]map[string]bool, err error) {
	if err = p.sendGetLocalityGroups(login, tableName); err != nil {
		return
	}
	return p.recvGetLocalityGroups()
}

func (p *AccumuloProxyClient) sendGetLocalityGroups(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getLocalityGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetLocalityGroupsArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetLocalityGroups() (value map[string]map[string]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getLocalityGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getLocalityGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getLocalityGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error52 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error53 error
		error53, err = error52.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error53
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getLocalityGroups failed: invalid message type")
		return
	}
	result := AccumuloProxyGetLocalityGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - IteratorName
//  - Scope
func (p *AccumuloProxyClient) GetIteratorSetting(login []byte, tableName string, iteratorName string, scope IteratorScope) (r *IteratorSetting, err error) {
	if err = p.sendGetIteratorSetting(login, tableName, iteratorName, scope); err != nil {
		return
	}
	return p.recvGetIteratorSetting()
}

func (p *AccumuloProxyClient) sendGetIteratorSetting(login []byte, tableName string, iteratorName string, scope IteratorScope) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getIteratorSetting", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetIteratorSettingArgs{
		Login:        login,
		TableName:    tableName,
		IteratorName: iteratorName,
		Scope:        scope,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetIteratorSetting() (value *IteratorSetting, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getIteratorSetting" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getIteratorSetting failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getIteratorSetting failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error54 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error55 error
		error55, err = error54.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error55
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getIteratorSetting failed: invalid message type")
		return
	}
	result := AccumuloProxyGetIteratorSettingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Auths
//  - StartRow
//  - StartInclusive
//  - EndRow
//  - EndInclusive
func (p *AccumuloProxyClient) GetMaxRow(login []byte, tableName string, auths map[string]bool, startRow []byte, startInclusive bool, endRow []byte, endInclusive bool) (r []byte, err error) {
	if err = p.sendGetMaxRow(login, tableName, auths, startRow, startInclusive, endRow, endInclusive); err != nil {
		return
	}
	return p.recvGetMaxRow()
}

func (p *AccumuloProxyClient) sendGetMaxRow(login []byte, tableName string, auths map[string]bool, startRow []byte, startInclusive bool, endRow []byte, endInclusive bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getMaxRow", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetMaxRowArgs{
		Login:          login,
		TableName:      tableName,
		Auths:          auths,
		StartRow:       startRow,
		StartInclusive: startInclusive,
		EndRow:         endRow,
		EndInclusive:   endInclusive,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetMaxRow() (value []byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getMaxRow" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getMaxRow failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getMaxRow failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error56 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error57 error
		error57, err = error56.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error57
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getMaxRow failed: invalid message type")
		return
	}
	result := AccumuloProxyGetMaxRowResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) GetTableProperties(login []byte, tableName string) (r map[string]string, err error) {
	if err = p.sendGetTableProperties(login, tableName); err != nil {
		return
	}
	return p.recvGetTableProperties()
}

func (p *AccumuloProxyClient) sendGetTableProperties(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTableProperties", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetTablePropertiesArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetTableProperties() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTableProperties" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTableProperties failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTableProperties failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error58 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error59 error
		error59, err = error58.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error59
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTableProperties failed: invalid message type")
		return
	}
	result := AccumuloProxyGetTablePropertiesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - ImportDir
//  - FailureDir
//  - SetTime
func (p *AccumuloProxyClient) ImportDirectory(login []byte, tableName string, importDir string, failureDir string, setTime bool) (err error) {
	if err = p.sendImportDirectory(login, tableName, importDir, failureDir, setTime); err != nil {
		return
	}
	return p.recvImportDirectory()
}

func (p *AccumuloProxyClient) sendImportDirectory(login []byte, tableName string, importDir string, failureDir string, setTime bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("importDirectory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyImportDirectoryArgs{
		Login:      login,
		TableName:  tableName,
		ImportDir:  importDir,
		FailureDir: failureDir,
		SetTime:    setTime,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvImportDirectory() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "importDirectory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "importDirectory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "importDirectory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error60 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error61 error
		error61, err = error60.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error61
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "importDirectory failed: invalid message type")
		return
	}
	result := AccumuloProxyImportDirectoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	} else if result.Ouch4 != nil {
		err = result.Ouch4
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - ImportDir
func (p *AccumuloProxyClient) ImportTable(login []byte, tableName string, importDir string) (err error) {
	if err = p.sendImportTable(login, tableName, importDir); err != nil {
		return
	}
	return p.recvImportTable()
}

func (p *AccumuloProxyClient) sendImportTable(login []byte, tableName string, importDir string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("importTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyImportTableArgs{
		Login:     login,
		TableName: tableName,
		ImportDir: importDir,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvImportTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "importTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "importTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "importTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error62 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error63 error
		error63, err = error62.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error63
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "importTable failed: invalid message type")
		return
	}
	result := AccumuloProxyImportTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - MaxSplits
func (p *AccumuloProxyClient) ListSplits(login []byte, tableName string, maxSplits int32) (r [][]byte, err error) {
	if err = p.sendListSplits(login, tableName, maxSplits); err != nil {
		return
	}
	return p.recvListSplits()
}

func (p *AccumuloProxyClient) sendListSplits(login []byte, tableName string, maxSplits int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listSplits", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyListSplitsArgs{
		Login:     login,
		TableName: tableName,
		MaxSplits: maxSplits,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvListSplits() (value [][]byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listSplits" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listSplits failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listSplits failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error64 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error65 error
		error65, err = error64.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error65
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listSplits failed: invalid message type")
		return
	}
	result := AccumuloProxyListSplitsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
func (p *AccumuloProxyClient) ListTables(login []byte) (r map[string]bool, err error) {
	if err = p.sendListTables(login); err != nil {
		return
	}
	return p.recvListTables()
}

func (p *AccumuloProxyClient) sendListTables(login []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listTables", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyListTablesArgs{
		Login: login,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvListTables() (value map[string]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listTables" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listTables failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listTables failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error66 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error67 error
		error67, err = error66.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error67
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listTables failed: invalid message type")
		return
	}
	result := AccumuloProxyListTablesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) ListIterators(login []byte, tableName string) (r map[string]map[IteratorScope]bool, err error) {
	if err = p.sendListIterators(login, tableName); err != nil {
		return
	}
	return p.recvListIterators()
}

func (p *AccumuloProxyClient) sendListIterators(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listIterators", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyListIteratorsArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvListIterators() (value map[string]map[IteratorScope]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listIterators" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listIterators failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listIterators failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error68 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error69 error
		error69, err = error68.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error69
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listIterators failed: invalid message type")
		return
	}
	result := AccumuloProxyListIteratorsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) ListConstraints(login []byte, tableName string) (r map[string]int32, err error) {
	if err = p.sendListConstraints(login, tableName); err != nil {
		return
	}
	return p.recvListConstraints()
}

func (p *AccumuloProxyClient) sendListConstraints(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listConstraints", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyListConstraintsArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvListConstraints() (value map[string]int32, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listConstraints" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listConstraints failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listConstraints failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error70 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error71 error
		error71, err = error70.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error71
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listConstraints failed: invalid message type")
		return
	}
	result := AccumuloProxyListConstraintsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
func (p *AccumuloProxyClient) MergeTablets(login []byte, tableName string, startRow []byte, endRow []byte) (err error) {
	if err = p.sendMergeTablets(login, tableName, startRow, endRow); err != nil {
		return
	}
	return p.recvMergeTablets()
}

func (p *AccumuloProxyClient) sendMergeTablets(login []byte, tableName string, startRow []byte, endRow []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("mergeTablets", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyMergeTabletsArgs{
		Login:     login,
		TableName: tableName,
		StartRow:  startRow,
		EndRow:    endRow,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvMergeTablets() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "mergeTablets" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "mergeTablets failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "mergeTablets failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error72 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error73 error
		error73, err = error72.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error73
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "mergeTablets failed: invalid message type")
		return
	}
	result := AccumuloProxyMergeTabletsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Wait
func (p *AccumuloProxyClient) OfflineTable(login []byte, tableName string, wait bool) (err error) {
	if err = p.sendOfflineTable(login, tableName, wait); err != nil {
		return
	}
	return p.recvOfflineTable()
}

func (p *AccumuloProxyClient) sendOfflineTable(login []byte, tableName string, wait bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("offlineTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyOfflineTableArgs{
		Login:     login,
		TableName: tableName,
		Wait:      wait,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvOfflineTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "offlineTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "offlineTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "offlineTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error74 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error75 error
		error75, err = error74.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error75
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "offlineTable failed: invalid message type")
		return
	}
	result := AccumuloProxyOfflineTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Wait
func (p *AccumuloProxyClient) OnlineTable(login []byte, tableName string, wait bool) (err error) {
	if err = p.sendOnlineTable(login, tableName, wait); err != nil {
		return
	}
	return p.recvOnlineTable()
}

func (p *AccumuloProxyClient) sendOnlineTable(login []byte, tableName string, wait bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("onlineTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyOnlineTableArgs{
		Login:     login,
		TableName: tableName,
		Wait:      wait,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvOnlineTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "onlineTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "onlineTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "onlineTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error76 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error77 error
		error77, err = error76.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error77
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "onlineTable failed: invalid message type")
		return
	}
	result := AccumuloProxyOnlineTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Constraint
func (p *AccumuloProxyClient) RemoveConstraint(login []byte, tableName string, constraint int32) (err error) {
	if err = p.sendRemoveConstraint(login, tableName, constraint); err != nil {
		return
	}
	return p.recvRemoveConstraint()
}

func (p *AccumuloProxyClient) sendRemoveConstraint(login []byte, tableName string, constraint int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeConstraint", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRemoveConstraintArgs{
		Login:      login,
		TableName:  tableName,
		Constraint: constraint,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRemoveConstraint() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeConstraint" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeConstraint failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeConstraint failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error78 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error79 error
		error79, err = error78.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error79
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeConstraint failed: invalid message type")
		return
	}
	result := AccumuloProxyRemoveConstraintResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - IterName
//  - Scopes
func (p *AccumuloProxyClient) RemoveIterator(login []byte, tableName string, iterName string, scopes map[IteratorScope]bool) (err error) {
	if err = p.sendRemoveIterator(login, tableName, iterName, scopes); err != nil {
		return
	}
	return p.recvRemoveIterator()
}

func (p *AccumuloProxyClient) sendRemoveIterator(login []byte, tableName string, iterName string, scopes map[IteratorScope]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeIterator", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRemoveIteratorArgs{
		Login:     login,
		TableName: tableName,
		IterName:  iterName,
		Scopes:    scopes,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRemoveIterator() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeIterator" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeIterator failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeIterator failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error80 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error81 error
		error81, err = error80.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error81
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeIterator failed: invalid message type")
		return
	}
	result := AccumuloProxyRemoveIteratorResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Property
func (p *AccumuloProxyClient) RemoveTableProperty(login []byte, tableName string, property string) (err error) {
	if err = p.sendRemoveTableProperty(login, tableName, property); err != nil {
		return
	}
	return p.recvRemoveTableProperty()
}

func (p *AccumuloProxyClient) sendRemoveTableProperty(login []byte, tableName string, property string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeTableProperty", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRemoveTablePropertyArgs{
		Login:     login,
		TableName: tableName,
		Property:  property,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRemoveTableProperty() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeTableProperty" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeTableProperty failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeTableProperty failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error82 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error83 error
		error83, err = error82.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error83
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeTableProperty failed: invalid message type")
		return
	}
	result := AccumuloProxyRemoveTablePropertyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - OldTableName
//  - NewTableName_
func (p *AccumuloProxyClient) RenameTable(login []byte, oldTableName string, newTableName string) (err error) {
	if err = p.sendRenameTable(login, oldTableName, newTableName); err != nil {
		return
	}
	return p.recvRenameTable()
}

func (p *AccumuloProxyClient) sendRenameTable(login []byte, oldTableName string, newTableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("renameTable", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRenameTableArgs{
		Login:         login,
		OldTableName:  oldTableName,
		NewTableName_: newTableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRenameTable() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "renameTable" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "renameTable failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "renameTable failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error84 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error85 error
		error85, err = error84.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error85
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "renameTable failed: invalid message type")
		return
	}
	result := AccumuloProxyRenameTableResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	} else if result.Ouch4 != nil {
		err = result.Ouch4
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Groups
func (p *AccumuloProxyClient) SetLocalityGroups(login []byte, tableName string, groups map[string]map[string]bool) (err error) {
	if err = p.sendSetLocalityGroups(login, tableName, groups); err != nil {
		return
	}
	return p.recvSetLocalityGroups()
}

func (p *AccumuloProxyClient) sendSetLocalityGroups(login []byte, tableName string, groups map[string]map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setLocalityGroups", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxySetLocalityGroupsArgs{
		Login:     login,
		TableName: tableName,
		Groups:    groups,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvSetLocalityGroups() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setLocalityGroups" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setLocalityGroups failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setLocalityGroups failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error86 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error87 error
		error87, err = error86.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error87
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setLocalityGroups failed: invalid message type")
		return
	}
	result := AccumuloProxySetLocalityGroupsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Property
//  - Value
func (p *AccumuloProxyClient) SetTableProperty(login []byte, tableName string, property string, value string) (err error) {
	if err = p.sendSetTableProperty(login, tableName, property, value); err != nil {
		return
	}
	return p.recvSetTableProperty()
}

func (p *AccumuloProxyClient) sendSetTableProperty(login []byte, tableName string, property string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setTableProperty", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxySetTablePropertyArgs{
		Login:     login,
		TableName: tableName,
		Property:  property,
		Value:     value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvSetTableProperty() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setTableProperty" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setTableProperty failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setTableProperty failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error88 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error89 error
		error89, err = error88.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error89
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setTableProperty failed: invalid message type")
		return
	}
	result := AccumuloProxySetTablePropertyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Range
//  - MaxSplits
func (p *AccumuloProxyClient) SplitRangeByTablets(login []byte, tableName string, range_a1 *Range, maxSplits int32) (r map[*Range]bool, err error) {
	if err = p.sendSplitRangeByTablets(login, tableName, range_a1, maxSplits); err != nil {
		return
	}
	return p.recvSplitRangeByTablets()
}

func (p *AccumuloProxyClient) sendSplitRangeByTablets(login []byte, tableName string, range_a1 *Range, maxSplits int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("splitRangeByTablets", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxySplitRangeByTabletsArgs{
		Login:     login,
		TableName: tableName,
		Range:     range_a1,
		MaxSplits: maxSplits,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvSplitRangeByTablets() (value map[*Range]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "splitRangeByTablets" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "splitRangeByTablets failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "splitRangeByTablets failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error90 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error91 error
		error91, err = error90.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error91
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "splitRangeByTablets failed: invalid message type")
		return
	}
	result := AccumuloProxySplitRangeByTabletsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
func (p *AccumuloProxyClient) TableExists(login []byte, tableName string) (r bool, err error) {
	if err = p.sendTableExists(login, tableName); err != nil {
		return
	}
	return p.recvTableExists()
}

func (p *AccumuloProxyClient) sendTableExists(login []byte, tableName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("tableExists", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyTableExistsArgs{
		Login:     login,
		TableName: tableName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvTableExists() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "tableExists" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "tableExists failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "tableExists failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error92 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error93 error
		error93, err = error92.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error93
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "tableExists failed: invalid message type")
		return
	}
	result := AccumuloProxyTableExistsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
func (p *AccumuloProxyClient) TableIdMap(login []byte) (r map[string]string, err error) {
	if err = p.sendTableIdMap(login); err != nil {
		return
	}
	return p.recvTableIdMap()
}

func (p *AccumuloProxyClient) sendTableIdMap(login []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("tableIdMap", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyTableIdMapArgs{
		Login: login,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvTableIdMap() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "tableIdMap" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "tableIdMap failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "tableIdMap failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error94 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error95 error
		error95, err = error94.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error95
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "tableIdMap failed: invalid message type")
		return
	}
	result := AccumuloProxyTableIdMapResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - ClassName
//  - AsTypeName
func (p *AccumuloProxyClient) TestTableClassLoad(login []byte, tableName string, className string, asTypeName string) (r bool, err error) {
	if err = p.sendTestTableClassLoad(login, tableName, className, asTypeName); err != nil {
		return
	}
	return p.recvTestTableClassLoad()
}

func (p *AccumuloProxyClient) sendTestTableClassLoad(login []byte, tableName string, className string, asTypeName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testTableClassLoad", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyTestTableClassLoadArgs{
		Login:      login,
		TableName:  tableName,
		ClassName:  className,
		AsTypeName: asTypeName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvTestTableClassLoad() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testTableClassLoad" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testTableClassLoad failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testTableClassLoad failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error96 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error97 error
		error97, err = error96.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error97
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testTableClassLoad failed: invalid message type")
		return
	}
	result := AccumuloProxyTestTableClassLoadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - Tserver
func (p *AccumuloProxyClient) PingTabletServer(login []byte, tserver string) (err error) {
	if err = p.sendPingTabletServer(login, tserver); err != nil {
		return
	}
	return p.recvPingTabletServer()
}

func (p *AccumuloProxyClient) sendPingTabletServer(login []byte, tserver string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("pingTabletServer", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyPingTabletServerArgs{
		Login:   login,
		Tserver: tserver,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvPingTabletServer() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "pingTabletServer" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "pingTabletServer failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "pingTabletServer failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error98 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error99 error
		error99, err = error98.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error99
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "pingTabletServer failed: invalid message type")
		return
	}
	result := AccumuloProxyPingTabletServerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - Tserver
func (p *AccumuloProxyClient) GetActiveScans(login []byte, tserver string) (r []*ActiveScan, err error) {
	if err = p.sendGetActiveScans(login, tserver); err != nil {
		return
	}
	return p.recvGetActiveScans()
}

func (p *AccumuloProxyClient) sendGetActiveScans(login []byte, tserver string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getActiveScans", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetActiveScansArgs{
		Login:   login,
		Tserver: tserver,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetActiveScans() (value []*ActiveScan, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getActiveScans" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getActiveScans failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getActiveScans failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error100 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error101 error
		error101, err = error100.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error101
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getActiveScans failed: invalid message type")
		return
	}
	result := AccumuloProxyGetActiveScansResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - Tserver
func (p *AccumuloProxyClient) GetActiveCompactions(login []byte, tserver string) (r []*ActiveCompaction, err error) {
	if err = p.sendGetActiveCompactions(login, tserver); err != nil {
		return
	}
	return p.recvGetActiveCompactions()
}

func (p *AccumuloProxyClient) sendGetActiveCompactions(login []byte, tserver string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getActiveCompactions", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetActiveCompactionsArgs{
		Login:   login,
		Tserver: tserver,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetActiveCompactions() (value []*ActiveCompaction, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getActiveCompactions" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getActiveCompactions failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getActiveCompactions failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error102 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error103 error
		error103, err = error102.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error103
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getActiveCompactions failed: invalid message type")
		return
	}
	result := AccumuloProxyGetActiveCompactionsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
func (p *AccumuloProxyClient) GetSiteConfiguration(login []byte) (r map[string]string, err error) {
	if err = p.sendGetSiteConfiguration(login); err != nil {
		return
	}
	return p.recvGetSiteConfiguration()
}

func (p *AccumuloProxyClient) sendGetSiteConfiguration(login []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSiteConfiguration", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetSiteConfigurationArgs{
		Login: login,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetSiteConfiguration() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSiteConfiguration" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSiteConfiguration failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSiteConfiguration failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error104 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error105 error
		error105, err = error104.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error105
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSiteConfiguration failed: invalid message type")
		return
	}
	result := AccumuloProxyGetSiteConfigurationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
func (p *AccumuloProxyClient) GetSystemConfiguration(login []byte) (r map[string]string, err error) {
	if err = p.sendGetSystemConfiguration(login); err != nil {
		return
	}
	return p.recvGetSystemConfiguration()
}

func (p *AccumuloProxyClient) sendGetSystemConfiguration(login []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getSystemConfiguration", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetSystemConfigurationArgs{
		Login: login,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetSystemConfiguration() (value map[string]string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getSystemConfiguration" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getSystemConfiguration failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getSystemConfiguration failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error106 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error107 error
		error107, err = error106.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error107
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getSystemConfiguration failed: invalid message type")
		return
	}
	result := AccumuloProxyGetSystemConfigurationResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
func (p *AccumuloProxyClient) GetTabletServers(login []byte) (r []string, err error) {
	if err = p.sendGetTabletServers(login); err != nil {
		return
	}
	return p.recvGetTabletServers()
}

func (p *AccumuloProxyClient) sendGetTabletServers(login []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getTabletServers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetTabletServersArgs{
		Login: login,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetTabletServers() (value []string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getTabletServers" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getTabletServers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getTabletServers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error108 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error109 error
		error109, err = error108.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error109
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getTabletServers failed: invalid message type")
		return
	}
	result := AccumuloProxyGetTabletServersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - Property
func (p *AccumuloProxyClient) RemoveProperty(login []byte, property string) (err error) {
	if err = p.sendRemoveProperty(login, property); err != nil {
		return
	}
	return p.recvRemoveProperty()
}

func (p *AccumuloProxyClient) sendRemoveProperty(login []byte, property string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("removeProperty", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRemovePropertyArgs{
		Login:    login,
		Property: property,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRemoveProperty() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "removeProperty" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "removeProperty failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "removeProperty failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error110 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error111 error
		error111, err = error110.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error111
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "removeProperty failed: invalid message type")
		return
	}
	result := AccumuloProxyRemovePropertyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - Property
//  - Value
func (p *AccumuloProxyClient) SetProperty(login []byte, property string, value string) (err error) {
	if err = p.sendSetProperty(login, property, value); err != nil {
		return
	}
	return p.recvSetProperty()
}

func (p *AccumuloProxyClient) sendSetProperty(login []byte, property string, value string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("setProperty", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxySetPropertyArgs{
		Login:    login,
		Property: property,
		Value:    value,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvSetProperty() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "setProperty" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "setProperty failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "setProperty failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error112 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error113 error
		error113, err = error112.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error113
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "setProperty failed: invalid message type")
		return
	}
	result := AccumuloProxySetPropertyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - ClassName
//  - AsTypeName
func (p *AccumuloProxyClient) TestClassLoad(login []byte, className string, asTypeName string) (r bool, err error) {
	if err = p.sendTestClassLoad(login, className, asTypeName); err != nil {
		return
	}
	return p.recvTestClassLoad()
}

func (p *AccumuloProxyClient) sendTestClassLoad(login []byte, className string, asTypeName string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("testClassLoad", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyTestClassLoadArgs{
		Login:      login,
		ClassName:  className,
		AsTypeName: asTypeName,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvTestClassLoad() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "testClassLoad" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "testClassLoad failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "testClassLoad failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error114 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error115 error
		error115, err = error114.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error115
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "testClassLoad failed: invalid message type")
		return
	}
	result := AccumuloProxyTestClassLoadResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - User
//  - Properties
func (p *AccumuloProxyClient) AuthenticateUser(login []byte, user string, properties map[string]string) (r bool, err error) {
	if err = p.sendAuthenticateUser(login, user, properties); err != nil {
		return
	}
	return p.recvAuthenticateUser()
}

func (p *AccumuloProxyClient) sendAuthenticateUser(login []byte, user string, properties map[string]string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("authenticateUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyAuthenticateUserArgs{
		Login:      login,
		User:       user,
		Properties: properties,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvAuthenticateUser() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "authenticateUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "authenticateUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "authenticateUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error116 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error117 error
		error117, err = error116.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error117
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "authenticateUser failed: invalid message type")
		return
	}
	result := AccumuloProxyAuthenticateUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - User
//  - Authorizations
func (p *AccumuloProxyClient) ChangeUserAuthorizations(login []byte, user string, authorizations map[string]bool) (err error) {
	if err = p.sendChangeUserAuthorizations(login, user, authorizations); err != nil {
		return
	}
	return p.recvChangeUserAuthorizations()
}

func (p *AccumuloProxyClient) sendChangeUserAuthorizations(login []byte, user string, authorizations map[string]bool) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeUserAuthorizations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyChangeUserAuthorizationsArgs{
		Login:          login,
		User:           user,
		Authorizations: authorizations,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvChangeUserAuthorizations() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "changeUserAuthorizations" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeUserAuthorizations failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeUserAuthorizations failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error118 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error119 error
		error119, err = error118.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error119
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeUserAuthorizations failed: invalid message type")
		return
	}
	result := AccumuloProxyChangeUserAuthorizationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
//  - Password
func (p *AccumuloProxyClient) ChangeLocalUserPassword(login []byte, user string, password []byte) (err error) {
	if err = p.sendChangeLocalUserPassword(login, user, password); err != nil {
		return
	}
	return p.recvChangeLocalUserPassword()
}

func (p *AccumuloProxyClient) sendChangeLocalUserPassword(login []byte, user string, password []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("changeLocalUserPassword", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyChangeLocalUserPasswordArgs{
		Login:    login,
		User:     user,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvChangeLocalUserPassword() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "changeLocalUserPassword" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "changeLocalUserPassword failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "changeLocalUserPassword failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error120 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error121 error
		error121, err = error120.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error121
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "changeLocalUserPassword failed: invalid message type")
		return
	}
	result := AccumuloProxyChangeLocalUserPasswordResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
//  - Password
func (p *AccumuloProxyClient) CreateLocalUser(login []byte, user string, password []byte) (err error) {
	if err = p.sendCreateLocalUser(login, user, password); err != nil {
		return
	}
	return p.recvCreateLocalUser()
}

func (p *AccumuloProxyClient) sendCreateLocalUser(login []byte, user string, password []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createLocalUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCreateLocalUserArgs{
		Login:    login,
		User:     user,
		Password: password,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCreateLocalUser() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createLocalUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createLocalUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createLocalUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error122 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error123 error
		error123, err = error122.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error123
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createLocalUser failed: invalid message type")
		return
	}
	result := AccumuloProxyCreateLocalUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
func (p *AccumuloProxyClient) DropLocalUser(login []byte, user string) (err error) {
	if err = p.sendDropLocalUser(login, user); err != nil {
		return
	}
	return p.recvDropLocalUser()
}

func (p *AccumuloProxyClient) sendDropLocalUser(login []byte, user string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("dropLocalUser", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyDropLocalUserArgs{
		Login: login,
		User:  user,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvDropLocalUser() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "dropLocalUser" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "dropLocalUser failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "dropLocalUser failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error124 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error125 error
		error125, err = error124.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error125
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "dropLocalUser failed: invalid message type")
		return
	}
	result := AccumuloProxyDropLocalUserResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
func (p *AccumuloProxyClient) GetUserAuthorizations(login []byte, user string) (r [][]byte, err error) {
	if err = p.sendGetUserAuthorizations(login, user); err != nil {
		return
	}
	return p.recvGetUserAuthorizations()
}

func (p *AccumuloProxyClient) sendGetUserAuthorizations(login []byte, user string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getUserAuthorizations", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetUserAuthorizationsArgs{
		Login: login,
		User:  user,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetUserAuthorizations() (value [][]byte, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getUserAuthorizations" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getUserAuthorizations failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getUserAuthorizations failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error126 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error127 error
		error127, err = error126.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error127
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getUserAuthorizations failed: invalid message type")
		return
	}
	result := AccumuloProxyGetUserAuthorizationsResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - User
//  - Perm
func (p *AccumuloProxyClient) GrantSystemPermission(login []byte, user string, perm SystemPermission) (err error) {
	if err = p.sendGrantSystemPermission(login, user, perm); err != nil {
		return
	}
	return p.recvGrantSystemPermission()
}

func (p *AccumuloProxyClient) sendGrantSystemPermission(login []byte, user string, perm SystemPermission) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grantSystemPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGrantSystemPermissionArgs{
		Login: login,
		User:  user,
		Perm:  perm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGrantSystemPermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "grantSystemPermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "grantSystemPermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grantSystemPermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error128 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error129 error
		error129, err = error128.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error129
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grantSystemPermission failed: invalid message type")
		return
	}
	result := AccumuloProxyGrantSystemPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
//  - Table
//  - Perm
func (p *AccumuloProxyClient) GrantTablePermission(login []byte, user string, table string, perm TablePermission) (err error) {
	if err = p.sendGrantTablePermission(login, user, table, perm); err != nil {
		return
	}
	return p.recvGrantTablePermission()
}

func (p *AccumuloProxyClient) sendGrantTablePermission(login []byte, user string, table string, perm TablePermission) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("grantTablePermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGrantTablePermissionArgs{
		Login: login,
		User:  user,
		Table: table,
		Perm:  perm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGrantTablePermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "grantTablePermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "grantTablePermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "grantTablePermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error130 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error131 error
		error131, err = error130.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error131
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "grantTablePermission failed: invalid message type")
		return
	}
	result := AccumuloProxyGrantTablePermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
//  - Perm
func (p *AccumuloProxyClient) HasSystemPermission(login []byte, user string, perm SystemPermission) (r bool, err error) {
	if err = p.sendHasSystemPermission(login, user, perm); err != nil {
		return
	}
	return p.recvHasSystemPermission()
}

func (p *AccumuloProxyClient) sendHasSystemPermission(login []byte, user string, perm SystemPermission) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hasSystemPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyHasSystemPermissionArgs{
		Login: login,
		User:  user,
		Perm:  perm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvHasSystemPermission() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hasSystemPermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "hasSystemPermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "hasSystemPermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error132 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error133 error
		error133, err = error132.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error133
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hasSystemPermission failed: invalid message type")
		return
	}
	result := AccumuloProxyHasSystemPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - User
//  - Table
//  - Perm
func (p *AccumuloProxyClient) HasTablePermission(login []byte, user string, table string, perm TablePermission) (r bool, err error) {
	if err = p.sendHasTablePermission(login, user, table, perm); err != nil {
		return
	}
	return p.recvHasTablePermission()
}

func (p *AccumuloProxyClient) sendHasTablePermission(login []byte, user string, table string, perm TablePermission) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hasTablePermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyHasTablePermissionArgs{
		Login: login,
		User:  user,
		Table: table,
		Perm:  perm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvHasTablePermission() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hasTablePermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "hasTablePermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "hasTablePermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error134 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error135 error
		error135, err = error134.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error135
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hasTablePermission failed: invalid message type")
		return
	}
	result := AccumuloProxyHasTablePermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
func (p *AccumuloProxyClient) ListLocalUsers(login []byte) (r map[string]bool, err error) {
	if err = p.sendListLocalUsers(login); err != nil {
		return
	}
	return p.recvListLocalUsers()
}

func (p *AccumuloProxyClient) sendListLocalUsers(login []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("listLocalUsers", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyListLocalUsersArgs{
		Login: login,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvListLocalUsers() (value map[string]bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "listLocalUsers" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "listLocalUsers failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "listLocalUsers failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error136 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error137 error
		error137, err = error136.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error137
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "listLocalUsers failed: invalid message type")
		return
	}
	result := AccumuloProxyListLocalUsersResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - User
//  - Perm
func (p *AccumuloProxyClient) RevokeSystemPermission(login []byte, user string, perm SystemPermission) (err error) {
	if err = p.sendRevokeSystemPermission(login, user, perm); err != nil {
		return
	}
	return p.recvRevokeSystemPermission()
}

func (p *AccumuloProxyClient) sendRevokeSystemPermission(login []byte, user string, perm SystemPermission) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revokeSystemPermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRevokeSystemPermissionArgs{
		Login: login,
		User:  user,
		Perm:  perm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRevokeSystemPermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "revokeSystemPermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "revokeSystemPermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokeSystemPermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error138 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error139 error
		error139, err = error138.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error139
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeSystemPermission failed: invalid message type")
		return
	}
	result := AccumuloProxyRevokeSystemPermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - User
//  - Table
//  - Perm
func (p *AccumuloProxyClient) RevokeTablePermission(login []byte, user string, table string, perm TablePermission) (err error) {
	if err = p.sendRevokeTablePermission(login, user, table, perm); err != nil {
		return
	}
	return p.recvRevokeTablePermission()
}

func (p *AccumuloProxyClient) sendRevokeTablePermission(login []byte, user string, table string, perm TablePermission) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("revokeTablePermission", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyRevokeTablePermissionArgs{
		Login: login,
		User:  user,
		Table: table,
		Perm:  perm,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvRevokeTablePermission() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "revokeTablePermission" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "revokeTablePermission failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "revokeTablePermission failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error140 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error141 error
		error141, err = error140.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error141
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "revokeTablePermission failed: invalid message type")
		return
	}
	result := AccumuloProxyRevokeTablePermissionResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Options
func (p *AccumuloProxyClient) CreateBatchScanner(login []byte, tableName string, options *BatchScanOptions) (r string, err error) {
	if err = p.sendCreateBatchScanner(login, tableName, options); err != nil {
		return
	}
	return p.recvCreateBatchScanner()
}

func (p *AccumuloProxyClient) sendCreateBatchScanner(login []byte, tableName string, options *BatchScanOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createBatchScanner", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCreateBatchScannerArgs{
		Login:     login,
		TableName: tableName,
		Options:   options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCreateBatchScanner() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createBatchScanner" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createBatchScanner failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createBatchScanner failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error142 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error143 error
		error143, err = error142.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error143
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createBatchScanner failed: invalid message type")
		return
	}
	result := AccumuloProxyCreateBatchScannerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Options
func (p *AccumuloProxyClient) CreateScanner(login []byte, tableName string, options *ScanOptions) (r string, err error) {
	if err = p.sendCreateScanner(login, tableName, options); err != nil {
		return
	}
	return p.recvCreateScanner()
}

func (p *AccumuloProxyClient) sendCreateScanner(login []byte, tableName string, options *ScanOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createScanner", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCreateScannerArgs{
		Login:     login,
		TableName: tableName,
		Options:   options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCreateScanner() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createScanner" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createScanner failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createScanner failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error144 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error145 error
		error145, err = error144.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error145
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createScanner failed: invalid message type")
		return
	}
	result := AccumuloProxyCreateScannerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Scanner
func (p *AccumuloProxyClient) HasNext(scanner string) (r bool, err error) {
	if err = p.sendHasNext(scanner); err != nil {
		return
	}
	return p.recvHasNext()
}

func (p *AccumuloProxyClient) sendHasNext(scanner string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("hasNext", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyHasNextArgs{
		Scanner: scanner,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvHasNext() (value bool, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "hasNext" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "hasNext failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "hasNext failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error146 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error147 error
		error147, err = error146.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error147
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "hasNext failed: invalid message type")
		return
	}
	result := AccumuloProxyHasNextResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Scanner
func (p *AccumuloProxyClient) NextEntry(scanner string) (r *KeyValueAndPeek, err error) {
	if err = p.sendNextEntry(scanner); err != nil {
		return
	}
	return p.recvNextEntry()
}

func (p *AccumuloProxyClient) sendNextEntry(scanner string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("nextEntry", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyNextEntryArgs{
		Scanner: scanner,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvNextEntry() (value *KeyValueAndPeek, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "nextEntry" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "nextEntry failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "nextEntry failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error148 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error149 error
		error149, err = error148.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error149
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "nextEntry failed: invalid message type")
		return
	}
	result := AccumuloProxyNextEntryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Scanner
//  - K
func (p *AccumuloProxyClient) NextK(scanner string, k int32) (r *ScanResult_, err error) {
	if err = p.sendNextK(scanner, k); err != nil {
		return
	}
	return p.recvNextK()
}

func (p *AccumuloProxyClient) sendNextK(scanner string, k int32) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("nextK", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyNextKArgs{
		Scanner: scanner,
		K:       k,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvNextK() (value *ScanResult_, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "nextK" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "nextK failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "nextK failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error150 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error151 error
		error151, err = error150.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error151
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "nextK failed: invalid message type")
		return
	}
	result := AccumuloProxyNextKResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Scanner
func (p *AccumuloProxyClient) CloseScanner(scanner string) (err error) {
	if err = p.sendCloseScanner(scanner); err != nil {
		return
	}
	return p.recvCloseScanner()
}

func (p *AccumuloProxyClient) sendCloseScanner(scanner string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("closeScanner", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCloseScannerArgs{
		Scanner: scanner,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCloseScanner() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "closeScanner" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "closeScanner failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "closeScanner failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error152 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error153 error
		error153, err = error152.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error153
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "closeScanner failed: invalid message type")
		return
	}
	result := AccumuloProxyCloseScannerResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Cells
func (p *AccumuloProxyClient) UpdateAndFlush(login []byte, tableName string, cells map[string][]*ColumnUpdate) (err error) {
	if err = p.sendUpdateAndFlush(login, tableName, cells); err != nil {
		return
	}
	return p.recvUpdateAndFlush()
}

func (p *AccumuloProxyClient) sendUpdateAndFlush(login []byte, tableName string, cells map[string][]*ColumnUpdate) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateAndFlush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyUpdateAndFlushArgs{
		Login:     login,
		TableName: tableName,
		Cells:     cells,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvUpdateAndFlush() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateAndFlush" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateAndFlush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateAndFlush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error154 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error155 error
		error155, err = error154.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error155
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateAndFlush failed: invalid message type")
		return
	}
	result := AccumuloProxyUpdateAndFlushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Outch1 != nil {
		err = result.Outch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	} else if result.Ouch4 != nil {
		err = result.Ouch4
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Opts
func (p *AccumuloProxyClient) CreateWriter(login []byte, tableName string, opts *WriterOptions) (r string, err error) {
	if err = p.sendCreateWriter(login, tableName, opts); err != nil {
		return
	}
	return p.recvCreateWriter()
}

func (p *AccumuloProxyClient) sendCreateWriter(login []byte, tableName string, opts *WriterOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createWriter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCreateWriterArgs{
		Login:     login,
		TableName: tableName,
		Opts:      opts,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCreateWriter() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createWriter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createWriter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createWriter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error156 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error157 error
		error157, err = error156.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error157
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createWriter failed: invalid message type")
		return
	}
	result := AccumuloProxyCreateWriterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Outch1 != nil {
		err = result.Outch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Writer
//  - Cells
func (p *AccumuloProxyClient) Update(writer string, cells map[string][]*ColumnUpdate) (err error) {
	if err = p.sendUpdate(writer, cells); err != nil {
		return
	}
	return
}

func (p *AccumuloProxyClient) sendUpdate(writer string, cells map[string][]*ColumnUpdate) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("update", thrift.ONEWAY, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyUpdateArgs{
		Writer: writer,
		Cells:  cells,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

// Parameters:
//  - Writer
func (p *AccumuloProxyClient) Flush(writer string) (err error) {
	if err = p.sendFlush(writer); err != nil {
		return
	}
	return p.recvFlush()
}

func (p *AccumuloProxyClient) sendFlush(writer string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("flush", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyFlushArgs{
		Writer: writer,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvFlush() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "flush" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "flush failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "flush failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error158 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error159 error
		error159, err = error158.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error159
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "flush failed: invalid message type")
		return
	}
	result := AccumuloProxyFlushResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Writer
func (p *AccumuloProxyClient) CloseWriter(writer string) (err error) {
	if err = p.sendCloseWriter(writer); err != nil {
		return
	}
	return p.recvCloseWriter()
}

func (p *AccumuloProxyClient) sendCloseWriter(writer string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("closeWriter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCloseWriterArgs{
		Writer: writer,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCloseWriter() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "closeWriter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "closeWriter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "closeWriter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error160 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error161 error
		error161, err = error160.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error161
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "closeWriter failed: invalid message type")
		return
	}
	result := AccumuloProxyCloseWriterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	}
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Row
//  - Updates
func (p *AccumuloProxyClient) UpdateRowConditionally(login []byte, tableName string, row []byte, updates *ConditionalUpdates) (r ConditionalStatus, err error) {
	if err = p.sendUpdateRowConditionally(login, tableName, row, updates); err != nil {
		return
	}
	return p.recvUpdateRowConditionally()
}

func (p *AccumuloProxyClient) sendUpdateRowConditionally(login []byte, tableName string, row []byte, updates *ConditionalUpdates) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateRowConditionally", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyUpdateRowConditionallyArgs{
		Login:     login,
		TableName: tableName,
		Row:       row,
		Updates:   updates,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvUpdateRowConditionally() (value ConditionalStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateRowConditionally" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateRowConditionally failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateRowConditionally failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error162 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error163 error
		error163, err = error162.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error163
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateRowConditionally failed: invalid message type")
		return
	}
	result := AccumuloProxyUpdateRowConditionallyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Login
//  - TableName
//  - Options
func (p *AccumuloProxyClient) CreateConditionalWriter(login []byte, tableName string, options *ConditionalWriterOptions) (r string, err error) {
	if err = p.sendCreateConditionalWriter(login, tableName, options); err != nil {
		return
	}
	return p.recvCreateConditionalWriter()
}

func (p *AccumuloProxyClient) sendCreateConditionalWriter(login []byte, tableName string, options *ConditionalWriterOptions) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("createConditionalWriter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCreateConditionalWriterArgs{
		Login:     login,
		TableName: tableName,
		Options:   options,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCreateConditionalWriter() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "createConditionalWriter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "createConditionalWriter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "createConditionalWriter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error164 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error165 error
		error165, err = error164.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error165
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "createConditionalWriter failed: invalid message type")
		return
	}
	result := AccumuloProxyCreateConditionalWriterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ConditionalWriter
//  - Updates
func (p *AccumuloProxyClient) UpdateRowsConditionally(conditionalWriter string, updates map[string]*ConditionalUpdates) (r map[string]ConditionalStatus, err error) {
	if err = p.sendUpdateRowsConditionally(conditionalWriter, updates); err != nil {
		return
	}
	return p.recvUpdateRowsConditionally()
}

func (p *AccumuloProxyClient) sendUpdateRowsConditionally(conditionalWriter string, updates map[string]*ConditionalUpdates) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("updateRowsConditionally", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyUpdateRowsConditionallyArgs{
		ConditionalWriter: conditionalWriter,
		Updates:           updates,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvUpdateRowsConditionally() (value map[string]ConditionalStatus, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "updateRowsConditionally" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "updateRowsConditionally failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "updateRowsConditionally failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error166 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error167 error
		error167, err = error166.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error167
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "updateRowsConditionally failed: invalid message type")
		return
	}
	result := AccumuloProxyUpdateRowsConditionallyResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	if result.Ouch1 != nil {
		err = result.Ouch1
		return
	} else if result.Ouch2 != nil {
		err = result.Ouch2
		return
	} else if result.Ouch3 != nil {
		err = result.Ouch3
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ConditionalWriter
func (p *AccumuloProxyClient) CloseConditionalWriter(conditionalWriter string) (err error) {
	if err = p.sendCloseConditionalWriter(conditionalWriter); err != nil {
		return
	}
	return p.recvCloseConditionalWriter()
}

func (p *AccumuloProxyClient) sendCloseConditionalWriter(conditionalWriter string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("closeConditionalWriter", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyCloseConditionalWriterArgs{
		ConditionalWriter: conditionalWriter,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvCloseConditionalWriter() (err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "closeConditionalWriter" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "closeConditionalWriter failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "closeConditionalWriter failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error168 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error169 error
		error169, err = error168.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error169
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "closeConditionalWriter failed: invalid message type")
		return
	}
	result := AccumuloProxyCloseConditionalWriterResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	return
}

// Parameters:
//  - Row
func (p *AccumuloProxyClient) GetRowRange(row []byte) (r *Range, err error) {
	if err = p.sendGetRowRange(row); err != nil {
		return
	}
	return p.recvGetRowRange()
}

func (p *AccumuloProxyClient) sendGetRowRange(row []byte) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getRowRange", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetRowRangeArgs{
		Row: row,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetRowRange() (value *Range, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getRowRange" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getRowRange failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getRowRange failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error170 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error171 error
		error171, err = error170.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error171
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getRowRange failed: invalid message type")
		return
	}
	result := AccumuloProxyGetRowRangeResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - Key
//  - Part
func (p *AccumuloProxyClient) GetFollowing(key *Key, part PartialKey) (r *Key, err error) {
	if err = p.sendGetFollowing(key, part); err != nil {
		return
	}
	return p.recvGetFollowing()
}

func (p *AccumuloProxyClient) sendGetFollowing(key *Key, part PartialKey) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("getFollowing", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := AccumuloProxyGetFollowingArgs{
		Key:  key,
		Part: part,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *AccumuloProxyClient) recvGetFollowing() (value *Key, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "getFollowing" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "getFollowing failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "getFollowing failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error172 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error173 error
		error173, err = error172.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error173
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "getFollowing failed: invalid message type")
		return
	}
	result := AccumuloProxyGetFollowingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type AccumuloProxyProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      AccumuloProxy
}

func (p *AccumuloProxyProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *AccumuloProxyProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *AccumuloProxyProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewAccumuloProxyProcessor(handler AccumuloProxy) *AccumuloProxyProcessor {

	self174 := &AccumuloProxyProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self174.processorMap["login"] = &accumuloProxyProcessorLogin{handler: handler}
	self174.processorMap["addConstraint"] = &accumuloProxyProcessorAddConstraint{handler: handler}
	self174.processorMap["addSplits"] = &accumuloProxyProcessorAddSplits{handler: handler}
	self174.processorMap["attachIterator"] = &accumuloProxyProcessorAttachIterator{handler: handler}
	self174.processorMap["checkIteratorConflicts"] = &accumuloProxyProcessorCheckIteratorConflicts{handler: handler}
	self174.processorMap["clearLocatorCache"] = &accumuloProxyProcessorClearLocatorCache{handler: handler}
	self174.processorMap["cloneTable"] = &accumuloProxyProcessorCloneTable{handler: handler}
	self174.processorMap["compactTable"] = &accumuloProxyProcessorCompactTable{handler: handler}
	self174.processorMap["cancelCompaction"] = &accumuloProxyProcessorCancelCompaction{handler: handler}
	self174.processorMap["createTable"] = &accumuloProxyProcessorCreateTable{handler: handler}
	self174.processorMap["deleteTable"] = &accumuloProxyProcessorDeleteTable{handler: handler}
	self174.processorMap["deleteRows"] = &accumuloProxyProcessorDeleteRows{handler: handler}
	self174.processorMap["exportTable"] = &accumuloProxyProcessorExportTable{handler: handler}
	self174.processorMap["flushTable"] = &accumuloProxyProcessorFlushTable{handler: handler}
	self174.processorMap["getDiskUsage"] = &accumuloProxyProcessorGetDiskUsage{handler: handler}
	self174.processorMap["getLocalityGroups"] = &accumuloProxyProcessorGetLocalityGroups{handler: handler}
	self174.processorMap["getIteratorSetting"] = &accumuloProxyProcessorGetIteratorSetting{handler: handler}
	self174.processorMap["getMaxRow"] = &accumuloProxyProcessorGetMaxRow{handler: handler}
	self174.processorMap["getTableProperties"] = &accumuloProxyProcessorGetTableProperties{handler: handler}
	self174.processorMap["importDirectory"] = &accumuloProxyProcessorImportDirectory{handler: handler}
	self174.processorMap["importTable"] = &accumuloProxyProcessorImportTable{handler: handler}
	self174.processorMap["listSplits"] = &accumuloProxyProcessorListSplits{handler: handler}
	self174.processorMap["listTables"] = &accumuloProxyProcessorListTables{handler: handler}
	self174.processorMap["listIterators"] = &accumuloProxyProcessorListIterators{handler: handler}
	self174.processorMap["listConstraints"] = &accumuloProxyProcessorListConstraints{handler: handler}
	self174.processorMap["mergeTablets"] = &accumuloProxyProcessorMergeTablets{handler: handler}
	self174.processorMap["offlineTable"] = &accumuloProxyProcessorOfflineTable{handler: handler}
	self174.processorMap["onlineTable"] = &accumuloProxyProcessorOnlineTable{handler: handler}
	self174.processorMap["removeConstraint"] = &accumuloProxyProcessorRemoveConstraint{handler: handler}
	self174.processorMap["removeIterator"] = &accumuloProxyProcessorRemoveIterator{handler: handler}
	self174.processorMap["removeTableProperty"] = &accumuloProxyProcessorRemoveTableProperty{handler: handler}
	self174.processorMap["renameTable"] = &accumuloProxyProcessorRenameTable{handler: handler}
	self174.processorMap["setLocalityGroups"] = &accumuloProxyProcessorSetLocalityGroups{handler: handler}
	self174.processorMap["setTableProperty"] = &accumuloProxyProcessorSetTableProperty{handler: handler}
	self174.processorMap["splitRangeByTablets"] = &accumuloProxyProcessorSplitRangeByTablets{handler: handler}
	self174.processorMap["tableExists"] = &accumuloProxyProcessorTableExists{handler: handler}
	self174.processorMap["tableIdMap"] = &accumuloProxyProcessorTableIdMap{handler: handler}
	self174.processorMap["testTableClassLoad"] = &accumuloProxyProcessorTestTableClassLoad{handler: handler}
	self174.processorMap["pingTabletServer"] = &accumuloProxyProcessorPingTabletServer{handler: handler}
	self174.processorMap["getActiveScans"] = &accumuloProxyProcessorGetActiveScans{handler: handler}
	self174.processorMap["getActiveCompactions"] = &accumuloProxyProcessorGetActiveCompactions{handler: handler}
	self174.processorMap["getSiteConfiguration"] = &accumuloProxyProcessorGetSiteConfiguration{handler: handler}
	self174.processorMap["getSystemConfiguration"] = &accumuloProxyProcessorGetSystemConfiguration{handler: handler}
	self174.processorMap["getTabletServers"] = &accumuloProxyProcessorGetTabletServers{handler: handler}
	self174.processorMap["removeProperty"] = &accumuloProxyProcessorRemoveProperty{handler: handler}
	self174.processorMap["setProperty"] = &accumuloProxyProcessorSetProperty{handler: handler}
	self174.processorMap["testClassLoad"] = &accumuloProxyProcessorTestClassLoad{handler: handler}
	self174.processorMap["authenticateUser"] = &accumuloProxyProcessorAuthenticateUser{handler: handler}
	self174.processorMap["changeUserAuthorizations"] = &accumuloProxyProcessorChangeUserAuthorizations{handler: handler}
	self174.processorMap["changeLocalUserPassword"] = &accumuloProxyProcessorChangeLocalUserPassword{handler: handler}
	self174.processorMap["createLocalUser"] = &accumuloProxyProcessorCreateLocalUser{handler: handler}
	self174.processorMap["dropLocalUser"] = &accumuloProxyProcessorDropLocalUser{handler: handler}
	self174.processorMap["getUserAuthorizations"] = &accumuloProxyProcessorGetUserAuthorizations{handler: handler}
	self174.processorMap["grantSystemPermission"] = &accumuloProxyProcessorGrantSystemPermission{handler: handler}
	self174.processorMap["grantTablePermission"] = &accumuloProxyProcessorGrantTablePermission{handler: handler}
	self174.processorMap["hasSystemPermission"] = &accumuloProxyProcessorHasSystemPermission{handler: handler}
	self174.processorMap["hasTablePermission"] = &accumuloProxyProcessorHasTablePermission{handler: handler}
	self174.processorMap["listLocalUsers"] = &accumuloProxyProcessorListLocalUsers{handler: handler}
	self174.processorMap["revokeSystemPermission"] = &accumuloProxyProcessorRevokeSystemPermission{handler: handler}
	self174.processorMap["revokeTablePermission"] = &accumuloProxyProcessorRevokeTablePermission{handler: handler}
	self174.processorMap["createBatchScanner"] = &accumuloProxyProcessorCreateBatchScanner{handler: handler}
	self174.processorMap["createScanner"] = &accumuloProxyProcessorCreateScanner{handler: handler}
	self174.processorMap["hasNext"] = &accumuloProxyProcessorHasNext{handler: handler}
	self174.processorMap["nextEntry"] = &accumuloProxyProcessorNextEntry{handler: handler}
	self174.processorMap["nextK"] = &accumuloProxyProcessorNextK{handler: handler}
	self174.processorMap["closeScanner"] = &accumuloProxyProcessorCloseScanner{handler: handler}
	self174.processorMap["updateAndFlush"] = &accumuloProxyProcessorUpdateAndFlush{handler: handler}
	self174.processorMap["createWriter"] = &accumuloProxyProcessorCreateWriter{handler: handler}
	self174.processorMap["update"] = &accumuloProxyProcessorUpdate{handler: handler}
	self174.processorMap["flush"] = &accumuloProxyProcessorFlush{handler: handler}
	self174.processorMap["closeWriter"] = &accumuloProxyProcessorCloseWriter{handler: handler}
	self174.processorMap["updateRowConditionally"] = &accumuloProxyProcessorUpdateRowConditionally{handler: handler}
	self174.processorMap["createConditionalWriter"] = &accumuloProxyProcessorCreateConditionalWriter{handler: handler}
	self174.processorMap["updateRowsConditionally"] = &accumuloProxyProcessorUpdateRowsConditionally{handler: handler}
	self174.processorMap["closeConditionalWriter"] = &accumuloProxyProcessorCloseConditionalWriter{handler: handler}
	self174.processorMap["getRowRange"] = &accumuloProxyProcessorGetRowRange{handler: handler}
	self174.processorMap["getFollowing"] = &accumuloProxyProcessorGetFollowing{handler: handler}
	return self174
}

func (p *AccumuloProxyProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x175 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x175.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x175

}

type accumuloProxyProcessorLogin struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorLogin) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyLoginArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyLoginResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.Login(args.Principal, args.LoginProperties); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing login: "+err2.Error())
			oprot.WriteMessageBegin("login", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("login", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorAddConstraint struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorAddConstraint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyAddConstraintArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addConstraint", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyAddConstraintResult{}
	var retval int32
	var err2 error
	if retval, err2 = p.handler.AddConstraint(args.Login, args.TableName, args.ConstraintClassName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addConstraint: "+err2.Error())
			oprot.WriteMessageBegin("addConstraint", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("addConstraint", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorAddSplits struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorAddSplits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyAddSplitsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("addSplits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyAddSplitsResult{}
	var err2 error
	if err2 = p.handler.AddSplits(args.Login, args.TableName, args.Splits); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addSplits: "+err2.Error())
			oprot.WriteMessageBegin("addSplits", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("addSplits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorAttachIterator struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorAttachIterator) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyAttachIteratorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("attachIterator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyAttachIteratorResult{}
	var err2 error
	if err2 = p.handler.AttachIterator(args.Login, args.TableName, args.Setting, args.Scopes); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloSecurityException:
			result.Ouch1 = v
		case *AccumuloException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing attachIterator: "+err2.Error())
			oprot.WriteMessageBegin("attachIterator", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("attachIterator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCheckIteratorConflicts struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCheckIteratorConflicts) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCheckIteratorConflictsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("checkIteratorConflicts", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCheckIteratorConflictsResult{}
	var err2 error
	if err2 = p.handler.CheckIteratorConflicts(args.Login, args.TableName, args.Setting, args.Scopes); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloSecurityException:
			result.Ouch1 = v
		case *AccumuloException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkIteratorConflicts: "+err2.Error())
			oprot.WriteMessageBegin("checkIteratorConflicts", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("checkIteratorConflicts", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorClearLocatorCache struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorClearLocatorCache) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyClearLocatorCacheArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("clearLocatorCache", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyClearLocatorCacheResult{}
	var err2 error
	if err2 = p.handler.ClearLocatorCache(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *TableNotFoundException:
			result.Ouch1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing clearLocatorCache: "+err2.Error())
			oprot.WriteMessageBegin("clearLocatorCache", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("clearLocatorCache", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCloneTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCloneTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCloneTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cloneTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCloneTableResult{}
	var err2 error
	if err2 = p.handler.CloneTable(args.Login, args.TableName, args.NewTableName_, args.Flush, args.PropertiesToSet, args.PropertiesToExclude); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		case *TableExistsException:
			result.Ouch4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cloneTable: "+err2.Error())
			oprot.WriteMessageBegin("cloneTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cloneTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCompactTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCompactTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCompactTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("compactTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCompactTableResult{}
	var err2 error
	if err2 = p.handler.CompactTable(args.Login, args.TableName, args.StartRow, args.EndRow, args.Iterators, args.Flush, args.Wait, args.CompactionStrategy); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloSecurityException:
			result.Ouch1 = v
		case *TableNotFoundException:
			result.Ouch2 = v
		case *AccumuloException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compactTable: "+err2.Error())
			oprot.WriteMessageBegin("compactTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("compactTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCancelCompaction struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCancelCompaction) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCancelCompactionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("cancelCompaction", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCancelCompactionResult{}
	var err2 error
	if err2 = p.handler.CancelCompaction(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloSecurityException:
			result.Ouch1 = v
		case *TableNotFoundException:
			result.Ouch2 = v
		case *AccumuloException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing cancelCompaction: "+err2.Error())
			oprot.WriteMessageBegin("cancelCompaction", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("cancelCompaction", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCreateTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCreateTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCreateTableResult{}
	var err2 error
	if err2 = p.handler.CreateTable(args.Login, args.TableName, args.VersioningIter, args.Type); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableExistsException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: "+err2.Error())
			oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorDeleteTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorDeleteTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyDeleteTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyDeleteTableResult{}
	var err2 error
	if err2 = p.handler.DeleteTable(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTable: "+err2.Error())
			oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorDeleteRows struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorDeleteRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyDeleteRowsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyDeleteRowsResult{}
	var err2 error
	if err2 = p.handler.DeleteRows(args.Login, args.TableName, args.StartRow, args.EndRow); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteRows: "+err2.Error())
			oprot.WriteMessageBegin("deleteRows", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("deleteRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorExportTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorExportTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyExportTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("exportTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyExportTableResult{}
	var err2 error
	if err2 = p.handler.ExportTable(args.Login, args.TableName, args.ExportDir); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exportTable: "+err2.Error())
			oprot.WriteMessageBegin("exportTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("exportTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorFlushTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorFlushTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyFlushTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("flushTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyFlushTableResult{}
	var err2 error
	if err2 = p.handler.FlushTable(args.Login, args.TableName, args.StartRow, args.EndRow, args.Wait); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing flushTable: "+err2.Error())
			oprot.WriteMessageBegin("flushTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("flushTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetDiskUsage struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetDiskUsage) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetDiskUsageArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getDiskUsage", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetDiskUsageResult{}
	var retval []*DiskUsage
	var err2 error
	if retval, err2 = p.handler.GetDiskUsage(args.Login, args.Tables); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getDiskUsage: "+err2.Error())
			oprot.WriteMessageBegin("getDiskUsage", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getDiskUsage", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetLocalityGroups struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetLocalityGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetLocalityGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getLocalityGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetLocalityGroupsResult{}
	var retval map[string]map[string]bool
	var err2 error
	if retval, err2 = p.handler.GetLocalityGroups(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getLocalityGroups: "+err2.Error())
			oprot.WriteMessageBegin("getLocalityGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getLocalityGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetIteratorSetting struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetIteratorSetting) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetIteratorSettingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getIteratorSetting", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetIteratorSettingResult{}
	var retval *IteratorSetting
	var err2 error
	if retval, err2 = p.handler.GetIteratorSetting(args.Login, args.TableName, args.IteratorName, args.Scope); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getIteratorSetting: "+err2.Error())
			oprot.WriteMessageBegin("getIteratorSetting", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getIteratorSetting", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetMaxRow struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetMaxRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetMaxRowArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getMaxRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetMaxRowResult{}
	var retval []byte
	var err2 error
	if retval, err2 = p.handler.GetMaxRow(args.Login, args.TableName, args.Auths, args.StartRow, args.StartInclusive, args.EndRow, args.EndInclusive); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getMaxRow: "+err2.Error())
			oprot.WriteMessageBegin("getMaxRow", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getMaxRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetTableProperties struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetTableProperties) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetTablePropertiesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableProperties", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetTablePropertiesResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetTableProperties(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableProperties: "+err2.Error())
			oprot.WriteMessageBegin("getTableProperties", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTableProperties", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorImportDirectory struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorImportDirectory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyImportDirectoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("importDirectory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyImportDirectoryResult{}
	var err2 error
	if err2 = p.handler.ImportDirectory(args.Login, args.TableName, args.ImportDir, args.FailureDir, args.SetTime); err2 != nil {
		switch v := err2.(type) {
		case *TableNotFoundException:
			result.Ouch1 = v
		case *AccumuloException:
			result.Ouch3 = v
		case *AccumuloSecurityException:
			result.Ouch4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing importDirectory: "+err2.Error())
			oprot.WriteMessageBegin("importDirectory", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("importDirectory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorImportTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorImportTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyImportTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("importTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyImportTableResult{}
	var err2 error
	if err2 = p.handler.ImportTable(args.Login, args.TableName, args.ImportDir); err2 != nil {
		switch v := err2.(type) {
		case *TableExistsException:
			result.Ouch1 = v
		case *AccumuloException:
			result.Ouch2 = v
		case *AccumuloSecurityException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing importTable: "+err2.Error())
			oprot.WriteMessageBegin("importTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("importTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorListSplits struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorListSplits) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyListSplitsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listSplits", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyListSplitsResult{}
	var retval [][]byte
	var err2 error
	if retval, err2 = p.handler.ListSplits(args.Login, args.TableName, args.MaxSplits); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listSplits: "+err2.Error())
			oprot.WriteMessageBegin("listSplits", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listSplits", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorListTables struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorListTables) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyListTablesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyListTablesResult{}
	var retval map[string]bool
	var err2 error
	if retval, err2 = p.handler.ListTables(args.Login); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listTables: "+err2.Error())
		oprot.WriteMessageBegin("listTables", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listTables", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorListIterators struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorListIterators) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyListIteratorsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listIterators", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyListIteratorsResult{}
	var retval map[string]map[IteratorScope]bool
	var err2 error
	if retval, err2 = p.handler.ListIterators(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listIterators: "+err2.Error())
			oprot.WriteMessageBegin("listIterators", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listIterators", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorListConstraints struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorListConstraints) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyListConstraintsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listConstraints", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyListConstraintsResult{}
	var retval map[string]int32
	var err2 error
	if retval, err2 = p.handler.ListConstraints(args.Login, args.TableName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listConstraints: "+err2.Error())
			oprot.WriteMessageBegin("listConstraints", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listConstraints", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorMergeTablets struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorMergeTablets) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyMergeTabletsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mergeTablets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyMergeTabletsResult{}
	var err2 error
	if err2 = p.handler.MergeTablets(args.Login, args.TableName, args.StartRow, args.EndRow); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mergeTablets: "+err2.Error())
			oprot.WriteMessageBegin("mergeTablets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("mergeTablets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorOfflineTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorOfflineTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyOfflineTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("offlineTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyOfflineTableResult{}
	var err2 error
	if err2 = p.handler.OfflineTable(args.Login, args.TableName, args.Wait); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing offlineTable: "+err2.Error())
			oprot.WriteMessageBegin("offlineTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("offlineTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorOnlineTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorOnlineTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyOnlineTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("onlineTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyOnlineTableResult{}
	var err2 error
	if err2 = p.handler.OnlineTable(args.Login, args.TableName, args.Wait); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onlineTable: "+err2.Error())
			oprot.WriteMessageBegin("onlineTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("onlineTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRemoveConstraint struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRemoveConstraint) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRemoveConstraintArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeConstraint", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRemoveConstraintResult{}
	var err2 error
	if err2 = p.handler.RemoveConstraint(args.Login, args.TableName, args.Constraint); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeConstraint: "+err2.Error())
			oprot.WriteMessageBegin("removeConstraint", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeConstraint", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRemoveIterator struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRemoveIterator) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRemoveIteratorArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeIterator", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRemoveIteratorResult{}
	var err2 error
	if err2 = p.handler.RemoveIterator(args.Login, args.TableName, args.IterName, args.Scopes); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeIterator: "+err2.Error())
			oprot.WriteMessageBegin("removeIterator", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeIterator", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRemoveTableProperty struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRemoveTableProperty) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRemoveTablePropertyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeTableProperty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRemoveTablePropertyResult{}
	var err2 error
	if err2 = p.handler.RemoveTableProperty(args.Login, args.TableName, args.Property); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeTableProperty: "+err2.Error())
			oprot.WriteMessageBegin("removeTableProperty", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeTableProperty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRenameTable struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRenameTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRenameTableArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("renameTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRenameTableResult{}
	var err2 error
	if err2 = p.handler.RenameTable(args.Login, args.OldTableName, args.NewTableName_); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		case *TableExistsException:
			result.Ouch4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing renameTable: "+err2.Error())
			oprot.WriteMessageBegin("renameTable", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("renameTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorSetLocalityGroups struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorSetLocalityGroups) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxySetLocalityGroupsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setLocalityGroups", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxySetLocalityGroupsResult{}
	var err2 error
	if err2 = p.handler.SetLocalityGroups(args.Login, args.TableName, args.Groups); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setLocalityGroups: "+err2.Error())
			oprot.WriteMessageBegin("setLocalityGroups", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setLocalityGroups", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorSetTableProperty struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorSetTableProperty) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxySetTablePropertyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setTableProperty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxySetTablePropertyResult{}
	var err2 error
	if err2 = p.handler.SetTableProperty(args.Login, args.TableName, args.Property, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setTableProperty: "+err2.Error())
			oprot.WriteMessageBegin("setTableProperty", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setTableProperty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorSplitRangeByTablets struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorSplitRangeByTablets) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxySplitRangeByTabletsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("splitRangeByTablets", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxySplitRangeByTabletsResult{}
	var retval map[*Range]bool
	var err2 error
	if retval, err2 = p.handler.SplitRangeByTablets(args.Login, args.TableName, args.Range, args.MaxSplits); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitRangeByTablets: "+err2.Error())
			oprot.WriteMessageBegin("splitRangeByTablets", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("splitRangeByTablets", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorTableExists struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorTableExists) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyTableExistsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("tableExists", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyTableExistsResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TableExists(args.Login, args.TableName); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tableExists: "+err2.Error())
		oprot.WriteMessageBegin("tableExists", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("tableExists", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorTableIdMap struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorTableIdMap) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyTableIdMapArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("tableIdMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyTableIdMapResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.TableIdMap(args.Login); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing tableIdMap: "+err2.Error())
		oprot.WriteMessageBegin("tableIdMap", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("tableIdMap", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorTestTableClassLoad struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorTestTableClassLoad) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyTestTableClassLoadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testTableClassLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyTestTableClassLoadResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TestTableClassLoad(args.Login, args.TableName, args.ClassName, args.AsTypeName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testTableClassLoad: "+err2.Error())
			oprot.WriteMessageBegin("testTableClassLoad", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testTableClassLoad", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorPingTabletServer struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorPingTabletServer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyPingTabletServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("pingTabletServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyPingTabletServerResult{}
	var err2 error
	if err2 = p.handler.PingTabletServer(args.Login, args.Tserver); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pingTabletServer: "+err2.Error())
			oprot.WriteMessageBegin("pingTabletServer", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("pingTabletServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetActiveScans struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetActiveScans) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetActiveScansArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getActiveScans", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetActiveScansResult{}
	var retval []*ActiveScan
	var err2 error
	if retval, err2 = p.handler.GetActiveScans(args.Login, args.Tserver); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActiveScans: "+err2.Error())
			oprot.WriteMessageBegin("getActiveScans", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getActiveScans", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetActiveCompactions struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetActiveCompactions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetActiveCompactionsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getActiveCompactions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetActiveCompactionsResult{}
	var retval []*ActiveCompaction
	var err2 error
	if retval, err2 = p.handler.GetActiveCompactions(args.Login, args.Tserver); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getActiveCompactions: "+err2.Error())
			oprot.WriteMessageBegin("getActiveCompactions", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getActiveCompactions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetSiteConfiguration struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetSiteConfiguration) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetSiteConfigurationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSiteConfiguration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetSiteConfigurationResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetSiteConfiguration(args.Login); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSiteConfiguration: "+err2.Error())
			oprot.WriteMessageBegin("getSiteConfiguration", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSiteConfiguration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetSystemConfiguration struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetSystemConfiguration) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetSystemConfigurationArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getSystemConfiguration", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetSystemConfigurationResult{}
	var retval map[string]string
	var err2 error
	if retval, err2 = p.handler.GetSystemConfiguration(args.Login); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getSystemConfiguration: "+err2.Error())
			oprot.WriteMessageBegin("getSystemConfiguration", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getSystemConfiguration", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetTabletServers struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetTabletServers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetTabletServersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTabletServers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetTabletServersResult{}
	var retval []string
	var err2 error
	if retval, err2 = p.handler.GetTabletServers(args.Login); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTabletServers: "+err2.Error())
		oprot.WriteMessageBegin("getTabletServers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getTabletServers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRemoveProperty struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRemoveProperty) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRemovePropertyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("removeProperty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRemovePropertyResult{}
	var err2 error
	if err2 = p.handler.RemoveProperty(args.Login, args.Property); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeProperty: "+err2.Error())
			oprot.WriteMessageBegin("removeProperty", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("removeProperty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorSetProperty struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorSetProperty) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxySetPropertyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("setProperty", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxySetPropertyResult{}
	var err2 error
	if err2 = p.handler.SetProperty(args.Login, args.Property, args.Value); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing setProperty: "+err2.Error())
			oprot.WriteMessageBegin("setProperty", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("setProperty", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorTestClassLoad struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorTestClassLoad) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyTestClassLoadArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testClassLoad", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyTestClassLoadResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.TestClassLoad(args.Login, args.ClassName, args.AsTypeName); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testClassLoad: "+err2.Error())
			oprot.WriteMessageBegin("testClassLoad", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("testClassLoad", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorAuthenticateUser struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorAuthenticateUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyAuthenticateUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("authenticateUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyAuthenticateUserResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.AuthenticateUser(args.Login, args.User, args.Properties); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing authenticateUser: "+err2.Error())
			oprot.WriteMessageBegin("authenticateUser", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("authenticateUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorChangeUserAuthorizations struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorChangeUserAuthorizations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyChangeUserAuthorizationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeUserAuthorizations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyChangeUserAuthorizationsResult{}
	var err2 error
	if err2 = p.handler.ChangeUserAuthorizations(args.Login, args.User, args.Authorizations); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeUserAuthorizations: "+err2.Error())
			oprot.WriteMessageBegin("changeUserAuthorizations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("changeUserAuthorizations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorChangeLocalUserPassword struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorChangeLocalUserPassword) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyChangeLocalUserPasswordArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("changeLocalUserPassword", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyChangeLocalUserPasswordResult{}
	var err2 error
	if err2 = p.handler.ChangeLocalUserPassword(args.Login, args.User, args.Password); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing changeLocalUserPassword: "+err2.Error())
			oprot.WriteMessageBegin("changeLocalUserPassword", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("changeLocalUserPassword", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCreateLocalUser struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCreateLocalUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCreateLocalUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createLocalUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCreateLocalUserResult{}
	var err2 error
	if err2 = p.handler.CreateLocalUser(args.Login, args.User, args.Password); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createLocalUser: "+err2.Error())
			oprot.WriteMessageBegin("createLocalUser", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("createLocalUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorDropLocalUser struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorDropLocalUser) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyDropLocalUserArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("dropLocalUser", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyDropLocalUserResult{}
	var err2 error
	if err2 = p.handler.DropLocalUser(args.Login, args.User); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing dropLocalUser: "+err2.Error())
			oprot.WriteMessageBegin("dropLocalUser", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("dropLocalUser", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetUserAuthorizations struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetUserAuthorizations) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetUserAuthorizationsArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getUserAuthorizations", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetUserAuthorizationsResult{}
	var retval [][]byte
	var err2 error
	if retval, err2 = p.handler.GetUserAuthorizations(args.Login, args.User); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUserAuthorizations: "+err2.Error())
			oprot.WriteMessageBegin("getUserAuthorizations", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getUserAuthorizations", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGrantSystemPermission struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGrantSystemPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGrantSystemPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grantSystemPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGrantSystemPermissionResult{}
	var err2 error
	if err2 = p.handler.GrantSystemPermission(args.Login, args.User, args.Perm); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantSystemPermission: "+err2.Error())
			oprot.WriteMessageBegin("grantSystemPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("grantSystemPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGrantTablePermission struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGrantTablePermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGrantTablePermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("grantTablePermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGrantTablePermissionResult{}
	var err2 error
	if err2 = p.handler.GrantTablePermission(args.Login, args.User, args.Table, args.Perm); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing grantTablePermission: "+err2.Error())
			oprot.WriteMessageBegin("grantTablePermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("grantTablePermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorHasSystemPermission struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorHasSystemPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyHasSystemPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hasSystemPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyHasSystemPermissionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.HasSystemPermission(args.Login, args.User, args.Perm); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hasSystemPermission: "+err2.Error())
			oprot.WriteMessageBegin("hasSystemPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("hasSystemPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorHasTablePermission struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorHasTablePermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyHasTablePermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hasTablePermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyHasTablePermissionResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.HasTablePermission(args.Login, args.User, args.Table, args.Perm); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hasTablePermission: "+err2.Error())
			oprot.WriteMessageBegin("hasTablePermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("hasTablePermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorListLocalUsers struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorListLocalUsers) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyListLocalUsersArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("listLocalUsers", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyListLocalUsersResult{}
	var retval map[string]bool
	var err2 error
	if retval, err2 = p.handler.ListLocalUsers(args.Login); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing listLocalUsers: "+err2.Error())
			oprot.WriteMessageBegin("listLocalUsers", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("listLocalUsers", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRevokeSystemPermission struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRevokeSystemPermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRevokeSystemPermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revokeSystemPermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRevokeSystemPermissionResult{}
	var err2 error
	if err2 = p.handler.RevokeSystemPermission(args.Login, args.User, args.Perm); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeSystemPermission: "+err2.Error())
			oprot.WriteMessageBegin("revokeSystemPermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("revokeSystemPermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorRevokeTablePermission struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorRevokeTablePermission) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyRevokeTablePermissionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("revokeTablePermission", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyRevokeTablePermissionResult{}
	var err2 error
	if err2 = p.handler.RevokeTablePermission(args.Login, args.User, args.Table, args.Perm); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing revokeTablePermission: "+err2.Error())
			oprot.WriteMessageBegin("revokeTablePermission", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("revokeTablePermission", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCreateBatchScanner struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCreateBatchScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCreateBatchScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createBatchScanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCreateBatchScannerResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateBatchScanner(args.Login, args.TableName, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createBatchScanner: "+err2.Error())
			oprot.WriteMessageBegin("createBatchScanner", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createBatchScanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCreateScanner struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCreateScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCreateScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createScanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCreateScannerResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateScanner(args.Login, args.TableName, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createScanner: "+err2.Error())
			oprot.WriteMessageBegin("createScanner", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createScanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorHasNext struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorHasNext) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyHasNextArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("hasNext", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyHasNextResult{}
	var retval bool
	var err2 error
	if retval, err2 = p.handler.HasNext(args.Scanner); err2 != nil {
		switch v := err2.(type) {
		case *UnknownScanner:
			result.Ouch1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing hasNext: "+err2.Error())
			oprot.WriteMessageBegin("hasNext", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("hasNext", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorNextEntry struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorNextEntry) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyNextEntryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("nextEntry", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyNextEntryResult{}
	var retval *KeyValueAndPeek
	var err2 error
	if retval, err2 = p.handler.NextEntry(args.Scanner); err2 != nil {
		switch v := err2.(type) {
		case *NoMoreEntriesException:
			result.Ouch1 = v
		case *UnknownScanner:
			result.Ouch2 = v
		case *AccumuloSecurityException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing nextEntry: "+err2.Error())
			oprot.WriteMessageBegin("nextEntry", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("nextEntry", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorNextK struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorNextK) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyNextKArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("nextK", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyNextKResult{}
	var retval *ScanResult_
	var err2 error
	if retval, err2 = p.handler.NextK(args.Scanner, args.K); err2 != nil {
		switch v := err2.(type) {
		case *NoMoreEntriesException:
			result.Ouch1 = v
		case *UnknownScanner:
			result.Ouch2 = v
		case *AccumuloSecurityException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing nextK: "+err2.Error())
			oprot.WriteMessageBegin("nextK", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("nextK", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCloseScanner struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCloseScanner) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCloseScannerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeScanner", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCloseScannerResult{}
	var err2 error
	if err2 = p.handler.CloseScanner(args.Scanner); err2 != nil {
		switch v := err2.(type) {
		case *UnknownScanner:
			result.Ouch1 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeScanner: "+err2.Error())
			oprot.WriteMessageBegin("closeScanner", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("closeScanner", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorUpdateAndFlush struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorUpdateAndFlush) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyUpdateAndFlushArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateAndFlush", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyUpdateAndFlushResult{}
	var err2 error
	if err2 = p.handler.UpdateAndFlush(args.Login, args.TableName, args.Cells); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Outch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		case *MutationsRejectedException:
			result.Ouch4 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateAndFlush: "+err2.Error())
			oprot.WriteMessageBegin("updateAndFlush", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("updateAndFlush", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCreateWriter struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCreateWriter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCreateWriterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createWriter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCreateWriterResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateWriter(args.Login, args.TableName, args.Opts); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Outch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createWriter: "+err2.Error())
			oprot.WriteMessageBegin("createWriter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createWriter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorUpdate struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorUpdate) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyUpdateArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.Update(args.Writer, args.Cells); err2 != nil {
		return true, err2
	}
	return true, nil
}

type accumuloProxyProcessorFlush struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorFlush) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyFlushArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("flush", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyFlushResult{}
	var err2 error
	if err2 = p.handler.Flush(args.Writer); err2 != nil {
		switch v := err2.(type) {
		case *UnknownWriter:
			result.Ouch1 = v
		case *MutationsRejectedException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing flush: "+err2.Error())
			oprot.WriteMessageBegin("flush", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("flush", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCloseWriter struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCloseWriter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCloseWriterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeWriter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCloseWriterResult{}
	var err2 error
	if err2 = p.handler.CloseWriter(args.Writer); err2 != nil {
		switch v := err2.(type) {
		case *UnknownWriter:
			result.Ouch1 = v
		case *MutationsRejectedException:
			result.Ouch2 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeWriter: "+err2.Error())
			oprot.WriteMessageBegin("closeWriter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	}
	if err2 = oprot.WriteMessageBegin("closeWriter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorUpdateRowConditionally struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorUpdateRowConditionally) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyUpdateRowConditionallyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateRowConditionally", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyUpdateRowConditionallyResult{}
	var retval ConditionalStatus
	var err2 error
	if retval, err2 = p.handler.UpdateRowConditionally(args.Login, args.TableName, args.Row, args.Updates); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRowConditionally: "+err2.Error())
			oprot.WriteMessageBegin("updateRowConditionally", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("updateRowConditionally", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCreateConditionalWriter struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCreateConditionalWriter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCreateConditionalWriterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createConditionalWriter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCreateConditionalWriterResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.CreateConditionalWriter(args.Login, args.TableName, args.Options); err2 != nil {
		switch v := err2.(type) {
		case *AccumuloException:
			result.Ouch1 = v
		case *AccumuloSecurityException:
			result.Ouch2 = v
		case *TableNotFoundException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createConditionalWriter: "+err2.Error())
			oprot.WriteMessageBegin("createConditionalWriter", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("createConditionalWriter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorUpdateRowsConditionally struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorUpdateRowsConditionally) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyUpdateRowsConditionallyArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("updateRowsConditionally", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyUpdateRowsConditionallyResult{}
	var retval map[string]ConditionalStatus
	var err2 error
	if retval, err2 = p.handler.UpdateRowsConditionally(args.ConditionalWriter, args.Updates); err2 != nil {
		switch v := err2.(type) {
		case *UnknownWriter:
			result.Ouch1 = v
		case *AccumuloException:
			result.Ouch2 = v
		case *AccumuloSecurityException:
			result.Ouch3 = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing updateRowsConditionally: "+err2.Error())
			oprot.WriteMessageBegin("updateRowsConditionally", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush()
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("updateRowsConditionally", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorCloseConditionalWriter struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorCloseConditionalWriter) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyCloseConditionalWriterArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("closeConditionalWriter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyCloseConditionalWriterResult{}
	var err2 error
	if err2 = p.handler.CloseConditionalWriter(args.ConditionalWriter); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing closeConditionalWriter: "+err2.Error())
		oprot.WriteMessageBegin("closeConditionalWriter", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("closeConditionalWriter", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetRowRange struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetRowRange) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetRowRangeArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetRowRangeResult{}
	var retval *Range
	var err2 error
	if retval, err2 = p.handler.GetRowRange(args.Row); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowRange: "+err2.Error())
		oprot.WriteMessageBegin("getRowRange", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getRowRange", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type accumuloProxyProcessorGetFollowing struct {
	handler AccumuloProxy
}

func (p *accumuloProxyProcessorGetFollowing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := AccumuloProxyGetFollowingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getFollowing", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := AccumuloProxyGetFollowingResult{}
	var retval *Key
	var err2 error
	if retval, err2 = p.handler.GetFollowing(args.Key, args.Part); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getFollowing: "+err2.Error())
		oprot.WriteMessageBegin("getFollowing", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("getFollowing", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Principal
//  - LoginProperties
type AccumuloProxyLoginArgs struct {
	Principal       string            `thrift:"principal,1" json:"principal"`
	LoginProperties map[string]string `thrift:"loginProperties,2" json:"loginProperties"`
}

func NewAccumuloProxyLoginArgs() *AccumuloProxyLoginArgs {
	return &AccumuloProxyLoginArgs{}
}

func (p *AccumuloProxyLoginArgs) GetPrincipal() string {
	return p.Principal
}

func (p *AccumuloProxyLoginArgs) GetLoginProperties() map[string]string {
	return p.LoginProperties
}
func (p *AccumuloProxyLoginArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyLoginArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Principal = v
	}
	return nil
}

func (p *AccumuloProxyLoginArgs) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.LoginProperties = tMap
	for i := 0; i < size; i++ {
		var _key176 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key176 = v
		}
		var _val177 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val177 = v
		}
		p.LoginProperties[_key176] = _val177
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyLoginArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("login_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyLoginArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("principal", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:principal: ", p), err)
	}
	if err := oprot.WriteString(string(p.Principal)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.principal (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:principal: ", p), err)
	}
	return err
}

func (p *AccumuloProxyLoginArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("loginProperties", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:loginProperties: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.LoginProperties)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.LoginProperties {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:loginProperties: ", p), err)
	}
	return err
}

func (p *AccumuloProxyLoginArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyLoginArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch2
type AccumuloProxyLoginResult struct {
	Success []byte                     `thrift:"success,0" json:"success,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,1" json:"ouch2,omitempty"`
}

func NewAccumuloProxyLoginResult() *AccumuloProxyLoginResult {
	return &AccumuloProxyLoginResult{}
}

var AccumuloProxyLoginResult_Success_DEFAULT []byte

func (p *AccumuloProxyLoginResult) GetSuccess() []byte {
	return p.Success
}

var AccumuloProxyLoginResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyLoginResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyLoginResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyLoginResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyLoginResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyLoginResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyLoginResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *AccumuloProxyLoginResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyLoginResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("login_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyLoginResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyLoginResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyLoginResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyLoginResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - ConstraintClassName
type AccumuloProxyAddConstraintArgs struct {
	Login               []byte `thrift:"login,1" json:"login"`
	TableName           string `thrift:"tableName,2" json:"tableName"`
	ConstraintClassName string `thrift:"constraintClassName,3" json:"constraintClassName"`
}

func NewAccumuloProxyAddConstraintArgs() *AccumuloProxyAddConstraintArgs {
	return &AccumuloProxyAddConstraintArgs{}
}

func (p *AccumuloProxyAddConstraintArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyAddConstraintArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyAddConstraintArgs) GetConstraintClassName() string {
	return p.ConstraintClassName
}
func (p *AccumuloProxyAddConstraintArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyAddConstraintArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyAddConstraintArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ConstraintClassName = v
	}
	return nil
}

func (p *AccumuloProxyAddConstraintArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addConstraint_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAddConstraintArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAddConstraintArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("constraintClassName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:constraintClassName: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConstraintClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.constraintClassName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:constraintClassName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAddConstraintArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAddConstraintArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyAddConstraintResult struct {
	Success *int32                     `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyAddConstraintResult() *AccumuloProxyAddConstraintResult {
	return &AccumuloProxyAddConstraintResult{}
}

var AccumuloProxyAddConstraintResult_Success_DEFAULT int32

func (p *AccumuloProxyAddConstraintResult) GetSuccess() int32 {
	if !p.IsSetSuccess() {
		return AccumuloProxyAddConstraintResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyAddConstraintResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyAddConstraintResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyAddConstraintResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyAddConstraintResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyAddConstraintResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyAddConstraintResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyAddConstraintResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyAddConstraintResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyAddConstraintResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyAddConstraintResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyAddConstraintResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyAddConstraintResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyAddConstraintResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyAddConstraintResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyAddConstraintResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addConstraint_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAddConstraintResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddConstraintResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddConstraintResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddConstraintResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddConstraintResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAddConstraintResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Splits
type AccumuloProxyAddSplitsArgs struct {
	Login     []byte          `thrift:"login,1" json:"login"`
	TableName string          `thrift:"tableName,2" json:"tableName"`
	Splits    map[string]bool `thrift:"splits,3" json:"splits"`
}

func NewAccumuloProxyAddSplitsArgs() *AccumuloProxyAddSplitsArgs {
	return &AccumuloProxyAddSplitsArgs{}
}

func (p *AccumuloProxyAddSplitsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyAddSplitsArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyAddSplitsArgs) GetSplits() map[string]bool {
	return p.Splits
}
func (p *AccumuloProxyAddSplitsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyAddSplitsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyAddSplitsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Splits = tSet
	for i := 0; i < size; i++ {
		var _elem178 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem178 = v
		}
		p.Splits[string(_elem178)] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSplits_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAddSplitsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAddSplitsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("splits", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:splits: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Splits)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Splits {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:splits: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAddSplitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAddSplitsArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyAddSplitsResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyAddSplitsResult() *AccumuloProxyAddSplitsResult {
	return &AccumuloProxyAddSplitsResult{}
}

var AccumuloProxyAddSplitsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyAddSplitsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyAddSplitsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyAddSplitsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyAddSplitsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyAddSplitsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyAddSplitsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyAddSplitsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyAddSplitsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyAddSplitsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyAddSplitsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyAddSplitsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyAddSplitsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("addSplits_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAddSplitsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddSplitsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddSplitsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAddSplitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAddSplitsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Setting
//  - Scopes
type AccumuloProxyAttachIteratorArgs struct {
	Login     []byte                 `thrift:"login,1" json:"login"`
	TableName string                 `thrift:"tableName,2" json:"tableName"`
	Setting   *IteratorSetting       `thrift:"setting,3" json:"setting"`
	Scopes    map[IteratorScope]bool `thrift:"scopes,4" json:"scopes"`
}

func NewAccumuloProxyAttachIteratorArgs() *AccumuloProxyAttachIteratorArgs {
	return &AccumuloProxyAttachIteratorArgs{}
}

func (p *AccumuloProxyAttachIteratorArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyAttachIteratorArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxyAttachIteratorArgs_Setting_DEFAULT *IteratorSetting

func (p *AccumuloProxyAttachIteratorArgs) GetSetting() *IteratorSetting {
	if !p.IsSetSetting() {
		return AccumuloProxyAttachIteratorArgs_Setting_DEFAULT
	}
	return p.Setting
}

func (p *AccumuloProxyAttachIteratorArgs) GetScopes() map[IteratorScope]bool {
	return p.Scopes
}
func (p *AccumuloProxyAttachIteratorArgs) IsSetSetting() bool {
	return p.Setting != nil
}

func (p *AccumuloProxyAttachIteratorArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorArgs) readField3(iprot thrift.TProtocol) error {
	p.Setting = &IteratorSetting{}
	if err := p.Setting.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Setting), err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[IteratorScope]bool, size)
	p.Scopes = tSet
	for i := 0; i < size; i++ {
		var _elem179 IteratorScope
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := IteratorScope(v)
			_elem179 = temp
		}
		p.Scopes[_elem179] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("attachIterator_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAttachIteratorArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAttachIteratorArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setting", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:setting: ", p), err)
	}
	if err := p.Setting.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Setting), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:setting: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAttachIteratorArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scopes", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scopes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Scopes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Scopes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scopes: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAttachIteratorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAttachIteratorArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyAttachIteratorResult struct {
	Ouch1 *AccumuloSecurityException `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloException         `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyAttachIteratorResult() *AccumuloProxyAttachIteratorResult {
	return &AccumuloProxyAttachIteratorResult{}
}

var AccumuloProxyAttachIteratorResult_Ouch1_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyAttachIteratorResult) GetOuch1() *AccumuloSecurityException {
	if !p.IsSetOuch1() {
		return AccumuloProxyAttachIteratorResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyAttachIteratorResult_Ouch2_DEFAULT *AccumuloException

func (p *AccumuloProxyAttachIteratorResult) GetOuch2() *AccumuloException {
	if !p.IsSetOuch2() {
		return AccumuloProxyAttachIteratorResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyAttachIteratorResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyAttachIteratorResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyAttachIteratorResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyAttachIteratorResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyAttachIteratorResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyAttachIteratorResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyAttachIteratorResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloSecurityException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("attachIterator_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAttachIteratorResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAttachIteratorResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAttachIteratorResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAttachIteratorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAttachIteratorResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Setting
//  - Scopes
type AccumuloProxyCheckIteratorConflictsArgs struct {
	Login     []byte                 `thrift:"login,1" json:"login"`
	TableName string                 `thrift:"tableName,2" json:"tableName"`
	Setting   *IteratorSetting       `thrift:"setting,3" json:"setting"`
	Scopes    map[IteratorScope]bool `thrift:"scopes,4" json:"scopes"`
}

func NewAccumuloProxyCheckIteratorConflictsArgs() *AccumuloProxyCheckIteratorConflictsArgs {
	return &AccumuloProxyCheckIteratorConflictsArgs{}
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxyCheckIteratorConflictsArgs_Setting_DEFAULT *IteratorSetting

func (p *AccumuloProxyCheckIteratorConflictsArgs) GetSetting() *IteratorSetting {
	if !p.IsSetSetting() {
		return AccumuloProxyCheckIteratorConflictsArgs_Setting_DEFAULT
	}
	return p.Setting
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) GetScopes() map[IteratorScope]bool {
	return p.Scopes
}
func (p *AccumuloProxyCheckIteratorConflictsArgs) IsSetSetting() bool {
	return p.Setting != nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) readField3(iprot thrift.TProtocol) error {
	p.Setting = &IteratorSetting{}
	if err := p.Setting.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Setting), err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[IteratorScope]bool, size)
	p.Scopes = tSet
	for i := 0; i < size; i++ {
		var _elem180 IteratorScope
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := IteratorScope(v)
			_elem180 = temp
		}
		p.Scopes[_elem180] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkIteratorConflicts_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setting", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:setting: ", p), err)
	}
	if err := p.Setting.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Setting), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:setting: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scopes", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scopes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Scopes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Scopes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scopes: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCheckIteratorConflictsArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCheckIteratorConflictsResult struct {
	Ouch1 *AccumuloSecurityException `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloException         `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCheckIteratorConflictsResult() *AccumuloProxyCheckIteratorConflictsResult {
	return &AccumuloProxyCheckIteratorConflictsResult{}
}

var AccumuloProxyCheckIteratorConflictsResult_Ouch1_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCheckIteratorConflictsResult) GetOuch1() *AccumuloSecurityException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCheckIteratorConflictsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCheckIteratorConflictsResult_Ouch2_DEFAULT *AccumuloException

func (p *AccumuloProxyCheckIteratorConflictsResult) GetOuch2() *AccumuloException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCheckIteratorConflictsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCheckIteratorConflictsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCheckIteratorConflictsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCheckIteratorConflictsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCheckIteratorConflictsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloSecurityException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("checkIteratorConflicts_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCheckIteratorConflictsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCheckIteratorConflictsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCheckIteratorConflictsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyClearLocatorCacheArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyClearLocatorCacheArgs() *AccumuloProxyClearLocatorCacheArgs {
	return &AccumuloProxyClearLocatorCacheArgs{}
}

func (p *AccumuloProxyClearLocatorCacheArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyClearLocatorCacheArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyClearLocatorCacheArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearLocatorCache_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyClearLocatorCacheArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyClearLocatorCacheArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyClearLocatorCacheArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
type AccumuloProxyClearLocatorCacheResult struct {
	Ouch1 *TableNotFoundException `thrift:"ouch1,1" json:"ouch1,omitempty"`
}

func NewAccumuloProxyClearLocatorCacheResult() *AccumuloProxyClearLocatorCacheResult {
	return &AccumuloProxyClearLocatorCacheResult{}
}

var AccumuloProxyClearLocatorCacheResult_Ouch1_DEFAULT *TableNotFoundException

func (p *AccumuloProxyClearLocatorCacheResult) GetOuch1() *TableNotFoundException {
	if !p.IsSetOuch1() {
		return AccumuloProxyClearLocatorCacheResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}
func (p *AccumuloProxyClearLocatorCacheResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyClearLocatorCacheResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &TableNotFoundException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("clearLocatorCache_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyClearLocatorCacheResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyClearLocatorCacheResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyClearLocatorCacheResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - NewTableName_
//  - Flush
//  - PropertiesToSet
//  - PropertiesToExclude
type AccumuloProxyCloneTableArgs struct {
	Login               []byte            `thrift:"login,1" json:"login"`
	TableName           string            `thrift:"tableName,2" json:"tableName"`
	NewTableName_       string            `thrift:"newTableName,3" json:"newTableName"`
	Flush               bool              `thrift:"flush,4" json:"flush"`
	PropertiesToSet     map[string]string `thrift:"propertiesToSet,5" json:"propertiesToSet"`
	PropertiesToExclude map[string]bool   `thrift:"propertiesToExclude,6" json:"propertiesToExclude"`
}

func NewAccumuloProxyCloneTableArgs() *AccumuloProxyCloneTableArgs {
	return &AccumuloProxyCloneTableArgs{}
}

func (p *AccumuloProxyCloneTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCloneTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyCloneTableArgs) GetNewTableName_() string {
	return p.NewTableName_
}

func (p *AccumuloProxyCloneTableArgs) GetFlush() bool {
	return p.Flush
}

func (p *AccumuloProxyCloneTableArgs) GetPropertiesToSet() map[string]string {
	return p.PropertiesToSet
}

func (p *AccumuloProxyCloneTableArgs) GetPropertiesToExclude() map[string]bool {
	return p.PropertiesToExclude
}
func (p *AccumuloProxyCloneTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NewTableName_ = v
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Flush = v
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) readField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.PropertiesToSet = tMap
	for i := 0; i < size; i++ {
		var _key181 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key181 = v
		}
		var _val182 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val182 = v
		}
		p.PropertiesToSet[_key181] = _val182
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) readField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.PropertiesToExclude = tSet
	for i := 0; i < size; i++ {
		var _elem183 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem183 = v
		}
		p.PropertiesToExclude[_elem183] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cloneTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloneTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloneTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newTableName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newTableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewTableName_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newTableName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newTableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloneTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flush", thrift.BOOL, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:flush: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Flush)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flush (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:flush: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloneTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("propertiesToSet", thrift.MAP, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:propertiesToSet: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.PropertiesToSet)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.PropertiesToSet {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:propertiesToSet: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloneTableArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("propertiesToExclude", thrift.SET, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:propertiesToExclude: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.PropertiesToExclude)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.PropertiesToExclude {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:propertiesToExclude: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloneTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloneTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
//  - Ouch4
type AccumuloProxyCloneTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
	Ouch4 *TableExistsException      `thrift:"ouch4,4" json:"ouch4,omitempty"`
}

func NewAccumuloProxyCloneTableResult() *AccumuloProxyCloneTableResult {
	return &AccumuloProxyCloneTableResult{}
}

var AccumuloProxyCloneTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCloneTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCloneTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCloneTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCloneTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCloneTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCloneTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCloneTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCloneTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}

var AccumuloProxyCloneTableResult_Ouch4_DEFAULT *TableExistsException

func (p *AccumuloProxyCloneTableResult) GetOuch4() *TableExistsException {
	if !p.IsSetOuch4() {
		return AccumuloProxyCloneTableResult_Ouch4_DEFAULT
	}
	return p.Ouch4
}
func (p *AccumuloProxyCloneTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCloneTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCloneTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCloneTableResult) IsSetOuch4() bool {
	return p.Ouch4 != nil
}

func (p *AccumuloProxyCloneTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableResult) readField4(iprot thrift.TProtocol) error {
	p.Ouch4 = &TableExistsException{}
	if err := p.Ouch4.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch4), err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cloneTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloneTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloneTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloneTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloneTableResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch4() {
		if err := oprot.WriteFieldBegin("ouch4", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ouch4: ", p), err)
		}
		if err := p.Ouch4.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch4), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ouch4: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloneTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloneTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
//  - Iterators
//  - Flush
//  - Wait
//  - CompactionStrategy
type AccumuloProxyCompactTableArgs struct {
	Login              []byte                    `thrift:"login,1" json:"login"`
	TableName          string                    `thrift:"tableName,2" json:"tableName"`
	StartRow           []byte                    `thrift:"startRow,3" json:"startRow"`
	EndRow             []byte                    `thrift:"endRow,4" json:"endRow"`
	Iterators          []*IteratorSetting        `thrift:"iterators,5" json:"iterators"`
	Flush              bool                      `thrift:"flush,6" json:"flush"`
	Wait               bool                      `thrift:"wait,7" json:"wait"`
	CompactionStrategy *CompactionStrategyConfig `thrift:"compactionStrategy,8" json:"compactionStrategy"`
}

func NewAccumuloProxyCompactTableArgs() *AccumuloProxyCompactTableArgs {
	return &AccumuloProxyCompactTableArgs{}
}

func (p *AccumuloProxyCompactTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCompactTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyCompactTableArgs) GetStartRow() []byte {
	return p.StartRow
}

func (p *AccumuloProxyCompactTableArgs) GetEndRow() []byte {
	return p.EndRow
}

func (p *AccumuloProxyCompactTableArgs) GetIterators() []*IteratorSetting {
	return p.Iterators
}

func (p *AccumuloProxyCompactTableArgs) GetFlush() bool {
	return p.Flush
}

func (p *AccumuloProxyCompactTableArgs) GetWait() bool {
	return p.Wait
}

var AccumuloProxyCompactTableArgs_CompactionStrategy_DEFAULT *CompactionStrategyConfig

func (p *AccumuloProxyCompactTableArgs) GetCompactionStrategy() *CompactionStrategyConfig {
	if !p.IsSetCompactionStrategy() {
		return AccumuloProxyCompactTableArgs_CompactionStrategy_DEFAULT
	}
	return p.CompactionStrategy
}
func (p *AccumuloProxyCompactTableArgs) IsSetCompactionStrategy() bool {
	return p.CompactionStrategy != nil
}

func (p *AccumuloProxyCompactTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField5(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*IteratorSetting, 0, size)
	p.Iterators = tSlice
	for i := 0; i < size; i++ {
		_elem184 := &IteratorSetting{}
		if err := _elem184.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem184), err)
		}
		p.Iterators = append(p.Iterators, _elem184)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Flush = v
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Wait = v
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) readField8(iprot thrift.TProtocol) error {
	p.CompactionStrategy = &CompactionStrategyConfig{}
	if err := p.CompactionStrategy.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CompactionStrategy), err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("compactTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endRow", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endRow (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iterators", thrift.LIST, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:iterators: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Iterators)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Iterators {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:iterators: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("flush", thrift.BOOL, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:flush: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Flush)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.flush (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:flush: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("wait", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:wait: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Wait)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wait (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:wait: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compactionStrategy", thrift.STRUCT, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:compactionStrategy: ", p), err)
	}
	if err := p.CompactionStrategy.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CompactionStrategy), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:compactionStrategy: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCompactTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCompactTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCompactTableResult struct {
	Ouch1 *AccumuloSecurityException `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *TableNotFoundException    `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *AccumuloException         `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCompactTableResult() *AccumuloProxyCompactTableResult {
	return &AccumuloProxyCompactTableResult{}
}

var AccumuloProxyCompactTableResult_Ouch1_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCompactTableResult) GetOuch1() *AccumuloSecurityException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCompactTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCompactTableResult_Ouch2_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCompactTableResult) GetOuch2() *TableNotFoundException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCompactTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCompactTableResult_Ouch3_DEFAULT *AccumuloException

func (p *AccumuloProxyCompactTableResult) GetOuch3() *AccumuloException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCompactTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCompactTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCompactTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCompactTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCompactTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloSecurityException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &TableNotFoundException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("compactTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCompactTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCompactTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCompactTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCompactTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCompactTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyCancelCompactionArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyCancelCompactionArgs() *AccumuloProxyCancelCompactionArgs {
	return &AccumuloProxyCancelCompactionArgs{}
}

func (p *AccumuloProxyCancelCompactionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCancelCompactionArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyCancelCompactionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelCompaction_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCancelCompactionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCancelCompactionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCancelCompactionArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCancelCompactionResult struct {
	Ouch1 *AccumuloSecurityException `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *TableNotFoundException    `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *AccumuloException         `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCancelCompactionResult() *AccumuloProxyCancelCompactionResult {
	return &AccumuloProxyCancelCompactionResult{}
}

var AccumuloProxyCancelCompactionResult_Ouch1_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCancelCompactionResult) GetOuch1() *AccumuloSecurityException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCancelCompactionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCancelCompactionResult_Ouch2_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCancelCompactionResult) GetOuch2() *TableNotFoundException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCancelCompactionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCancelCompactionResult_Ouch3_DEFAULT *AccumuloException

func (p *AccumuloProxyCancelCompactionResult) GetOuch3() *AccumuloException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCancelCompactionResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCancelCompactionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCancelCompactionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCancelCompactionResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCancelCompactionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloSecurityException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &TableNotFoundException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("cancelCompaction_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCancelCompactionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCancelCompactionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCancelCompactionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCancelCompactionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCancelCompactionResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - VersioningIter
//  - Type
type AccumuloProxyCreateTableArgs struct {
	Login          []byte   `thrift:"login,1" json:"login"`
	TableName      string   `thrift:"tableName,2" json:"tableName"`
	VersioningIter bool     `thrift:"versioningIter,3" json:"versioningIter"`
	Type           TimeType `thrift:"type,4" json:"type"`
}

func NewAccumuloProxyCreateTableArgs() *AccumuloProxyCreateTableArgs {
	return &AccumuloProxyCreateTableArgs{}
}

func (p *AccumuloProxyCreateTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCreateTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyCreateTableArgs) GetVersioningIter() bool {
	return p.VersioningIter
}

func (p *AccumuloProxyCreateTableArgs) GetType() TimeType {
	return p.Type
}
func (p *AccumuloProxyCreateTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCreateTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCreateTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.VersioningIter = v
	}
	return nil
}

func (p *AccumuloProxyCreateTableArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TimeType(v)
		p.Type = temp
	}
	return nil
}

func (p *AccumuloProxyCreateTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("versioningIter", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:versioningIter: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.VersioningIter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.versioningIter (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:versioningIter: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("type", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:type: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Type)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.type (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:type: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCreateTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableExistsException      `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCreateTableResult() *AccumuloProxyCreateTableResult {
	return &AccumuloProxyCreateTableResult{}
}

var AccumuloProxyCreateTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCreateTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCreateTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCreateTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCreateTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCreateTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCreateTableResult_Ouch3_DEFAULT *TableExistsException

func (p *AccumuloProxyCreateTableResult) GetOuch3() *TableExistsException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCreateTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCreateTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCreateTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCreateTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCreateTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableExistsException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyDeleteTableArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyDeleteTableArgs() *AccumuloProxyDeleteTableArgs {
	return &AccumuloProxyDeleteTableArgs{}
}

func (p *AccumuloProxyDeleteTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyDeleteTableArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyDeleteTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyDeleteTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyDeleteTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDeleteTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDeleteTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyDeleteTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyDeleteTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyDeleteTableResult() *AccumuloProxyDeleteTableResult {
	return &AccumuloProxyDeleteTableResult{}
}

var AccumuloProxyDeleteTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyDeleteTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyDeleteTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyDeleteTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyDeleteTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyDeleteTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyDeleteTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyDeleteTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyDeleteTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyDeleteTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyDeleteTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyDeleteTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyDeleteTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyDeleteTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDeleteTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDeleteTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDeleteTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyDeleteTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
type AccumuloProxyDeleteRowsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	StartRow  []byte `thrift:"startRow,3" json:"startRow"`
	EndRow    []byte `thrift:"endRow,4" json:"endRow"`
}

func NewAccumuloProxyDeleteRowsArgs() *AccumuloProxyDeleteRowsArgs {
	return &AccumuloProxyDeleteRowsArgs{}
}

func (p *AccumuloProxyDeleteRowsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyDeleteRowsArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyDeleteRowsArgs) GetStartRow() []byte {
	return p.StartRow
}

func (p *AccumuloProxyDeleteRowsArgs) GetEndRow() []byte {
	return p.EndRow
}
func (p *AccumuloProxyDeleteRowsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteRows_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDeleteRowsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDeleteRowsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDeleteRowsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endRow", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endRow (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDeleteRowsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyDeleteRowsArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyDeleteRowsResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyDeleteRowsResult() *AccumuloProxyDeleteRowsResult {
	return &AccumuloProxyDeleteRowsResult{}
}

var AccumuloProxyDeleteRowsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyDeleteRowsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyDeleteRowsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyDeleteRowsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyDeleteRowsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyDeleteRowsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyDeleteRowsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyDeleteRowsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyDeleteRowsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyDeleteRowsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyDeleteRowsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyDeleteRowsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyDeleteRowsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("deleteRows_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyDeleteRowsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDeleteRowsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDeleteRowsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDeleteRowsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyDeleteRowsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - ExportDir
type AccumuloProxyExportTableArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	ExportDir string `thrift:"exportDir,3" json:"exportDir"`
}

func NewAccumuloProxyExportTableArgs() *AccumuloProxyExportTableArgs {
	return &AccumuloProxyExportTableArgs{}
}

func (p *AccumuloProxyExportTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyExportTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyExportTableArgs) GetExportDir() string {
	return p.ExportDir
}
func (p *AccumuloProxyExportTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyExportTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyExportTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyExportTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ExportDir = v
	}
	return nil
}

func (p *AccumuloProxyExportTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("exportTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyExportTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyExportTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyExportTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("exportDir", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:exportDir: ", p), err)
	}
	if err := oprot.WriteString(string(p.ExportDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.exportDir (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:exportDir: ", p), err)
	}
	return err
}

func (p *AccumuloProxyExportTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyExportTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyExportTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyExportTableResult() *AccumuloProxyExportTableResult {
	return &AccumuloProxyExportTableResult{}
}

var AccumuloProxyExportTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyExportTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyExportTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyExportTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyExportTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyExportTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyExportTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyExportTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyExportTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyExportTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyExportTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyExportTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyExportTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyExportTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyExportTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyExportTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyExportTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("exportTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyExportTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyExportTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyExportTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyExportTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyExportTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
//  - Wait
type AccumuloProxyFlushTableArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	StartRow  []byte `thrift:"startRow,3" json:"startRow"`
	EndRow    []byte `thrift:"endRow,4" json:"endRow"`
	Wait      bool   `thrift:"wait,5" json:"wait"`
}

func NewAccumuloProxyFlushTableArgs() *AccumuloProxyFlushTableArgs {
	return &AccumuloProxyFlushTableArgs{}
}

func (p *AccumuloProxyFlushTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyFlushTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyFlushTableArgs) GetStartRow() []byte {
	return p.StartRow
}

func (p *AccumuloProxyFlushTableArgs) GetEndRow() []byte {
	return p.EndRow
}

func (p *AccumuloProxyFlushTableArgs) GetWait() bool {
	return p.Wait
}
func (p *AccumuloProxyFlushTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Wait = v
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("flushTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyFlushTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyFlushTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyFlushTableArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endRow", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endRow (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyFlushTableArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("wait", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:wait: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Wait)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wait (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:wait: ", p), err)
	}
	return err
}

func (p *AccumuloProxyFlushTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyFlushTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyFlushTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyFlushTableResult() *AccumuloProxyFlushTableResult {
	return &AccumuloProxyFlushTableResult{}
}

var AccumuloProxyFlushTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyFlushTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyFlushTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyFlushTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyFlushTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyFlushTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyFlushTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyFlushTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyFlushTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyFlushTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyFlushTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyFlushTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyFlushTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("flushTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyFlushTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyFlushTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyFlushTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyFlushTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyFlushTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Tables
type AccumuloProxyGetDiskUsageArgs struct {
	Login  []byte          `thrift:"login,1" json:"login"`
	Tables map[string]bool `thrift:"tables,2" json:"tables"`
}

func NewAccumuloProxyGetDiskUsageArgs() *AccumuloProxyGetDiskUsageArgs {
	return &AccumuloProxyGetDiskUsageArgs{}
}

func (p *AccumuloProxyGetDiskUsageArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetDiskUsageArgs) GetTables() map[string]bool {
	return p.Tables
}
func (p *AccumuloProxyGetDiskUsageArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageArgs) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Tables = tSet
	for i := 0; i < size; i++ {
		var _elem185 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem185 = v
		}
		p.Tables[_elem185] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDiskUsage_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetDiskUsageArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tables", thrift.SET, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tables: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Tables)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Tables {
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tables: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetDiskUsageArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetDiskUsageArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyGetDiskUsageResult struct {
	Success []*DiskUsage               `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyGetDiskUsageResult() *AccumuloProxyGetDiskUsageResult {
	return &AccumuloProxyGetDiskUsageResult{}
}

var AccumuloProxyGetDiskUsageResult_Success_DEFAULT []*DiskUsage

func (p *AccumuloProxyGetDiskUsageResult) GetSuccess() []*DiskUsage {
	return p.Success
}

var AccumuloProxyGetDiskUsageResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetDiskUsageResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetDiskUsageResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetDiskUsageResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetDiskUsageResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetDiskUsageResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyGetDiskUsageResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyGetDiskUsageResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyGetDiskUsageResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyGetDiskUsageResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetDiskUsageResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetDiskUsageResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetDiskUsageResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyGetDiskUsageResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*DiskUsage, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem186 := &DiskUsage{}
		if err := _elem186.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem186), err)
		}
		p.Success = append(p.Success, _elem186)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getDiskUsage_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetDiskUsageResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetDiskUsageResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetDiskUsageResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetDiskUsageResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetDiskUsageResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetDiskUsageResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyGetLocalityGroupsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyGetLocalityGroupsArgs() *AccumuloProxyGetLocalityGroupsArgs {
	return &AccumuloProxyGetLocalityGroupsArgs{}
}

func (p *AccumuloProxyGetLocalityGroupsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetLocalityGroupsArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyGetLocalityGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLocalityGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetLocalityGroupsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetLocalityGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetLocalityGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyGetLocalityGroupsResult struct {
	Success map[string]map[string]bool `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyGetLocalityGroupsResult() *AccumuloProxyGetLocalityGroupsResult {
	return &AccumuloProxyGetLocalityGroupsResult{}
}

var AccumuloProxyGetLocalityGroupsResult_Success_DEFAULT map[string]map[string]bool

func (p *AccumuloProxyGetLocalityGroupsResult) GetSuccess() map[string]map[string]bool {
	return p.Success
}

var AccumuloProxyGetLocalityGroupsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetLocalityGroupsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetLocalityGroupsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetLocalityGroupsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetLocalityGroupsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetLocalityGroupsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyGetLocalityGroupsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyGetLocalityGroupsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyGetLocalityGroupsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyGetLocalityGroupsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]bool, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key187 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key187 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[string]bool, size)
		_val188 := tSet
		for i := 0; i < size; i++ {
			var _elem189 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem189 = v
			}
			_val188[_elem189] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.Success[_key187] = _val188
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getLocalityGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetLocalityGroupsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for v, _ := range v {
				if err := oprot.WriteString(string(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetLocalityGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetLocalityGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetLocalityGroupsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetLocalityGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetLocalityGroupsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - IteratorName
//  - Scope
type AccumuloProxyGetIteratorSettingArgs struct {
	Login        []byte        `thrift:"login,1" json:"login"`
	TableName    string        `thrift:"tableName,2" json:"tableName"`
	IteratorName string        `thrift:"iteratorName,3" json:"iteratorName"`
	Scope        IteratorScope `thrift:"scope,4" json:"scope"`
}

func NewAccumuloProxyGetIteratorSettingArgs() *AccumuloProxyGetIteratorSettingArgs {
	return &AccumuloProxyGetIteratorSettingArgs{}
}

func (p *AccumuloProxyGetIteratorSettingArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetIteratorSettingArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyGetIteratorSettingArgs) GetIteratorName() string {
	return p.IteratorName
}

func (p *AccumuloProxyGetIteratorSettingArgs) GetScope() IteratorScope {
	return p.Scope
}
func (p *AccumuloProxyGetIteratorSettingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IteratorName = v
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := IteratorScope(v)
		p.Scope = temp
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIteratorSetting_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iteratorName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:iteratorName: ", p), err)
	}
	if err := oprot.WriteString(string(p.IteratorName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iteratorName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:iteratorName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scope", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scope: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Scope)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scope (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scope: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetIteratorSettingArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyGetIteratorSettingResult struct {
	Success *IteratorSetting           `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyGetIteratorSettingResult() *AccumuloProxyGetIteratorSettingResult {
	return &AccumuloProxyGetIteratorSettingResult{}
}

var AccumuloProxyGetIteratorSettingResult_Success_DEFAULT *IteratorSetting

func (p *AccumuloProxyGetIteratorSettingResult) GetSuccess() *IteratorSetting {
	if !p.IsSetSuccess() {
		return AccumuloProxyGetIteratorSettingResult_Success_DEFAULT
	}
	return p.Success
}

var AccumuloProxyGetIteratorSettingResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetIteratorSettingResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetIteratorSettingResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetIteratorSettingResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetIteratorSettingResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetIteratorSettingResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyGetIteratorSettingResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyGetIteratorSettingResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyGetIteratorSettingResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyGetIteratorSettingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetIteratorSettingResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetIteratorSettingResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetIteratorSettingResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyGetIteratorSettingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &IteratorSetting{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getIteratorSetting_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetIteratorSettingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetIteratorSettingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetIteratorSettingResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Auths
//  - StartRow
//  - StartInclusive
//  - EndRow
//  - EndInclusive
type AccumuloProxyGetMaxRowArgs struct {
	Login          []byte          `thrift:"login,1" json:"login"`
	TableName      string          `thrift:"tableName,2" json:"tableName"`
	Auths          map[string]bool `thrift:"auths,3" json:"auths"`
	StartRow       []byte          `thrift:"startRow,4" json:"startRow"`
	StartInclusive bool            `thrift:"startInclusive,5" json:"startInclusive"`
	EndRow         []byte          `thrift:"endRow,6" json:"endRow"`
	EndInclusive   bool            `thrift:"endInclusive,7" json:"endInclusive"`
}

func NewAccumuloProxyGetMaxRowArgs() *AccumuloProxyGetMaxRowArgs {
	return &AccumuloProxyGetMaxRowArgs{}
}

func (p *AccumuloProxyGetMaxRowArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetMaxRowArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyGetMaxRowArgs) GetAuths() map[string]bool {
	return p.Auths
}

func (p *AccumuloProxyGetMaxRowArgs) GetStartRow() []byte {
	return p.StartRow
}

func (p *AccumuloProxyGetMaxRowArgs) GetStartInclusive() bool {
	return p.StartInclusive
}

func (p *AccumuloProxyGetMaxRowArgs) GetEndRow() []byte {
	return p.EndRow
}

func (p *AccumuloProxyGetMaxRowArgs) GetEndInclusive() bool {
	return p.EndInclusive
}
func (p *AccumuloProxyGetMaxRowArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Auths = tSet
	for i := 0; i < size; i++ {
		var _elem190 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem190 = v
		}
		p.Auths[string(_elem190)] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.StartInclusive = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.EndInclusive = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMaxRow_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("auths", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:auths: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Auths)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Auths {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:auths: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:startRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startInclusive", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:startInclusive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.StartInclusive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startInclusive (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:startInclusive: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endRow", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:endRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endRow (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:endRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endInclusive", thrift.BOOL, 7); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:endInclusive: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.EndInclusive)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endInclusive (7) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 7:endInclusive: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetMaxRowArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetMaxRowArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyGetMaxRowResult struct {
	Success []byte                     `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyGetMaxRowResult() *AccumuloProxyGetMaxRowResult {
	return &AccumuloProxyGetMaxRowResult{}
}

var AccumuloProxyGetMaxRowResult_Success_DEFAULT []byte

func (p *AccumuloProxyGetMaxRowResult) GetSuccess() []byte {
	return p.Success
}

var AccumuloProxyGetMaxRowResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetMaxRowResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetMaxRowResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetMaxRowResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetMaxRowResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetMaxRowResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyGetMaxRowResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyGetMaxRowResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyGetMaxRowResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyGetMaxRowResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetMaxRowResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetMaxRowResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetMaxRowResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyGetMaxRowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = v
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getMaxRow_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetMaxRowResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBinary(p.Success); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetMaxRowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetMaxRowResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetMaxRowResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetMaxRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetMaxRowResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyGetTablePropertiesArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyGetTablePropertiesArgs() *AccumuloProxyGetTablePropertiesArgs {
	return &AccumuloProxyGetTablePropertiesArgs{}
}

func (p *AccumuloProxyGetTablePropertiesArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetTablePropertiesArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyGetTablePropertiesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableProperties_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetTablePropertiesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetTablePropertiesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetTablePropertiesArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyGetTablePropertiesResult struct {
	Success map[string]string          `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyGetTablePropertiesResult() *AccumuloProxyGetTablePropertiesResult {
	return &AccumuloProxyGetTablePropertiesResult{}
}

var AccumuloProxyGetTablePropertiesResult_Success_DEFAULT map[string]string

func (p *AccumuloProxyGetTablePropertiesResult) GetSuccess() map[string]string {
	return p.Success
}

var AccumuloProxyGetTablePropertiesResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetTablePropertiesResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetTablePropertiesResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetTablePropertiesResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetTablePropertiesResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetTablePropertiesResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyGetTablePropertiesResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyGetTablePropertiesResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyGetTablePropertiesResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyGetTablePropertiesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetTablePropertiesResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetTablePropertiesResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetTablePropertiesResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyGetTablePropertiesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key191 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key191 = v
		}
		var _val192 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val192 = v
		}
		p.Success[_key191] = _val192
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTableProperties_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetTablePropertiesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetTablePropertiesResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetTablePropertiesResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetTablePropertiesResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetTablePropertiesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetTablePropertiesResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - ImportDir
//  - FailureDir
//  - SetTime
type AccumuloProxyImportDirectoryArgs struct {
	Login      []byte `thrift:"login,1" json:"login"`
	TableName  string `thrift:"tableName,2" json:"tableName"`
	ImportDir  string `thrift:"importDir,3" json:"importDir"`
	FailureDir string `thrift:"failureDir,4" json:"failureDir"`
	SetTime    bool   `thrift:"setTime,5" json:"setTime"`
}

func NewAccumuloProxyImportDirectoryArgs() *AccumuloProxyImportDirectoryArgs {
	return &AccumuloProxyImportDirectoryArgs{}
}

func (p *AccumuloProxyImportDirectoryArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyImportDirectoryArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyImportDirectoryArgs) GetImportDir() string {
	return p.ImportDir
}

func (p *AccumuloProxyImportDirectoryArgs) GetFailureDir() string {
	return p.FailureDir
}

func (p *AccumuloProxyImportDirectoryArgs) GetSetTime() bool {
	return p.SetTime
}
func (p *AccumuloProxyImportDirectoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ImportDir = v
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.FailureDir = v
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.SetTime = v
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("importDirectory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportDirectoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportDirectoryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("importDir", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:importDir: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImportDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.importDir (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:importDir: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportDirectoryArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("failureDir", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:failureDir: ", p), err)
	}
	if err := oprot.WriteString(string(p.FailureDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.failureDir (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:failureDir: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportDirectoryArgs) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("setTime", thrift.BOOL, 5); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:setTime: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.SetTime)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.setTime (5) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 5:setTime: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportDirectoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyImportDirectoryArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch3
//  - Ouch4
type AccumuloProxyImportDirectoryResult struct {
	Ouch1 *TableNotFoundException    `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch3 *AccumuloException         `thrift:"ouch3,2" json:"ouch3,omitempty"`
	Ouch4 *AccumuloSecurityException `thrift:"ouch4,3" json:"ouch4,omitempty"`
}

func NewAccumuloProxyImportDirectoryResult() *AccumuloProxyImportDirectoryResult {
	return &AccumuloProxyImportDirectoryResult{}
}

var AccumuloProxyImportDirectoryResult_Ouch1_DEFAULT *TableNotFoundException

func (p *AccumuloProxyImportDirectoryResult) GetOuch1() *TableNotFoundException {
	if !p.IsSetOuch1() {
		return AccumuloProxyImportDirectoryResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyImportDirectoryResult_Ouch3_DEFAULT *AccumuloException

func (p *AccumuloProxyImportDirectoryResult) GetOuch3() *AccumuloException {
	if !p.IsSetOuch3() {
		return AccumuloProxyImportDirectoryResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}

var AccumuloProxyImportDirectoryResult_Ouch4_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyImportDirectoryResult) GetOuch4() *AccumuloSecurityException {
	if !p.IsSetOuch4() {
		return AccumuloProxyImportDirectoryResult_Ouch4_DEFAULT
	}
	return p.Ouch4
}
func (p *AccumuloProxyImportDirectoryResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyImportDirectoryResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyImportDirectoryResult) IsSetOuch4() bool {
	return p.Ouch4 != nil
}

func (p *AccumuloProxyImportDirectoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &TableNotFoundException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch4 = &AccumuloSecurityException{}
	if err := p.Ouch4.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch4), err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("importDirectory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyImportDirectoryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyImportDirectoryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyImportDirectoryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch4() {
		if err := oprot.WriteFieldBegin("ouch4", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch4: ", p), err)
		}
		if err := p.Ouch4.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch4), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch4: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyImportDirectoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyImportDirectoryResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - ImportDir
type AccumuloProxyImportTableArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	ImportDir string `thrift:"importDir,3" json:"importDir"`
}

func NewAccumuloProxyImportTableArgs() *AccumuloProxyImportTableArgs {
	return &AccumuloProxyImportTableArgs{}
}

func (p *AccumuloProxyImportTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyImportTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyImportTableArgs) GetImportDir() string {
	return p.ImportDir
}
func (p *AccumuloProxyImportTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyImportTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyImportTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyImportTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ImportDir = v
	}
	return nil
}

func (p *AccumuloProxyImportTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("importTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyImportTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("importDir", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:importDir: ", p), err)
	}
	if err := oprot.WriteString(string(p.ImportDir)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.importDir (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:importDir: ", p), err)
	}
	return err
}

func (p *AccumuloProxyImportTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyImportTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyImportTableResult struct {
	Ouch1 *TableExistsException      `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloException         `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *AccumuloSecurityException `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyImportTableResult() *AccumuloProxyImportTableResult {
	return &AccumuloProxyImportTableResult{}
}

var AccumuloProxyImportTableResult_Ouch1_DEFAULT *TableExistsException

func (p *AccumuloProxyImportTableResult) GetOuch1() *TableExistsException {
	if !p.IsSetOuch1() {
		return AccumuloProxyImportTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyImportTableResult_Ouch2_DEFAULT *AccumuloException

func (p *AccumuloProxyImportTableResult) GetOuch2() *AccumuloException {
	if !p.IsSetOuch2() {
		return AccumuloProxyImportTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyImportTableResult_Ouch3_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyImportTableResult) GetOuch3() *AccumuloSecurityException {
	if !p.IsSetOuch3() {
		return AccumuloProxyImportTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyImportTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyImportTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyImportTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyImportTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyImportTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &TableExistsException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyImportTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyImportTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloSecurityException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyImportTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("importTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyImportTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyImportTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyImportTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyImportTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyImportTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - MaxSplits
type AccumuloProxyListSplitsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	MaxSplits int32  `thrift:"maxSplits,3" json:"maxSplits"`
}

func NewAccumuloProxyListSplitsArgs() *AccumuloProxyListSplitsArgs {
	return &AccumuloProxyListSplitsArgs{}
}

func (p *AccumuloProxyListSplitsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyListSplitsArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyListSplitsArgs) GetMaxSplits() int32 {
	return p.MaxSplits
}
func (p *AccumuloProxyListSplitsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyListSplitsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyListSplitsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.MaxSplits = v
	}
	return nil
}

func (p *AccumuloProxyListSplitsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSplits_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListSplitsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListSplitsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxSplits", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:maxSplits: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxSplits)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxSplits (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:maxSplits: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListSplitsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListSplitsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyListSplitsResult struct {
	Success [][]byte                   `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyListSplitsResult() *AccumuloProxyListSplitsResult {
	return &AccumuloProxyListSplitsResult{}
}

var AccumuloProxyListSplitsResult_Success_DEFAULT [][]byte

func (p *AccumuloProxyListSplitsResult) GetSuccess() [][]byte {
	return p.Success
}

var AccumuloProxyListSplitsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyListSplitsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyListSplitsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyListSplitsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyListSplitsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyListSplitsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyListSplitsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyListSplitsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyListSplitsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyListSplitsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyListSplitsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyListSplitsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyListSplitsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyListSplitsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem193 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem193 = v
		}
		p.Success = append(p.Success, _elem193)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listSplits_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListSplitsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListSplitsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListSplitsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListSplitsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListSplitsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListSplitsResult(%+v)", *p)
}

// Attributes:
//  - Login
type AccumuloProxyListTablesArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
}

func NewAccumuloProxyListTablesArgs() *AccumuloProxyListTablesArgs {
	return &AccumuloProxyListTablesArgs{}
}

func (p *AccumuloProxyListTablesArgs) GetLogin() []byte {
	return p.Login
}
func (p *AccumuloProxyListTablesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListTablesArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyListTablesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTables_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListTablesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListTablesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListTablesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccumuloProxyListTablesResult struct {
	Success map[string]bool `thrift:"success,0" json:"success,omitempty"`
}

func NewAccumuloProxyListTablesResult() *AccumuloProxyListTablesResult {
	return &AccumuloProxyListTablesResult{}
}

var AccumuloProxyListTablesResult_Success_DEFAULT map[string]bool

func (p *AccumuloProxyListTablesResult) GetSuccess() map[string]bool {
	return p.Success
}
func (p *AccumuloProxyListTablesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyListTablesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListTablesResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem194 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem194 = v
		}
		p.Success[_elem194] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyListTablesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listTables_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListTablesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListTablesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListTablesResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyListIteratorsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyListIteratorsArgs() *AccumuloProxyListIteratorsArgs {
	return &AccumuloProxyListIteratorsArgs{}
}

func (p *AccumuloProxyListIteratorsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyListIteratorsArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyListIteratorsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyListIteratorsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyListIteratorsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listIterators_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListIteratorsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListIteratorsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListIteratorsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyListIteratorsResult struct {
	Success map[string]map[IteratorScope]bool `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException                `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException        `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException           `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyListIteratorsResult() *AccumuloProxyListIteratorsResult {
	return &AccumuloProxyListIteratorsResult{}
}

var AccumuloProxyListIteratorsResult_Success_DEFAULT map[string]map[IteratorScope]bool

func (p *AccumuloProxyListIteratorsResult) GetSuccess() map[string]map[IteratorScope]bool {
	return p.Success
}

var AccumuloProxyListIteratorsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyListIteratorsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyListIteratorsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyListIteratorsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyListIteratorsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyListIteratorsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyListIteratorsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyListIteratorsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyListIteratorsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyListIteratorsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyListIteratorsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyListIteratorsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyListIteratorsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyListIteratorsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[IteratorScope]bool, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key195 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key195 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[IteratorScope]bool, size)
		_val196 := tSet
		for i := 0; i < size; i++ {
			var _elem197 IteratorScope
			if v, err := iprot.ReadI32(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				temp := IteratorScope(v)
				_elem197 = temp
			}
			_val196[_elem197] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.Success[_key195] = _val196
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listIterators_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListIteratorsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteSetBegin(thrift.I32, len(v)); err != nil {
				return thrift.PrependError("error writing set begin: ", err)
			}
			for v, _ := range v {
				if err := oprot.WriteI32(int32(v)); err != nil {
					return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
				}
			}
			if err := oprot.WriteSetEnd(); err != nil {
				return thrift.PrependError("error writing set end: ", err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListIteratorsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListIteratorsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListIteratorsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListIteratorsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListIteratorsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyListConstraintsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyListConstraintsArgs() *AccumuloProxyListConstraintsArgs {
	return &AccumuloProxyListConstraintsArgs{}
}

func (p *AccumuloProxyListConstraintsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyListConstraintsArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyListConstraintsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyListConstraintsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyListConstraintsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listConstraints_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListConstraintsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListConstraintsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListConstraintsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyListConstraintsResult struct {
	Success map[string]int32           `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyListConstraintsResult() *AccumuloProxyListConstraintsResult {
	return &AccumuloProxyListConstraintsResult{}
}

var AccumuloProxyListConstraintsResult_Success_DEFAULT map[string]int32

func (p *AccumuloProxyListConstraintsResult) GetSuccess() map[string]int32 {
	return p.Success
}

var AccumuloProxyListConstraintsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyListConstraintsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyListConstraintsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyListConstraintsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyListConstraintsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyListConstraintsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyListConstraintsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyListConstraintsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyListConstraintsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyListConstraintsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyListConstraintsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyListConstraintsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyListConstraintsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyListConstraintsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int32, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key198 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key198 = v
		}
		var _val199 int32
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val199 = v
		}
		p.Success[_key198] = _val199
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listConstraints_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListConstraintsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListConstraintsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListConstraintsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListConstraintsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListConstraintsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListConstraintsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - StartRow
//  - EndRow
type AccumuloProxyMergeTabletsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	StartRow  []byte `thrift:"startRow,3" json:"startRow"`
	EndRow    []byte `thrift:"endRow,4" json:"endRow"`
}

func NewAccumuloProxyMergeTabletsArgs() *AccumuloProxyMergeTabletsArgs {
	return &AccumuloProxyMergeTabletsArgs{}
}

func (p *AccumuloProxyMergeTabletsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyMergeTabletsArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyMergeTabletsArgs) GetStartRow() []byte {
	return p.StartRow
}

func (p *AccumuloProxyMergeTabletsArgs) GetEndRow() []byte {
	return p.EndRow
}
func (p *AccumuloProxyMergeTabletsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.StartRow = v
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.EndRow = v
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mergeTablets_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyMergeTabletsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyMergeTabletsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("startRow", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.StartRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.startRow (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyMergeTabletsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("endRow", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endRow: ", p), err)
	}
	if err := oprot.WriteBinary(p.EndRow); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.endRow (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endRow: ", p), err)
	}
	return err
}

func (p *AccumuloProxyMergeTabletsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyMergeTabletsArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyMergeTabletsResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyMergeTabletsResult() *AccumuloProxyMergeTabletsResult {
	return &AccumuloProxyMergeTabletsResult{}
}

var AccumuloProxyMergeTabletsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyMergeTabletsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyMergeTabletsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyMergeTabletsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyMergeTabletsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyMergeTabletsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyMergeTabletsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyMergeTabletsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyMergeTabletsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyMergeTabletsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyMergeTabletsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyMergeTabletsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyMergeTabletsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("mergeTablets_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyMergeTabletsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyMergeTabletsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyMergeTabletsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyMergeTabletsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyMergeTabletsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Wait
type AccumuloProxyOfflineTableArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	Wait      bool   `thrift:"wait,3" json:"wait"`
}

func NewAccumuloProxyOfflineTableArgs() *AccumuloProxyOfflineTableArgs {
	return &AccumuloProxyOfflineTableArgs{}
}

func (p *AccumuloProxyOfflineTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyOfflineTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyOfflineTableArgs) GetWait() bool {
	return p.Wait
}
func (p *AccumuloProxyOfflineTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyOfflineTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyOfflineTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Wait = v
	}
	return nil
}

func (p *AccumuloProxyOfflineTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("offlineTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyOfflineTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyOfflineTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("wait", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wait: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Wait)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wait (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wait: ", p), err)
	}
	return err
}

func (p *AccumuloProxyOfflineTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyOfflineTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyOfflineTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyOfflineTableResult() *AccumuloProxyOfflineTableResult {
	return &AccumuloProxyOfflineTableResult{}
}

var AccumuloProxyOfflineTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyOfflineTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyOfflineTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyOfflineTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyOfflineTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyOfflineTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyOfflineTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyOfflineTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyOfflineTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyOfflineTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyOfflineTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyOfflineTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyOfflineTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("offlineTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyOfflineTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyOfflineTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyOfflineTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyOfflineTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyOfflineTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Wait
type AccumuloProxyOnlineTableArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	Wait      bool   `thrift:"wait,3" json:"wait"`
}

func NewAccumuloProxyOnlineTableArgs() *AccumuloProxyOnlineTableArgs {
	return &AccumuloProxyOnlineTableArgs{}
}

func (p *AccumuloProxyOnlineTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyOnlineTableArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyOnlineTableArgs) GetWait() bool {
	return p.Wait
}
func (p *AccumuloProxyOnlineTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyOnlineTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyOnlineTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Wait = v
	}
	return nil
}

func (p *AccumuloProxyOnlineTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("onlineTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyOnlineTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyOnlineTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("wait", thrift.BOOL, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:wait: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Wait)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.wait (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:wait: ", p), err)
	}
	return err
}

func (p *AccumuloProxyOnlineTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyOnlineTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyOnlineTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyOnlineTableResult() *AccumuloProxyOnlineTableResult {
	return &AccumuloProxyOnlineTableResult{}
}

var AccumuloProxyOnlineTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyOnlineTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyOnlineTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyOnlineTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyOnlineTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyOnlineTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyOnlineTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyOnlineTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyOnlineTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyOnlineTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyOnlineTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyOnlineTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyOnlineTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("onlineTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyOnlineTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyOnlineTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyOnlineTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyOnlineTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyOnlineTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Constraint
type AccumuloProxyRemoveConstraintArgs struct {
	Login      []byte `thrift:"login,1" json:"login"`
	TableName  string `thrift:"tableName,2" json:"tableName"`
	Constraint int32  `thrift:"constraint,3" json:"constraint"`
}

func NewAccumuloProxyRemoveConstraintArgs() *AccumuloProxyRemoveConstraintArgs {
	return &AccumuloProxyRemoveConstraintArgs{}
}

func (p *AccumuloProxyRemoveConstraintArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRemoveConstraintArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyRemoveConstraintArgs) GetConstraint() int32 {
	return p.Constraint
}
func (p *AccumuloProxyRemoveConstraintArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Constraint = v
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeConstraint_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveConstraintArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveConstraintArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("constraint", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:constraint: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Constraint)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.constraint (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:constraint: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveConstraintArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemoveConstraintArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyRemoveConstraintResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyRemoveConstraintResult() *AccumuloProxyRemoveConstraintResult {
	return &AccumuloProxyRemoveConstraintResult{}
}

var AccumuloProxyRemoveConstraintResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRemoveConstraintResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRemoveConstraintResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRemoveConstraintResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRemoveConstraintResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRemoveConstraintResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyRemoveConstraintResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyRemoveConstraintResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyRemoveConstraintResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyRemoveConstraintResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRemoveConstraintResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRemoveConstraintResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyRemoveConstraintResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeConstraint_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveConstraintResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveConstraintResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveConstraintResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveConstraintResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemoveConstraintResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - IterName
//  - Scopes
type AccumuloProxyRemoveIteratorArgs struct {
	Login     []byte                 `thrift:"login,1" json:"login"`
	TableName string                 `thrift:"tableName,2" json:"tableName"`
	IterName  string                 `thrift:"iterName,3" json:"iterName"`
	Scopes    map[IteratorScope]bool `thrift:"scopes,4" json:"scopes"`
}

func NewAccumuloProxyRemoveIteratorArgs() *AccumuloProxyRemoveIteratorArgs {
	return &AccumuloProxyRemoveIteratorArgs{}
}

func (p *AccumuloProxyRemoveIteratorArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRemoveIteratorArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyRemoveIteratorArgs) GetIterName() string {
	return p.IterName
}

func (p *AccumuloProxyRemoveIteratorArgs) GetScopes() map[IteratorScope]bool {
	return p.Scopes
}
func (p *AccumuloProxyRemoveIteratorArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.IterName = v
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorArgs) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[IteratorScope]bool, size)
	p.Scopes = tSet
	for i := 0; i < size; i++ {
		var _elem200 IteratorScope
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := IteratorScope(v)
			_elem200 = temp
		}
		p.Scopes[_elem200] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeIterator_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("iterName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:iterName: ", p), err)
	}
	if err := oprot.WriteString(string(p.IterName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.iterName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:iterName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scopes", thrift.SET, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:scopes: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.I32, len(p.Scopes)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Scopes {
		if err := oprot.WriteI32(int32(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:scopes: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemoveIteratorArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyRemoveIteratorResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyRemoveIteratorResult() *AccumuloProxyRemoveIteratorResult {
	return &AccumuloProxyRemoveIteratorResult{}
}

var AccumuloProxyRemoveIteratorResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRemoveIteratorResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRemoveIteratorResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRemoveIteratorResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRemoveIteratorResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRemoveIteratorResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyRemoveIteratorResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyRemoveIteratorResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyRemoveIteratorResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyRemoveIteratorResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRemoveIteratorResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRemoveIteratorResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyRemoveIteratorResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeIterator_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveIteratorResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveIteratorResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemoveIteratorResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Property
type AccumuloProxyRemoveTablePropertyArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	Property  string `thrift:"property,3" json:"property"`
}

func NewAccumuloProxyRemoveTablePropertyArgs() *AccumuloProxyRemoveTablePropertyArgs {
	return &AccumuloProxyRemoveTablePropertyArgs{}
}

func (p *AccumuloProxyRemoveTablePropertyArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRemoveTablePropertyArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyRemoveTablePropertyArgs) GetProperty() string {
	return p.Property
}
func (p *AccumuloProxyRemoveTablePropertyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Property = v
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeTableProperty_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveTablePropertyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveTablePropertyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("property", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:property: ", p), err)
	}
	if err := oprot.WriteString(string(p.Property)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.property (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:property: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemoveTablePropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemoveTablePropertyArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyRemoveTablePropertyResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyRemoveTablePropertyResult() *AccumuloProxyRemoveTablePropertyResult {
	return &AccumuloProxyRemoveTablePropertyResult{}
}

var AccumuloProxyRemoveTablePropertyResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRemoveTablePropertyResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRemoveTablePropertyResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRemoveTablePropertyResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRemoveTablePropertyResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRemoveTablePropertyResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyRemoveTablePropertyResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyRemoveTablePropertyResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyRemoveTablePropertyResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyRemoveTablePropertyResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeTableProperty_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemoveTablePropertyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveTablePropertyResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveTablePropertyResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemoveTablePropertyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemoveTablePropertyResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - OldTableName
//  - NewTableName_
type AccumuloProxyRenameTableArgs struct {
	Login         []byte `thrift:"login,1" json:"login"`
	OldTableName  string `thrift:"oldTableName,2" json:"oldTableName"`
	NewTableName_ string `thrift:"newTableName,3" json:"newTableName"`
}

func NewAccumuloProxyRenameTableArgs() *AccumuloProxyRenameTableArgs {
	return &AccumuloProxyRenameTableArgs{}
}

func (p *AccumuloProxyRenameTableArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRenameTableArgs) GetOldTableName() string {
	return p.OldTableName
}

func (p *AccumuloProxyRenameTableArgs) GetNewTableName_() string {
	return p.NewTableName_
}
func (p *AccumuloProxyRenameTableArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRenameTableArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.OldTableName = v
	}
	return nil
}

func (p *AccumuloProxyRenameTableArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.NewTableName_ = v
	}
	return nil
}

func (p *AccumuloProxyRenameTableArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renameTable_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRenameTableArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("oldTableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:oldTableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.OldTableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.oldTableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:oldTableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRenameTableArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("newTableName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:newTableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.NewTableName_)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.newTableName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:newTableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRenameTableArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRenameTableArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
//  - Ouch4
type AccumuloProxyRenameTableResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
	Ouch4 *TableExistsException      `thrift:"ouch4,4" json:"ouch4,omitempty"`
}

func NewAccumuloProxyRenameTableResult() *AccumuloProxyRenameTableResult {
	return &AccumuloProxyRenameTableResult{}
}

var AccumuloProxyRenameTableResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRenameTableResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRenameTableResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRenameTableResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRenameTableResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRenameTableResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyRenameTableResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyRenameTableResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyRenameTableResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}

var AccumuloProxyRenameTableResult_Ouch4_DEFAULT *TableExistsException

func (p *AccumuloProxyRenameTableResult) GetOuch4() *TableExistsException {
	if !p.IsSetOuch4() {
		return AccumuloProxyRenameTableResult_Ouch4_DEFAULT
	}
	return p.Ouch4
}
func (p *AccumuloProxyRenameTableResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRenameTableResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRenameTableResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyRenameTableResult) IsSetOuch4() bool {
	return p.Ouch4 != nil
}

func (p *AccumuloProxyRenameTableResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableResult) readField4(iprot thrift.TProtocol) error {
	p.Ouch4 = &TableExistsException{}
	if err := p.Ouch4.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch4), err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("renameTable_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRenameTableResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRenameTableResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRenameTableResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRenameTableResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch4() {
		if err := oprot.WriteFieldBegin("ouch4", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ouch4: ", p), err)
		}
		if err := p.Ouch4.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch4), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ouch4: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRenameTableResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRenameTableResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Groups
type AccumuloProxySetLocalityGroupsArgs struct {
	Login     []byte                     `thrift:"login,1" json:"login"`
	TableName string                     `thrift:"tableName,2" json:"tableName"`
	Groups    map[string]map[string]bool `thrift:"groups,3" json:"groups"`
}

func NewAccumuloProxySetLocalityGroupsArgs() *AccumuloProxySetLocalityGroupsArgs {
	return &AccumuloProxySetLocalityGroupsArgs{}
}

func (p *AccumuloProxySetLocalityGroupsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxySetLocalityGroupsArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxySetLocalityGroupsArgs) GetGroups() map[string]map[string]bool {
	return p.Groups
}
func (p *AccumuloProxySetLocalityGroupsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsArgs) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]map[string]bool, size)
	p.Groups = tMap
	for i := 0; i < size; i++ {
		var _key201 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key201 = v
		}
		_, size, err := iprot.ReadSetBegin()
		if err != nil {
			return thrift.PrependError("error reading set begin: ", err)
		}
		tSet := make(map[string]bool, size)
		_val202 := tSet
		for i := 0; i < size; i++ {
			var _elem203 string
			if v, err := iprot.ReadString(); err != nil {
				return thrift.PrependError("error reading field 0: ", err)
			} else {
				_elem203 = v
			}
			_val202[_elem203] = true
		}
		if err := iprot.ReadSetEnd(); err != nil {
			return thrift.PrependError("error reading set end: ", err)
		}
		p.Groups[_key201] = _val202
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setLocalityGroups_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetLocalityGroupsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetLocalityGroupsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("groups", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:groups: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.SET, len(p.Groups)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Groups {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(v)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range v {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:groups: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetLocalityGroupsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySetLocalityGroupsArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxySetLocalityGroupsResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxySetLocalityGroupsResult() *AccumuloProxySetLocalityGroupsResult {
	return &AccumuloProxySetLocalityGroupsResult{}
}

var AccumuloProxySetLocalityGroupsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxySetLocalityGroupsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxySetLocalityGroupsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxySetLocalityGroupsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxySetLocalityGroupsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxySetLocalityGroupsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxySetLocalityGroupsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxySetLocalityGroupsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxySetLocalityGroupsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxySetLocalityGroupsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxySetLocalityGroupsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxySetLocalityGroupsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxySetLocalityGroupsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setLocalityGroups_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySetLocalityGroupsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetLocalityGroupsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetLocalityGroupsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetLocalityGroupsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySetLocalityGroupsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Property
//  - Value
type AccumuloProxySetTablePropertyArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	Property  string `thrift:"property,3" json:"property"`
	Value     string `thrift:"value,4" json:"value"`
}

func NewAccumuloProxySetTablePropertyArgs() *AccumuloProxySetTablePropertyArgs {
	return &AccumuloProxySetTablePropertyArgs{}
}

func (p *AccumuloProxySetTablePropertyArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxySetTablePropertyArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxySetTablePropertyArgs) GetProperty() string {
	return p.Property
}

func (p *AccumuloProxySetTablePropertyArgs) GetValue() string {
	return p.Value
}
func (p *AccumuloProxySetTablePropertyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Property = v
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setTableProperty_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetTablePropertyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetTablePropertyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("property", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:property: ", p), err)
	}
	if err := oprot.WriteString(string(p.Property)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.property (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:property: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetTablePropertyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:value: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetTablePropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySetTablePropertyArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxySetTablePropertyResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxySetTablePropertyResult() *AccumuloProxySetTablePropertyResult {
	return &AccumuloProxySetTablePropertyResult{}
}

var AccumuloProxySetTablePropertyResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxySetTablePropertyResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxySetTablePropertyResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxySetTablePropertyResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxySetTablePropertyResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxySetTablePropertyResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxySetTablePropertyResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxySetTablePropertyResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxySetTablePropertyResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxySetTablePropertyResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxySetTablePropertyResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxySetTablePropertyResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxySetTablePropertyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setTableProperty_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySetTablePropertyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetTablePropertyResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetTablePropertyResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetTablePropertyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySetTablePropertyResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Range
//  - MaxSplits
type AccumuloProxySplitRangeByTabletsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
	Range     *Range `thrift:"range,3" json:"range"`
	MaxSplits int32  `thrift:"maxSplits,4" json:"maxSplits"`
}

func NewAccumuloProxySplitRangeByTabletsArgs() *AccumuloProxySplitRangeByTabletsArgs {
	return &AccumuloProxySplitRangeByTabletsArgs{}
}

func (p *AccumuloProxySplitRangeByTabletsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxySplitRangeByTabletsArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxySplitRangeByTabletsArgs_Range_DEFAULT *Range

func (p *AccumuloProxySplitRangeByTabletsArgs) GetRange() *Range {
	if !p.IsSetRange() {
		return AccumuloProxySplitRangeByTabletsArgs_Range_DEFAULT
	}
	return p.Range
}

func (p *AccumuloProxySplitRangeByTabletsArgs) GetMaxSplits() int32 {
	return p.MaxSplits
}
func (p *AccumuloProxySplitRangeByTabletsArgs) IsSetRange() bool {
	return p.Range != nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) readField3(iprot thrift.TProtocol) error {
	p.Range = &Range{}
	if err := p.Range.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Range), err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.MaxSplits = v
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitRangeByTablets_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("range", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:range: ", p), err)
	}
	if err := p.Range.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Range), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:range: ", p), err)
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxSplits", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:maxSplits: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.MaxSplits)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.maxSplits (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:maxSplits: ", p), err)
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySplitRangeByTabletsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxySplitRangeByTabletsResult struct {
	Success map[*Range]bool            `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxySplitRangeByTabletsResult() *AccumuloProxySplitRangeByTabletsResult {
	return &AccumuloProxySplitRangeByTabletsResult{}
}

var AccumuloProxySplitRangeByTabletsResult_Success_DEFAULT map[*Range]bool

func (p *AccumuloProxySplitRangeByTabletsResult) GetSuccess() map[*Range]bool {
	return p.Success
}

var AccumuloProxySplitRangeByTabletsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxySplitRangeByTabletsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxySplitRangeByTabletsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxySplitRangeByTabletsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxySplitRangeByTabletsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxySplitRangeByTabletsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxySplitRangeByTabletsResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxySplitRangeByTabletsResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxySplitRangeByTabletsResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxySplitRangeByTabletsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[*Range]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		_elem204 := &Range{}
		if err := _elem204.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem204), err)
		}
		p.Success[_elem204] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("splitRangeByTablets_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySplitRangeByTabletsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySplitRangeByTabletsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySplitRangeByTabletsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
type AccumuloProxyTableExistsArgs struct {
	Login     []byte `thrift:"login,1" json:"login"`
	TableName string `thrift:"tableName,2" json:"tableName"`
}

func NewAccumuloProxyTableExistsArgs() *AccumuloProxyTableExistsArgs {
	return &AccumuloProxyTableExistsArgs{}
}

func (p *AccumuloProxyTableExistsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyTableExistsArgs) GetTableName() string {
	return p.TableName
}
func (p *AccumuloProxyTableExistsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTableExistsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyTableExistsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyTableExistsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tableExists_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTableExistsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTableExistsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTableExistsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTableExistsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccumuloProxyTableExistsResult struct {
	Success *bool `thrift:"success,0" json:"success,omitempty"`
}

func NewAccumuloProxyTableExistsResult() *AccumuloProxyTableExistsResult {
	return &AccumuloProxyTableExistsResult{}
}

var AccumuloProxyTableExistsResult_Success_DEFAULT bool

func (p *AccumuloProxyTableExistsResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyTableExistsResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *AccumuloProxyTableExistsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyTableExistsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTableExistsResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyTableExistsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tableExists_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTableExistsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTableExistsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTableExistsResult(%+v)", *p)
}

// Attributes:
//  - Login
type AccumuloProxyTableIdMapArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
}

func NewAccumuloProxyTableIdMapArgs() *AccumuloProxyTableIdMapArgs {
	return &AccumuloProxyTableIdMapArgs{}
}

func (p *AccumuloProxyTableIdMapArgs) GetLogin() []byte {
	return p.Login
}
func (p *AccumuloProxyTableIdMapArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTableIdMapArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyTableIdMapArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tableIdMap_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTableIdMapArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTableIdMapArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTableIdMapArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccumuloProxyTableIdMapResult struct {
	Success map[string]string `thrift:"success,0" json:"success,omitempty"`
}

func NewAccumuloProxyTableIdMapResult() *AccumuloProxyTableIdMapResult {
	return &AccumuloProxyTableIdMapResult{}
}

var AccumuloProxyTableIdMapResult_Success_DEFAULT map[string]string

func (p *AccumuloProxyTableIdMapResult) GetSuccess() map[string]string {
	return p.Success
}
func (p *AccumuloProxyTableIdMapResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyTableIdMapResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTableIdMapResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key205 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key205 = v
		}
		var _val206 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val206 = v
		}
		p.Success[_key205] = _val206
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyTableIdMapResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("tableIdMap_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTableIdMapResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTableIdMapResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTableIdMapResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - ClassName
//  - AsTypeName
type AccumuloProxyTestTableClassLoadArgs struct {
	Login      []byte `thrift:"login,1" json:"login"`
	TableName  string `thrift:"tableName,2" json:"tableName"`
	ClassName  string `thrift:"className,3" json:"className"`
	AsTypeName string `thrift:"asTypeName,4" json:"asTypeName"`
}

func NewAccumuloProxyTestTableClassLoadArgs() *AccumuloProxyTestTableClassLoadArgs {
	return &AccumuloProxyTestTableClassLoadArgs{}
}

func (p *AccumuloProxyTestTableClassLoadArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyTestTableClassLoadArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyTestTableClassLoadArgs) GetClassName() string {
	return p.ClassName
}

func (p *AccumuloProxyTestTableClassLoadArgs) GetAsTypeName() string {
	return p.AsTypeName
}
func (p *AccumuloProxyTestTableClassLoadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.AsTypeName = v
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTableClassLoad_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:className: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("asTypeName", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:asTypeName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AsTypeName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.asTypeName (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:asTypeName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTestTableClassLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyTestTableClassLoadResult struct {
	Success *bool                      `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyTestTableClassLoadResult() *AccumuloProxyTestTableClassLoadResult {
	return &AccumuloProxyTestTableClassLoadResult{}
}

var AccumuloProxyTestTableClassLoadResult_Success_DEFAULT bool

func (p *AccumuloProxyTestTableClassLoadResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyTestTableClassLoadResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyTestTableClassLoadResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyTestTableClassLoadResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyTestTableClassLoadResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyTestTableClassLoadResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyTestTableClassLoadResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyTestTableClassLoadResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyTestTableClassLoadResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyTestTableClassLoadResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyTestTableClassLoadResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyTestTableClassLoadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyTestTableClassLoadResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyTestTableClassLoadResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyTestTableClassLoadResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyTestTableClassLoadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testTableClassLoad_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTestTableClassLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestTableClassLoadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTestTableClassLoadResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Tserver
type AccumuloProxyPingTabletServerArgs struct {
	Login   []byte `thrift:"login,1" json:"login"`
	Tserver string `thrift:"tserver,2" json:"tserver"`
}

func NewAccumuloProxyPingTabletServerArgs() *AccumuloProxyPingTabletServerArgs {
	return &AccumuloProxyPingTabletServerArgs{}
}

func (p *AccumuloProxyPingTabletServerArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyPingTabletServerArgs) GetTserver() string {
	return p.Tserver
}
func (p *AccumuloProxyPingTabletServerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Tserver = v
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pingTabletServer_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyPingTabletServerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tserver", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tserver: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tserver)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tserver (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tserver: ", p), err)
	}
	return err
}

func (p *AccumuloProxyPingTabletServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyPingTabletServerArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyPingTabletServerResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyPingTabletServerResult() *AccumuloProxyPingTabletServerResult {
	return &AccumuloProxyPingTabletServerResult{}
}

var AccumuloProxyPingTabletServerResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyPingTabletServerResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyPingTabletServerResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyPingTabletServerResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyPingTabletServerResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyPingTabletServerResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyPingTabletServerResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyPingTabletServerResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyPingTabletServerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("pingTabletServer_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyPingTabletServerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyPingTabletServerResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyPingTabletServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyPingTabletServerResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Tserver
type AccumuloProxyGetActiveScansArgs struct {
	Login   []byte `thrift:"login,1" json:"login"`
	Tserver string `thrift:"tserver,2" json:"tserver"`
}

func NewAccumuloProxyGetActiveScansArgs() *AccumuloProxyGetActiveScansArgs {
	return &AccumuloProxyGetActiveScansArgs{}
}

func (p *AccumuloProxyGetActiveScansArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetActiveScansArgs) GetTserver() string {
	return p.Tserver
}
func (p *AccumuloProxyGetActiveScansArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Tserver = v
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActiveScans_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetActiveScansArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tserver", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tserver: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tserver)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tserver (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tserver: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetActiveScansArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetActiveScansArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyGetActiveScansResult struct {
	Success []*ActiveScan              `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyGetActiveScansResult() *AccumuloProxyGetActiveScansResult {
	return &AccumuloProxyGetActiveScansResult{}
}

var AccumuloProxyGetActiveScansResult_Success_DEFAULT []*ActiveScan

func (p *AccumuloProxyGetActiveScansResult) GetSuccess() []*ActiveScan {
	return p.Success
}

var AccumuloProxyGetActiveScansResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetActiveScansResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetActiveScansResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetActiveScansResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetActiveScansResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetActiveScansResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyGetActiveScansResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetActiveScansResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetActiveScansResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetActiveScansResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ActiveScan, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem207 := &ActiveScan{}
		if err := _elem207.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem207), err)
		}
		p.Success = append(p.Success, _elem207)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActiveScans_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveScansResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetActiveScansResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetActiveScansResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetActiveScansResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetActiveScansResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Tserver
type AccumuloProxyGetActiveCompactionsArgs struct {
	Login   []byte `thrift:"login,1" json:"login"`
	Tserver string `thrift:"tserver,2" json:"tserver"`
}

func NewAccumuloProxyGetActiveCompactionsArgs() *AccumuloProxyGetActiveCompactionsArgs {
	return &AccumuloProxyGetActiveCompactionsArgs{}
}

func (p *AccumuloProxyGetActiveCompactionsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetActiveCompactionsArgs) GetTserver() string {
	return p.Tserver
}
func (p *AccumuloProxyGetActiveCompactionsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Tserver = v
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActiveCompactions_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetActiveCompactionsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tserver", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tserver: ", p), err)
	}
	if err := oprot.WriteString(string(p.Tserver)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tserver (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tserver: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetActiveCompactionsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetActiveCompactionsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyGetActiveCompactionsResult struct {
	Success []*ActiveCompaction        `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyGetActiveCompactionsResult() *AccumuloProxyGetActiveCompactionsResult {
	return &AccumuloProxyGetActiveCompactionsResult{}
}

var AccumuloProxyGetActiveCompactionsResult_Success_DEFAULT []*ActiveCompaction

func (p *AccumuloProxyGetActiveCompactionsResult) GetSuccess() []*ActiveCompaction {
	return p.Success
}

var AccumuloProxyGetActiveCompactionsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetActiveCompactionsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetActiveCompactionsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetActiveCompactionsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetActiveCompactionsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetActiveCompactionsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyGetActiveCompactionsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*ActiveCompaction, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		_elem208 := &ActiveCompaction{}
		if err := _elem208.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem208), err)
		}
		p.Success = append(p.Success, _elem208)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getActiveCompactions_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetActiveCompactionsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetActiveCompactionsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetActiveCompactionsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetActiveCompactionsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetActiveCompactionsResult(%+v)", *p)
}

// Attributes:
//  - Login
type AccumuloProxyGetSiteConfigurationArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
}

func NewAccumuloProxyGetSiteConfigurationArgs() *AccumuloProxyGetSiteConfigurationArgs {
	return &AccumuloProxyGetSiteConfigurationArgs{}
}

func (p *AccumuloProxyGetSiteConfigurationArgs) GetLogin() []byte {
	return p.Login
}
func (p *AccumuloProxyGetSiteConfigurationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSiteConfiguration_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetSiteConfigurationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetSiteConfigurationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyGetSiteConfigurationResult struct {
	Success map[string]string          `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyGetSiteConfigurationResult() *AccumuloProxyGetSiteConfigurationResult {
	return &AccumuloProxyGetSiteConfigurationResult{}
}

var AccumuloProxyGetSiteConfigurationResult_Success_DEFAULT map[string]string

func (p *AccumuloProxyGetSiteConfigurationResult) GetSuccess() map[string]string {
	return p.Success
}

var AccumuloProxyGetSiteConfigurationResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetSiteConfigurationResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetSiteConfigurationResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetSiteConfigurationResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetSiteConfigurationResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetSiteConfigurationResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyGetSiteConfigurationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key209 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key209 = v
		}
		var _val210 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val210 = v
		}
		p.Success[_key209] = _val210
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSiteConfiguration_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetSiteConfigurationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetSiteConfigurationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetSiteConfigurationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetSiteConfigurationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetSiteConfigurationResult(%+v)", *p)
}

// Attributes:
//  - Login
type AccumuloProxyGetSystemConfigurationArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
}

func NewAccumuloProxyGetSystemConfigurationArgs() *AccumuloProxyGetSystemConfigurationArgs {
	return &AccumuloProxyGetSystemConfigurationArgs{}
}

func (p *AccumuloProxyGetSystemConfigurationArgs) GetLogin() []byte {
	return p.Login
}
func (p *AccumuloProxyGetSystemConfigurationArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSystemConfiguration_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetSystemConfigurationArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetSystemConfigurationArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyGetSystemConfigurationResult struct {
	Success map[string]string          `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyGetSystemConfigurationResult() *AccumuloProxyGetSystemConfigurationResult {
	return &AccumuloProxyGetSystemConfigurationResult{}
}

var AccumuloProxyGetSystemConfigurationResult_Success_DEFAULT map[string]string

func (p *AccumuloProxyGetSystemConfigurationResult) GetSuccess() map[string]string {
	return p.Success
}

var AccumuloProxyGetSystemConfigurationResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetSystemConfigurationResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetSystemConfigurationResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetSystemConfigurationResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetSystemConfigurationResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetSystemConfigurationResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyGetSystemConfigurationResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key211 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key211 = v
		}
		var _val212 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val212 = v
		}
		p.Success[_key211] = _val212
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getSystemConfiguration_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetSystemConfigurationResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetSystemConfigurationResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetSystemConfigurationResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetSystemConfigurationResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetSystemConfigurationResult(%+v)", *p)
}

// Attributes:
//  - Login
type AccumuloProxyGetTabletServersArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
}

func NewAccumuloProxyGetTabletServersArgs() *AccumuloProxyGetTabletServersArgs {
	return &AccumuloProxyGetTabletServersArgs{}
}

func (p *AccumuloProxyGetTabletServersArgs) GetLogin() []byte {
	return p.Login
}
func (p *AccumuloProxyGetTabletServersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetTabletServersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetTabletServersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTabletServers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetTabletServersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetTabletServersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetTabletServersArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccumuloProxyGetTabletServersResult struct {
	Success []string `thrift:"success,0" json:"success,omitempty"`
}

func NewAccumuloProxyGetTabletServersResult() *AccumuloProxyGetTabletServersResult {
	return &AccumuloProxyGetTabletServersResult{}
}

var AccumuloProxyGetTabletServersResult_Success_DEFAULT []string

func (p *AccumuloProxyGetTabletServersResult) GetSuccess() []string {
	return p.Success
}
func (p *AccumuloProxyGetTabletServersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetTabletServersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetTabletServersResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]string, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem213 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem213 = v
		}
		p.Success = append(p.Success, _elem213)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetTabletServersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getTabletServers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetTabletServersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetTabletServersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetTabletServersResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Property
type AccumuloProxyRemovePropertyArgs struct {
	Login    []byte `thrift:"login,1" json:"login"`
	Property string `thrift:"property,2" json:"property"`
}

func NewAccumuloProxyRemovePropertyArgs() *AccumuloProxyRemovePropertyArgs {
	return &AccumuloProxyRemovePropertyArgs{}
}

func (p *AccumuloProxyRemovePropertyArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRemovePropertyArgs) GetProperty() string {
	return p.Property
}
func (p *AccumuloProxyRemovePropertyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Property = v
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeProperty_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemovePropertyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("property", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:property: ", p), err)
	}
	if err := oprot.WriteString(string(p.Property)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.property (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:property: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRemovePropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemovePropertyArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyRemovePropertyResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyRemovePropertyResult() *AccumuloProxyRemovePropertyResult {
	return &AccumuloProxyRemovePropertyResult{}
}

var AccumuloProxyRemovePropertyResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRemovePropertyResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRemovePropertyResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRemovePropertyResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRemovePropertyResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRemovePropertyResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyRemovePropertyResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRemovePropertyResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRemovePropertyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("removeProperty_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRemovePropertyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemovePropertyResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRemovePropertyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRemovePropertyResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - Property
//  - Value
type AccumuloProxySetPropertyArgs struct {
	Login    []byte `thrift:"login,1" json:"login"`
	Property string `thrift:"property,2" json:"property"`
	Value    string `thrift:"value,3" json:"value"`
}

func NewAccumuloProxySetPropertyArgs() *AccumuloProxySetPropertyArgs {
	return &AccumuloProxySetPropertyArgs{}
}

func (p *AccumuloProxySetPropertyArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxySetPropertyArgs) GetProperty() string {
	return p.Property
}

func (p *AccumuloProxySetPropertyArgs) GetValue() string {
	return p.Value
}
func (p *AccumuloProxySetPropertyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySetPropertyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxySetPropertyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Property = v
	}
	return nil
}

func (p *AccumuloProxySetPropertyArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Value = v
	}
	return nil
}

func (p *AccumuloProxySetPropertyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setProperty_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySetPropertyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetPropertyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("property", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:property: ", p), err)
	}
	if err := oprot.WriteString(string(p.Property)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.property (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:property: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetPropertyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("value", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:value: ", p), err)
	}
	if err := oprot.WriteString(string(p.Value)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.value (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:value: ", p), err)
	}
	return err
}

func (p *AccumuloProxySetPropertyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySetPropertyArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxySetPropertyResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxySetPropertyResult() *AccumuloProxySetPropertyResult {
	return &AccumuloProxySetPropertyResult{}
}

var AccumuloProxySetPropertyResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxySetPropertyResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxySetPropertyResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxySetPropertyResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxySetPropertyResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxySetPropertyResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxySetPropertyResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxySetPropertyResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxySetPropertyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxySetPropertyResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxySetPropertyResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxySetPropertyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("setProperty_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxySetPropertyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetPropertyResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxySetPropertyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxySetPropertyResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - ClassName
//  - AsTypeName
type AccumuloProxyTestClassLoadArgs struct {
	Login      []byte `thrift:"login,1" json:"login"`
	ClassName  string `thrift:"className,2" json:"className"`
	AsTypeName string `thrift:"asTypeName,3" json:"asTypeName"`
}

func NewAccumuloProxyTestClassLoadArgs() *AccumuloProxyTestClassLoadArgs {
	return &AccumuloProxyTestClassLoadArgs{}
}

func (p *AccumuloProxyTestClassLoadArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyTestClassLoadArgs) GetClassName() string {
	return p.ClassName
}

func (p *AccumuloProxyTestClassLoadArgs) GetAsTypeName() string {
	return p.AsTypeName
}
func (p *AccumuloProxyTestClassLoadArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.ClassName = v
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.AsTypeName = v
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testClassLoad_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestClassLoadArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("className", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:className: ", p), err)
	}
	if err := oprot.WriteString(string(p.ClassName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.className (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:className: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestClassLoadArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("asTypeName", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:asTypeName: ", p), err)
	}
	if err := oprot.WriteString(string(p.AsTypeName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.asTypeName (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:asTypeName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyTestClassLoadArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTestClassLoadArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyTestClassLoadResult struct {
	Success *bool                      `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyTestClassLoadResult() *AccumuloProxyTestClassLoadResult {
	return &AccumuloProxyTestClassLoadResult{}
}

var AccumuloProxyTestClassLoadResult_Success_DEFAULT bool

func (p *AccumuloProxyTestClassLoadResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyTestClassLoadResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyTestClassLoadResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyTestClassLoadResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyTestClassLoadResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyTestClassLoadResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyTestClassLoadResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyTestClassLoadResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyTestClassLoadResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyTestClassLoadResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyTestClassLoadResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyTestClassLoadResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("testClassLoad_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyTestClassLoadResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestClassLoadResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestClassLoadResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyTestClassLoadResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyTestClassLoadResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Properties
type AccumuloProxyAuthenticateUserArgs struct {
	Login      []byte            `thrift:"login,1" json:"login"`
	User       string            `thrift:"user,2" json:"user"`
	Properties map[string]string `thrift:"properties,3" json:"properties"`
}

func NewAccumuloProxyAuthenticateUserArgs() *AccumuloProxyAuthenticateUserArgs {
	return &AccumuloProxyAuthenticateUserArgs{}
}

func (p *AccumuloProxyAuthenticateUserArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyAuthenticateUserArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyAuthenticateUserArgs) GetProperties() map[string]string {
	return p.Properties
}
func (p *AccumuloProxyAuthenticateUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserArgs) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.Properties = tMap
	for i := 0; i < size; i++ {
		var _key214 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key214 = v
		}
		var _val215 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val215 = v
		}
		p.Properties[_key214] = _val215
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAuthenticateUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAuthenticateUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("properties", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:properties: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Properties)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Properties {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:properties: ", p), err)
	}
	return err
}

func (p *AccumuloProxyAuthenticateUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAuthenticateUserArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyAuthenticateUserResult struct {
	Success *bool                      `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyAuthenticateUserResult() *AccumuloProxyAuthenticateUserResult {
	return &AccumuloProxyAuthenticateUserResult{}
}

var AccumuloProxyAuthenticateUserResult_Success_DEFAULT bool

func (p *AccumuloProxyAuthenticateUserResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyAuthenticateUserResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyAuthenticateUserResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyAuthenticateUserResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyAuthenticateUserResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyAuthenticateUserResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyAuthenticateUserResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyAuthenticateUserResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyAuthenticateUserResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyAuthenticateUserResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyAuthenticateUserResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyAuthenticateUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("authenticateUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyAuthenticateUserResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAuthenticateUserResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAuthenticateUserResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyAuthenticateUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyAuthenticateUserResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Authorizations
type AccumuloProxyChangeUserAuthorizationsArgs struct {
	Login          []byte          `thrift:"login,1" json:"login"`
	User           string          `thrift:"user,2" json:"user"`
	Authorizations map[string]bool `thrift:"authorizations,3" json:"authorizations"`
}

func NewAccumuloProxyChangeUserAuthorizationsArgs() *AccumuloProxyChangeUserAuthorizationsArgs {
	return &AccumuloProxyChangeUserAuthorizationsArgs{}
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) GetAuthorizations() map[string]bool {
	return p.Authorizations
}
func (p *AccumuloProxyChangeUserAuthorizationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Authorizations = tSet
	for i := 0; i < size; i++ {
		var _elem216 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem216 = v
		}
		p.Authorizations[string(_elem216)] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeUserAuthorizations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("authorizations", thrift.SET, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:authorizations: ", p), err)
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.Authorizations)); err != nil {
		return thrift.PrependError("error writing set begin: ", err)
	}
	for v, _ := range p.Authorizations {
		if err := oprot.WriteBinary([]byte(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return thrift.PrependError("error writing set end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:authorizations: ", p), err)
	}
	return err
}

func (p *AccumuloProxyChangeUserAuthorizationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyChangeUserAuthorizationsArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyChangeUserAuthorizationsResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyChangeUserAuthorizationsResult() *AccumuloProxyChangeUserAuthorizationsResult {
	return &AccumuloProxyChangeUserAuthorizationsResult{}
}

var AccumuloProxyChangeUserAuthorizationsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyChangeUserAuthorizationsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyChangeUserAuthorizationsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyChangeUserAuthorizationsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyChangeUserAuthorizationsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyChangeUserAuthorizationsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyChangeUserAuthorizationsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeUserAuthorizations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyChangeUserAuthorizationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyChangeUserAuthorizationsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Password
type AccumuloProxyChangeLocalUserPasswordArgs struct {
	Login    []byte `thrift:"login,1" json:"login"`
	User     string `thrift:"user,2" json:"user"`
	Password []byte `thrift:"password,3" json:"password"`
}

func NewAccumuloProxyChangeLocalUserPasswordArgs() *AccumuloProxyChangeLocalUserPasswordArgs {
	return &AccumuloProxyChangeLocalUserPasswordArgs{}
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) GetPassword() []byte {
	return p.Password
}
func (p *AccumuloProxyChangeLocalUserPasswordArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeLocalUserPassword_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteBinary(p.Password); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *AccumuloProxyChangeLocalUserPasswordArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyChangeLocalUserPasswordArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyChangeLocalUserPasswordResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyChangeLocalUserPasswordResult() *AccumuloProxyChangeLocalUserPasswordResult {
	return &AccumuloProxyChangeLocalUserPasswordResult{}
}

var AccumuloProxyChangeLocalUserPasswordResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyChangeLocalUserPasswordResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyChangeLocalUserPasswordResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyChangeLocalUserPasswordResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyChangeLocalUserPasswordResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyChangeLocalUserPasswordResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyChangeLocalUserPasswordResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("changeLocalUserPassword_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyChangeLocalUserPasswordResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyChangeLocalUserPasswordResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Password
type AccumuloProxyCreateLocalUserArgs struct {
	Login    []byte `thrift:"login,1" json:"login"`
	User     string `thrift:"user,2" json:"user"`
	Password []byte `thrift:"password,3" json:"password"`
}

func NewAccumuloProxyCreateLocalUserArgs() *AccumuloProxyCreateLocalUserArgs {
	return &AccumuloProxyCreateLocalUserArgs{}
}

func (p *AccumuloProxyCreateLocalUserArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCreateLocalUserArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyCreateLocalUserArgs) GetPassword() []byte {
	return p.Password
}
func (p *AccumuloProxyCreateLocalUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Password = v
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLocalUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateLocalUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateLocalUserArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("password", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:password: ", p), err)
	}
	if err := oprot.WriteBinary(p.Password); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.password (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:password: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateLocalUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateLocalUserArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyCreateLocalUserResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyCreateLocalUserResult() *AccumuloProxyCreateLocalUserResult {
	return &AccumuloProxyCreateLocalUserResult{}
}

var AccumuloProxyCreateLocalUserResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCreateLocalUserResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCreateLocalUserResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCreateLocalUserResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCreateLocalUserResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCreateLocalUserResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyCreateLocalUserResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCreateLocalUserResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCreateLocalUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createLocalUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateLocalUserResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateLocalUserResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateLocalUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateLocalUserResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
type AccumuloProxyDropLocalUserArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
	User  string `thrift:"user,2" json:"user"`
}

func NewAccumuloProxyDropLocalUserArgs() *AccumuloProxyDropLocalUserArgs {
	return &AccumuloProxyDropLocalUserArgs{}
}

func (p *AccumuloProxyDropLocalUserArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyDropLocalUserArgs) GetUser() string {
	return p.User
}
func (p *AccumuloProxyDropLocalUserArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dropLocalUser_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDropLocalUserArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyDropLocalUserArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyDropLocalUserArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyDropLocalUserResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyDropLocalUserResult() *AccumuloProxyDropLocalUserResult {
	return &AccumuloProxyDropLocalUserResult{}
}

var AccumuloProxyDropLocalUserResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyDropLocalUserResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyDropLocalUserResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyDropLocalUserResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyDropLocalUserResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyDropLocalUserResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyDropLocalUserResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyDropLocalUserResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyDropLocalUserResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("dropLocalUser_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyDropLocalUserResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDropLocalUserResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyDropLocalUserResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyDropLocalUserResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
type AccumuloProxyGetUserAuthorizationsArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
	User  string `thrift:"user,2" json:"user"`
}

func NewAccumuloProxyGetUserAuthorizationsArgs() *AccumuloProxyGetUserAuthorizationsArgs {
	return &AccumuloProxyGetUserAuthorizationsArgs{}
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) GetUser() string {
	return p.User
}
func (p *AccumuloProxyGetUserAuthorizationsArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAuthorizations_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetUserAuthorizationsArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetUserAuthorizationsArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyGetUserAuthorizationsResult struct {
	Success [][]byte                   `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyGetUserAuthorizationsResult() *AccumuloProxyGetUserAuthorizationsResult {
	return &AccumuloProxyGetUserAuthorizationsResult{}
}

var AccumuloProxyGetUserAuthorizationsResult_Success_DEFAULT [][]byte

func (p *AccumuloProxyGetUserAuthorizationsResult) GetSuccess() [][]byte {
	return p.Success
}

var AccumuloProxyGetUserAuthorizationsResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGetUserAuthorizationsResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGetUserAuthorizationsResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGetUserAuthorizationsResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGetUserAuthorizationsResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGetUserAuthorizationsResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyGetUserAuthorizationsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([][]byte, 0, size)
	p.Success = tSlice
	for i := 0; i < size; i++ {
		var _elem217 []byte
		if v, err := iprot.ReadBinary(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem217 = v
		}
		p.Success = append(p.Success, _elem217)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getUserAuthorizations_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetUserAuthorizationsResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range p.Success {
			if err := oprot.WriteBinary(v); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetUserAuthorizationsResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetUserAuthorizationsResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetUserAuthorizationsResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetUserAuthorizationsResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Perm
type AccumuloProxyGrantSystemPermissionArgs struct {
	Login []byte           `thrift:"login,1" json:"login"`
	User  string           `thrift:"user,2" json:"user"`
	Perm  SystemPermission `thrift:"perm,3" json:"perm"`
}

func NewAccumuloProxyGrantSystemPermissionArgs() *AccumuloProxyGrantSystemPermissionArgs {
	return &AccumuloProxyGrantSystemPermissionArgs{}
}

func (p *AccumuloProxyGrantSystemPermissionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGrantSystemPermissionArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyGrantSystemPermissionArgs) GetPerm() SystemPermission {
	return p.Perm
}
func (p *AccumuloProxyGrantSystemPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := SystemPermission(v)
		p.Perm = temp
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grantSystemPermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantSystemPermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantSystemPermissionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("perm", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:perm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Perm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.perm (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:perm: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantSystemPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGrantSystemPermissionArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyGrantSystemPermissionResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyGrantSystemPermissionResult() *AccumuloProxyGrantSystemPermissionResult {
	return &AccumuloProxyGrantSystemPermissionResult{}
}

var AccumuloProxyGrantSystemPermissionResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGrantSystemPermissionResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGrantSystemPermissionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGrantSystemPermissionResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGrantSystemPermissionResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGrantSystemPermissionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyGrantSystemPermissionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGrantSystemPermissionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGrantSystemPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grantSystemPermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGrantSystemPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGrantSystemPermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGrantSystemPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGrantSystemPermissionResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Table
//  - Perm
type AccumuloProxyGrantTablePermissionArgs struct {
	Login []byte          `thrift:"login,1" json:"login"`
	User  string          `thrift:"user,2" json:"user"`
	Table string          `thrift:"table,3" json:"table"`
	Perm  TablePermission `thrift:"perm,4" json:"perm"`
}

func NewAccumuloProxyGrantTablePermissionArgs() *AccumuloProxyGrantTablePermissionArgs {
	return &AccumuloProxyGrantTablePermissionArgs{}
}

func (p *AccumuloProxyGrantTablePermissionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyGrantTablePermissionArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyGrantTablePermissionArgs) GetTable() string {
	return p.Table
}

func (p *AccumuloProxyGrantTablePermissionArgs) GetPerm() TablePermission {
	return p.Perm
}
func (p *AccumuloProxyGrantTablePermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Table = v
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TablePermission(v)
		p.Perm = temp
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grantTablePermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("perm", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:perm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Perm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.perm (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:perm: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGrantTablePermissionArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyGrantTablePermissionResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyGrantTablePermissionResult() *AccumuloProxyGrantTablePermissionResult {
	return &AccumuloProxyGrantTablePermissionResult{}
}

var AccumuloProxyGrantTablePermissionResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyGrantTablePermissionResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyGrantTablePermissionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyGrantTablePermissionResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyGrantTablePermissionResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyGrantTablePermissionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyGrantTablePermissionResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyGrantTablePermissionResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyGrantTablePermissionResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyGrantTablePermissionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyGrantTablePermissionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyGrantTablePermissionResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyGrantTablePermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("grantTablePermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGrantTablePermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGrantTablePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGrantTablePermissionResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Perm
type AccumuloProxyHasSystemPermissionArgs struct {
	Login []byte           `thrift:"login,1" json:"login"`
	User  string           `thrift:"user,2" json:"user"`
	Perm  SystemPermission `thrift:"perm,3" json:"perm"`
}

func NewAccumuloProxyHasSystemPermissionArgs() *AccumuloProxyHasSystemPermissionArgs {
	return &AccumuloProxyHasSystemPermissionArgs{}
}

func (p *AccumuloProxyHasSystemPermissionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyHasSystemPermissionArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyHasSystemPermissionArgs) GetPerm() SystemPermission {
	return p.Perm
}
func (p *AccumuloProxyHasSystemPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := SystemPermission(v)
		p.Perm = temp
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasSystemPermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasSystemPermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasSystemPermissionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("perm", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:perm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Perm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.perm (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:perm: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasSystemPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyHasSystemPermissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
type AccumuloProxyHasSystemPermissionResult struct {
	Success *bool                      `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyHasSystemPermissionResult() *AccumuloProxyHasSystemPermissionResult {
	return &AccumuloProxyHasSystemPermissionResult{}
}

var AccumuloProxyHasSystemPermissionResult_Success_DEFAULT bool

func (p *AccumuloProxyHasSystemPermissionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyHasSystemPermissionResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyHasSystemPermissionResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyHasSystemPermissionResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyHasSystemPermissionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyHasSystemPermissionResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyHasSystemPermissionResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyHasSystemPermissionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyHasSystemPermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyHasSystemPermissionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyHasSystemPermissionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyHasSystemPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasSystemPermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyHasSystemPermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasSystemPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasSystemPermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasSystemPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyHasSystemPermissionResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Table
//  - Perm
type AccumuloProxyHasTablePermissionArgs struct {
	Login []byte          `thrift:"login,1" json:"login"`
	User  string          `thrift:"user,2" json:"user"`
	Table string          `thrift:"table,3" json:"table"`
	Perm  TablePermission `thrift:"perm,4" json:"perm"`
}

func NewAccumuloProxyHasTablePermissionArgs() *AccumuloProxyHasTablePermissionArgs {
	return &AccumuloProxyHasTablePermissionArgs{}
}

func (p *AccumuloProxyHasTablePermissionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyHasTablePermissionArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyHasTablePermissionArgs) GetTable() string {
	return p.Table
}

func (p *AccumuloProxyHasTablePermissionArgs) GetPerm() TablePermission {
	return p.Perm
}
func (p *AccumuloProxyHasTablePermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Table = v
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TablePermission(v)
		p.Perm = temp
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasTablePermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("perm", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:perm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Perm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.perm (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:perm: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyHasTablePermissionArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyHasTablePermissionResult struct {
	Success *bool                      `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyHasTablePermissionResult() *AccumuloProxyHasTablePermissionResult {
	return &AccumuloProxyHasTablePermissionResult{}
}

var AccumuloProxyHasTablePermissionResult_Success_DEFAULT bool

func (p *AccumuloProxyHasTablePermissionResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyHasTablePermissionResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyHasTablePermissionResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyHasTablePermissionResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyHasTablePermissionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyHasTablePermissionResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyHasTablePermissionResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyHasTablePermissionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyHasTablePermissionResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyHasTablePermissionResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyHasTablePermissionResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyHasTablePermissionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyHasTablePermissionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyHasTablePermissionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyHasTablePermissionResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyHasTablePermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasTablePermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyHasTablePermissionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasTablePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyHasTablePermissionResult(%+v)", *p)
}

// Attributes:
//  - Login
type AccumuloProxyListLocalUsersArgs struct {
	Login []byte `thrift:"login,1" json:"login"`
}

func NewAccumuloProxyListLocalUsersArgs() *AccumuloProxyListLocalUsersArgs {
	return &AccumuloProxyListLocalUsersArgs{}
}

func (p *AccumuloProxyListLocalUsersArgs) GetLogin() []byte {
	return p.Login
}
func (p *AccumuloProxyListLocalUsersArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listLocalUsers_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyListLocalUsersArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListLocalUsersArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyListLocalUsersResult struct {
	Success map[string]bool            `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyListLocalUsersResult() *AccumuloProxyListLocalUsersResult {
	return &AccumuloProxyListLocalUsersResult{}
}

var AccumuloProxyListLocalUsersResult_Success_DEFAULT map[string]bool

func (p *AccumuloProxyListLocalUsersResult) GetSuccess() map[string]bool {
	return p.Success
}

var AccumuloProxyListLocalUsersResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyListLocalUsersResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyListLocalUsersResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyListLocalUsersResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyListLocalUsersResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyListLocalUsersResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyListLocalUsersResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyListLocalUsersResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyListLocalUsersResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyListLocalUsersResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyListLocalUsersResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyListLocalUsersResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyListLocalUsersResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyListLocalUsersResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersResult) readField0(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return thrift.PrependError("error reading set begin: ", err)
	}
	tSet := make(map[string]bool, size)
	p.Success = tSet
	for i := 0; i < size; i++ {
		var _elem218 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_elem218 = v
		}
		p.Success[_elem218] = true
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return thrift.PrependError("error reading set end: ", err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("listLocalUsers_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyListLocalUsersResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
			return thrift.PrependError("error writing set begin: ", err)
		}
		for v, _ := range p.Success {
			if err := oprot.WriteString(string(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteSetEnd(); err != nil {
			return thrift.PrependError("error writing set end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListLocalUsersResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListLocalUsersResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListLocalUsersResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyListLocalUsersResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyListLocalUsersResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Perm
type AccumuloProxyRevokeSystemPermissionArgs struct {
	Login []byte           `thrift:"login,1" json:"login"`
	User  string           `thrift:"user,2" json:"user"`
	Perm  SystemPermission `thrift:"perm,3" json:"perm"`
}

func NewAccumuloProxyRevokeSystemPermissionArgs() *AccumuloProxyRevokeSystemPermissionArgs {
	return &AccumuloProxyRevokeSystemPermissionArgs{}
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) GetPerm() SystemPermission {
	return p.Perm
}
func (p *AccumuloProxyRevokeSystemPermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		temp := SystemPermission(v)
		p.Perm = temp
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeSystemPermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("perm", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:perm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Perm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.perm (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:perm: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeSystemPermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRevokeSystemPermissionArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyRevokeSystemPermissionResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyRevokeSystemPermissionResult() *AccumuloProxyRevokeSystemPermissionResult {
	return &AccumuloProxyRevokeSystemPermissionResult{}
}

var AccumuloProxyRevokeSystemPermissionResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRevokeSystemPermissionResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRevokeSystemPermissionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRevokeSystemPermissionResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRevokeSystemPermissionResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRevokeSystemPermissionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyRevokeSystemPermissionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRevokeSystemPermissionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRevokeSystemPermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeSystemPermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRevokeSystemPermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRevokeSystemPermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRevokeSystemPermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRevokeSystemPermissionResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - User
//  - Table
//  - Perm
type AccumuloProxyRevokeTablePermissionArgs struct {
	Login []byte          `thrift:"login,1" json:"login"`
	User  string          `thrift:"user,2" json:"user"`
	Table string          `thrift:"table,3" json:"table"`
	Perm  TablePermission `thrift:"perm,4" json:"perm"`
}

func NewAccumuloProxyRevokeTablePermissionArgs() *AccumuloProxyRevokeTablePermissionArgs {
	return &AccumuloProxyRevokeTablePermissionArgs{}
}

func (p *AccumuloProxyRevokeTablePermissionArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyRevokeTablePermissionArgs) GetUser() string {
	return p.User
}

func (p *AccumuloProxyRevokeTablePermissionArgs) GetTable() string {
	return p.Table
}

func (p *AccumuloProxyRevokeTablePermissionArgs) GetPerm() TablePermission {
	return p.Perm
}
func (p *AccumuloProxyRevokeTablePermissionArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.User = v
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Table = v
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		temp := TablePermission(v)
		p.Perm = temp
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeTablePermission_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("user", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:user: ", p), err)
	}
	if err := oprot.WriteString(string(p.User)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.user (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:user: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("table", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err)
	}
	if err := oprot.WriteString(string(p.Table)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("perm", thrift.I32, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:perm: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Perm)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.perm (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:perm: ", p), err)
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRevokeTablePermissionArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyRevokeTablePermissionResult struct {
	Ouch1 *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3 *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyRevokeTablePermissionResult() *AccumuloProxyRevokeTablePermissionResult {
	return &AccumuloProxyRevokeTablePermissionResult{}
}

var AccumuloProxyRevokeTablePermissionResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyRevokeTablePermissionResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyRevokeTablePermissionResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyRevokeTablePermissionResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyRevokeTablePermissionResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyRevokeTablePermissionResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyRevokeTablePermissionResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyRevokeTablePermissionResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyRevokeTablePermissionResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyRevokeTablePermissionResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("revokeTablePermission_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyRevokeTablePermissionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyRevokeTablePermissionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyRevokeTablePermissionResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Options
type AccumuloProxyCreateBatchScannerArgs struct {
	Login     []byte            `thrift:"login,1" json:"login"`
	TableName string            `thrift:"tableName,2" json:"tableName"`
	Options   *BatchScanOptions `thrift:"options,3" json:"options"`
}

func NewAccumuloProxyCreateBatchScannerArgs() *AccumuloProxyCreateBatchScannerArgs {
	return &AccumuloProxyCreateBatchScannerArgs{}
}

func (p *AccumuloProxyCreateBatchScannerArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCreateBatchScannerArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxyCreateBatchScannerArgs_Options_DEFAULT *BatchScanOptions

func (p *AccumuloProxyCreateBatchScannerArgs) GetOptions() *BatchScanOptions {
	if !p.IsSetOptions() {
		return AccumuloProxyCreateBatchScannerArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *AccumuloProxyCreateBatchScannerArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *AccumuloProxyCreateBatchScannerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerArgs) readField3(iprot thrift.TProtocol) error {
	p.Options = &BatchScanOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createBatchScanner_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:options: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateBatchScannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCreateBatchScannerResult struct {
	Success *string                    `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCreateBatchScannerResult() *AccumuloProxyCreateBatchScannerResult {
	return &AccumuloProxyCreateBatchScannerResult{}
}

var AccumuloProxyCreateBatchScannerResult_Success_DEFAULT string

func (p *AccumuloProxyCreateBatchScannerResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AccumuloProxyCreateBatchScannerResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyCreateBatchScannerResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCreateBatchScannerResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCreateBatchScannerResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCreateBatchScannerResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCreateBatchScannerResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCreateBatchScannerResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCreateBatchScannerResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCreateBatchScannerResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCreateBatchScannerResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCreateBatchScannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyCreateBatchScannerResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCreateBatchScannerResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCreateBatchScannerResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCreateBatchScannerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createBatchScanner_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateBatchScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateBatchScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateBatchScannerResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Options
type AccumuloProxyCreateScannerArgs struct {
	Login     []byte       `thrift:"login,1" json:"login"`
	TableName string       `thrift:"tableName,2" json:"tableName"`
	Options   *ScanOptions `thrift:"options,3" json:"options"`
}

func NewAccumuloProxyCreateScannerArgs() *AccumuloProxyCreateScannerArgs {
	return &AccumuloProxyCreateScannerArgs{}
}

func (p *AccumuloProxyCreateScannerArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCreateScannerArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxyCreateScannerArgs_Options_DEFAULT *ScanOptions

func (p *AccumuloProxyCreateScannerArgs) GetOptions() *ScanOptions {
	if !p.IsSetOptions() {
		return AccumuloProxyCreateScannerArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *AccumuloProxyCreateScannerArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *AccumuloProxyCreateScannerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCreateScannerArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCreateScannerArgs) readField3(iprot thrift.TProtocol) error {
	p.Options = &ScanOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createScanner_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateScannerArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateScannerArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:options: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateScannerArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCreateScannerResult struct {
	Success *string                    `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCreateScannerResult() *AccumuloProxyCreateScannerResult {
	return &AccumuloProxyCreateScannerResult{}
}

var AccumuloProxyCreateScannerResult_Success_DEFAULT string

func (p *AccumuloProxyCreateScannerResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AccumuloProxyCreateScannerResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyCreateScannerResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCreateScannerResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCreateScannerResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCreateScannerResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCreateScannerResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCreateScannerResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCreateScannerResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCreateScannerResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCreateScannerResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCreateScannerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyCreateScannerResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCreateScannerResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCreateScannerResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCreateScannerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyCreateScannerResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createScanner_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateScannerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateScannerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateScannerResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateScannerResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateScannerResult(%+v)", *p)
}

// Attributes:
//  - Scanner
type AccumuloProxyHasNextArgs struct {
	Scanner string `thrift:"scanner,1" json:"scanner"`
}

func NewAccumuloProxyHasNextArgs() *AccumuloProxyHasNextArgs {
	return &AccumuloProxyHasNextArgs{}
}

func (p *AccumuloProxyHasNextArgs) GetScanner() string {
	return p.Scanner
}
func (p *AccumuloProxyHasNextArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyHasNextArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Scanner = v
	}
	return nil
}

func (p *AccumuloProxyHasNextArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasNext_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyHasNextArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scanner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scanner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Scanner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scanner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scanner: ", p), err)
	}
	return err
}

func (p *AccumuloProxyHasNextArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyHasNextArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
type AccumuloProxyHasNextResult struct {
	Success *bool           `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *UnknownScanner `thrift:"ouch1,1" json:"ouch1,omitempty"`
}

func NewAccumuloProxyHasNextResult() *AccumuloProxyHasNextResult {
	return &AccumuloProxyHasNextResult{}
}

var AccumuloProxyHasNextResult_Success_DEFAULT bool

func (p *AccumuloProxyHasNextResult) GetSuccess() bool {
	if !p.IsSetSuccess() {
		return AccumuloProxyHasNextResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyHasNextResult_Ouch1_DEFAULT *UnknownScanner

func (p *AccumuloProxyHasNextResult) GetOuch1() *UnknownScanner {
	if !p.IsSetOuch1() {
		return AccumuloProxyHasNextResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}
func (p *AccumuloProxyHasNextResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyHasNextResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyHasNextResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyHasNextResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyHasNextResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &UnknownScanner{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyHasNextResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("hasNext_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyHasNextResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteBool(bool(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasNextResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyHasNextResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyHasNextResult(%+v)", *p)
}

// Attributes:
//  - Scanner
type AccumuloProxyNextEntryArgs struct {
	Scanner string `thrift:"scanner,1" json:"scanner"`
}

func NewAccumuloProxyNextEntryArgs() *AccumuloProxyNextEntryArgs {
	return &AccumuloProxyNextEntryArgs{}
}

func (p *AccumuloProxyNextEntryArgs) GetScanner() string {
	return p.Scanner
}
func (p *AccumuloProxyNextEntryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Scanner = v
	}
	return nil
}

func (p *AccumuloProxyNextEntryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("nextEntry_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scanner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scanner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Scanner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scanner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scanner: ", p), err)
	}
	return err
}

func (p *AccumuloProxyNextEntryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyNextEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyNextEntryResult struct {
	Success *KeyValueAndPeek           `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *NoMoreEntriesException    `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *UnknownScanner            `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *AccumuloSecurityException `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyNextEntryResult() *AccumuloProxyNextEntryResult {
	return &AccumuloProxyNextEntryResult{}
}

var AccumuloProxyNextEntryResult_Success_DEFAULT *KeyValueAndPeek

func (p *AccumuloProxyNextEntryResult) GetSuccess() *KeyValueAndPeek {
	if !p.IsSetSuccess() {
		return AccumuloProxyNextEntryResult_Success_DEFAULT
	}
	return p.Success
}

var AccumuloProxyNextEntryResult_Ouch1_DEFAULT *NoMoreEntriesException

func (p *AccumuloProxyNextEntryResult) GetOuch1() *NoMoreEntriesException {
	if !p.IsSetOuch1() {
		return AccumuloProxyNextEntryResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyNextEntryResult_Ouch2_DEFAULT *UnknownScanner

func (p *AccumuloProxyNextEntryResult) GetOuch2() *UnknownScanner {
	if !p.IsSetOuch2() {
		return AccumuloProxyNextEntryResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyNextEntryResult_Ouch3_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyNextEntryResult) GetOuch3() *AccumuloSecurityException {
	if !p.IsSetOuch3() {
		return AccumuloProxyNextEntryResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyNextEntryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyNextEntryResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyNextEntryResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyNextEntryResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyNextEntryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &KeyValueAndPeek{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &NoMoreEntriesException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &UnknownScanner{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloSecurityException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("nextEntry_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyNextEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextEntryResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextEntryResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextEntryResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextEntryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyNextEntryResult(%+v)", *p)
}

// Attributes:
//  - Scanner
//  - K
type AccumuloProxyNextKArgs struct {
	Scanner string `thrift:"scanner,1" json:"scanner"`
	K       int32  `thrift:"k,2" json:"k"`
}

func NewAccumuloProxyNextKArgs() *AccumuloProxyNextKArgs {
	return &AccumuloProxyNextKArgs{}
}

func (p *AccumuloProxyNextKArgs) GetScanner() string {
	return p.Scanner
}

func (p *AccumuloProxyNextKArgs) GetK() int32 {
	return p.K
}
func (p *AccumuloProxyNextKArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyNextKArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Scanner = v
	}
	return nil
}

func (p *AccumuloProxyNextKArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.K = v
	}
	return nil
}

func (p *AccumuloProxyNextKArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("nextK_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyNextKArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scanner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scanner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Scanner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scanner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scanner: ", p), err)
	}
	return err
}

func (p *AccumuloProxyNextKArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("k", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:k: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.K)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.k (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:k: ", p), err)
	}
	return err
}

func (p *AccumuloProxyNextKArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyNextKArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyNextKResult struct {
	Success *ScanResult_               `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *NoMoreEntriesException    `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *UnknownScanner            `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *AccumuloSecurityException `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyNextKResult() *AccumuloProxyNextKResult {
	return &AccumuloProxyNextKResult{}
}

var AccumuloProxyNextKResult_Success_DEFAULT *ScanResult_

func (p *AccumuloProxyNextKResult) GetSuccess() *ScanResult_ {
	if !p.IsSetSuccess() {
		return AccumuloProxyNextKResult_Success_DEFAULT
	}
	return p.Success
}

var AccumuloProxyNextKResult_Ouch1_DEFAULT *NoMoreEntriesException

func (p *AccumuloProxyNextKResult) GetOuch1() *NoMoreEntriesException {
	if !p.IsSetOuch1() {
		return AccumuloProxyNextKResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyNextKResult_Ouch2_DEFAULT *UnknownScanner

func (p *AccumuloProxyNextKResult) GetOuch2() *UnknownScanner {
	if !p.IsSetOuch2() {
		return AccumuloProxyNextKResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyNextKResult_Ouch3_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyNextKResult) GetOuch3() *AccumuloSecurityException {
	if !p.IsSetOuch3() {
		return AccumuloProxyNextKResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyNextKResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyNextKResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyNextKResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyNextKResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyNextKResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyNextKResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &ScanResult_{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccumuloProxyNextKResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &NoMoreEntriesException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyNextKResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &UnknownScanner{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyNextKResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloSecurityException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyNextKResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("nextK_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyNextKResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextKResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextKResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextKResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyNextKResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyNextKResult(%+v)", *p)
}

// Attributes:
//  - Scanner
type AccumuloProxyCloseScannerArgs struct {
	Scanner string `thrift:"scanner,1" json:"scanner"`
}

func NewAccumuloProxyCloseScannerArgs() *AccumuloProxyCloseScannerArgs {
	return &AccumuloProxyCloseScannerArgs{}
}

func (p *AccumuloProxyCloseScannerArgs) GetScanner() string {
	return p.Scanner
}
func (p *AccumuloProxyCloseScannerArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloseScannerArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Scanner = v
	}
	return nil
}

func (p *AccumuloProxyCloseScannerArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeScanner_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloseScannerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("scanner", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scanner: ", p), err)
	}
	if err := oprot.WriteString(string(p.Scanner)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.scanner (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scanner: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloseScannerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloseScannerArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
type AccumuloProxyCloseScannerResult struct {
	Ouch1 *UnknownScanner `thrift:"ouch1,1" json:"ouch1,omitempty"`
}

func NewAccumuloProxyCloseScannerResult() *AccumuloProxyCloseScannerResult {
	return &AccumuloProxyCloseScannerResult{}
}

var AccumuloProxyCloseScannerResult_Ouch1_DEFAULT *UnknownScanner

func (p *AccumuloProxyCloseScannerResult) GetOuch1() *UnknownScanner {
	if !p.IsSetOuch1() {
		return AccumuloProxyCloseScannerResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}
func (p *AccumuloProxyCloseScannerResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCloseScannerResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloseScannerResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &UnknownScanner{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCloseScannerResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeScanner_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloseScannerResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloseScannerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloseScannerResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Cells
type AccumuloProxyUpdateAndFlushArgs struct {
	Login     []byte                     `thrift:"login,1" json:"login"`
	TableName string                     `thrift:"tableName,2" json:"tableName"`
	Cells     map[string][]*ColumnUpdate `thrift:"cells,3" json:"cells"`
}

func NewAccumuloProxyUpdateAndFlushArgs() *AccumuloProxyUpdateAndFlushArgs {
	return &AccumuloProxyUpdateAndFlushArgs{}
}

func (p *AccumuloProxyUpdateAndFlushArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyUpdateAndFlushArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyUpdateAndFlushArgs) GetCells() map[string][]*ColumnUpdate {
	return p.Cells
}
func (p *AccumuloProxyUpdateAndFlushArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushArgs) readField3(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]*ColumnUpdate, size)
	p.Cells = tMap
	for i := 0; i < size; i++ {
		var _key219 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key219 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*ColumnUpdate, 0, size)
		_val220 := tSlice
		for i := 0; i < size; i++ {
			_elem221 := &ColumnUpdate{}
			if err := _elem221.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem221), err)
			}
			_val220 = append(_val220, _elem221)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Cells[_key219] = _val220
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateAndFlush_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cells", thrift.MAP, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cells: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Cells)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Cells {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cells: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateAndFlushArgs(%+v)", *p)
}

// Attributes:
//  - Outch1
//  - Ouch2
//  - Ouch3
//  - Ouch4
type AccumuloProxyUpdateAndFlushResult struct {
	Outch1 *AccumuloException          `thrift:"outch1,1" json:"outch1,omitempty"`
	Ouch2  *AccumuloSecurityException  `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3  *TableNotFoundException     `thrift:"ouch3,3" json:"ouch3,omitempty"`
	Ouch4  *MutationsRejectedException `thrift:"ouch4,4" json:"ouch4,omitempty"`
}

func NewAccumuloProxyUpdateAndFlushResult() *AccumuloProxyUpdateAndFlushResult {
	return &AccumuloProxyUpdateAndFlushResult{}
}

var AccumuloProxyUpdateAndFlushResult_Outch1_DEFAULT *AccumuloException

func (p *AccumuloProxyUpdateAndFlushResult) GetOutch1() *AccumuloException {
	if !p.IsSetOutch1() {
		return AccumuloProxyUpdateAndFlushResult_Outch1_DEFAULT
	}
	return p.Outch1
}

var AccumuloProxyUpdateAndFlushResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyUpdateAndFlushResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyUpdateAndFlushResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyUpdateAndFlushResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyUpdateAndFlushResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyUpdateAndFlushResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}

var AccumuloProxyUpdateAndFlushResult_Ouch4_DEFAULT *MutationsRejectedException

func (p *AccumuloProxyUpdateAndFlushResult) GetOuch4() *MutationsRejectedException {
	if !p.IsSetOuch4() {
		return AccumuloProxyUpdateAndFlushResult_Ouch4_DEFAULT
	}
	return p.Ouch4
}
func (p *AccumuloProxyUpdateAndFlushResult) IsSetOutch1() bool {
	return p.Outch1 != nil
}

func (p *AccumuloProxyUpdateAndFlushResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyUpdateAndFlushResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyUpdateAndFlushResult) IsSetOuch4() bool {
	return p.Ouch4 != nil
}

func (p *AccumuloProxyUpdateAndFlushResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushResult) readField1(iprot thrift.TProtocol) error {
	p.Outch1 = &AccumuloException{}
	if err := p.Outch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Outch1), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushResult) readField4(iprot thrift.TProtocol) error {
	p.Ouch4 = &MutationsRejectedException{}
	if err := p.Ouch4.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch4), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateAndFlush_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateAndFlushResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutch1() {
		if err := oprot.WriteFieldBegin("outch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outch1: ", p), err)
		}
		if err := p.Outch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Outch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushResult) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch4() {
		if err := oprot.WriteFieldBegin("ouch4", thrift.STRUCT, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:ouch4: ", p), err)
		}
		if err := p.Ouch4.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch4), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:ouch4: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateAndFlushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateAndFlushResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Opts
type AccumuloProxyCreateWriterArgs struct {
	Login     []byte         `thrift:"login,1" json:"login"`
	TableName string         `thrift:"tableName,2" json:"tableName"`
	Opts      *WriterOptions `thrift:"opts,3" json:"opts"`
}

func NewAccumuloProxyCreateWriterArgs() *AccumuloProxyCreateWriterArgs {
	return &AccumuloProxyCreateWriterArgs{}
}

func (p *AccumuloProxyCreateWriterArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCreateWriterArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxyCreateWriterArgs_Opts_DEFAULT *WriterOptions

func (p *AccumuloProxyCreateWriterArgs) GetOpts() *WriterOptions {
	if !p.IsSetOpts() {
		return AccumuloProxyCreateWriterArgs_Opts_DEFAULT
	}
	return p.Opts
}
func (p *AccumuloProxyCreateWriterArgs) IsSetOpts() bool {
	return p.Opts != nil
}

func (p *AccumuloProxyCreateWriterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCreateWriterArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCreateWriterArgs) readField3(iprot thrift.TProtocol) error {
	p.Opts = &WriterOptions{}
	if err := p.Opts.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Opts), err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createWriter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateWriterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateWriterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("opts", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:opts: ", p), err)
	}
	if err := p.Opts.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Opts), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:opts: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateWriterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateWriterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Outch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCreateWriterResult struct {
	Success *string                    `thrift:"success,0" json:"success,omitempty"`
	Outch1  *AccumuloException         `thrift:"outch1,1" json:"outch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCreateWriterResult() *AccumuloProxyCreateWriterResult {
	return &AccumuloProxyCreateWriterResult{}
}

var AccumuloProxyCreateWriterResult_Success_DEFAULT string

func (p *AccumuloProxyCreateWriterResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AccumuloProxyCreateWriterResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyCreateWriterResult_Outch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCreateWriterResult) GetOutch1() *AccumuloException {
	if !p.IsSetOutch1() {
		return AccumuloProxyCreateWriterResult_Outch1_DEFAULT
	}
	return p.Outch1
}

var AccumuloProxyCreateWriterResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCreateWriterResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCreateWriterResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCreateWriterResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCreateWriterResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCreateWriterResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCreateWriterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyCreateWriterResult) IsSetOutch1() bool {
	return p.Outch1 != nil
}

func (p *AccumuloProxyCreateWriterResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCreateWriterResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCreateWriterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyCreateWriterResult) readField1(iprot thrift.TProtocol) error {
	p.Outch1 = &AccumuloException{}
	if err := p.Outch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Outch1), err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createWriter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateWriterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateWriterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOutch1() {
		if err := oprot.WriteFieldBegin("outch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:outch1: ", p), err)
		}
		if err := p.Outch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Outch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:outch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateWriterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateWriterResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateWriterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateWriterResult(%+v)", *p)
}

// Attributes:
//  - Writer
//  - Cells
type AccumuloProxyUpdateArgs struct {
	Writer string                     `thrift:"writer,1" json:"writer"`
	Cells  map[string][]*ColumnUpdate `thrift:"cells,2" json:"cells"`
}

func NewAccumuloProxyUpdateArgs() *AccumuloProxyUpdateArgs {
	return &AccumuloProxyUpdateArgs{}
}

func (p *AccumuloProxyUpdateArgs) GetWriter() string {
	return p.Writer
}

func (p *AccumuloProxyUpdateArgs) GetCells() map[string][]*ColumnUpdate {
	return p.Cells
}
func (p *AccumuloProxyUpdateArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Writer = v
	}
	return nil
}

func (p *AccumuloProxyUpdateArgs) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string][]*ColumnUpdate, size)
	p.Cells = tMap
	for i := 0; i < size; i++ {
		var _key222 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key222 = v
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return thrift.PrependError("error reading list begin: ", err)
		}
		tSlice := make([]*ColumnUpdate, 0, size)
		_val223 := tSlice
		for i := 0; i < size; i++ {
			_elem224 := &ColumnUpdate{}
			if err := _elem224.Read(iprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem224), err)
			}
			_val223 = append(_val223, _elem224)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return thrift.PrependError("error reading list end: ", err)
		}
		p.Cells[_key222] = _val223
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("update_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("writer", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:writer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Writer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.writer (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:writer: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("cells", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cells: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.LIST, len(p.Cells)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Cells {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
			return thrift.PrependError("error writing list begin: ", err)
		}
		for _, v := range v {
			if err := v.Write(oprot); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return thrift.PrependError("error writing list end: ", err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cells: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateArgs(%+v)", *p)
}

// Attributes:
//  - Writer
type AccumuloProxyFlushArgs struct {
	Writer string `thrift:"writer,1" json:"writer"`
}

func NewAccumuloProxyFlushArgs() *AccumuloProxyFlushArgs {
	return &AccumuloProxyFlushArgs{}
}

func (p *AccumuloProxyFlushArgs) GetWriter() string {
	return p.Writer
}
func (p *AccumuloProxyFlushArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyFlushArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Writer = v
	}
	return nil
}

func (p *AccumuloProxyFlushArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("flush_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyFlushArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("writer", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:writer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Writer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.writer (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:writer: ", p), err)
	}
	return err
}

func (p *AccumuloProxyFlushArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyFlushArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyFlushResult struct {
	Ouch1 *UnknownWriter              `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *MutationsRejectedException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyFlushResult() *AccumuloProxyFlushResult {
	return &AccumuloProxyFlushResult{}
}

var AccumuloProxyFlushResult_Ouch1_DEFAULT *UnknownWriter

func (p *AccumuloProxyFlushResult) GetOuch1() *UnknownWriter {
	if !p.IsSetOuch1() {
		return AccumuloProxyFlushResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyFlushResult_Ouch2_DEFAULT *MutationsRejectedException

func (p *AccumuloProxyFlushResult) GetOuch2() *MutationsRejectedException {
	if !p.IsSetOuch2() {
		return AccumuloProxyFlushResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyFlushResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyFlushResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyFlushResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyFlushResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &UnknownWriter{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyFlushResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &MutationsRejectedException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyFlushResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("flush_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyFlushResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyFlushResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyFlushResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyFlushResult(%+v)", *p)
}

// Attributes:
//  - Writer
type AccumuloProxyCloseWriterArgs struct {
	Writer string `thrift:"writer,1" json:"writer"`
}

func NewAccumuloProxyCloseWriterArgs() *AccumuloProxyCloseWriterArgs {
	return &AccumuloProxyCloseWriterArgs{}
}

func (p *AccumuloProxyCloseWriterArgs) GetWriter() string {
	return p.Writer
}
func (p *AccumuloProxyCloseWriterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloseWriterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Writer = v
	}
	return nil
}

func (p *AccumuloProxyCloseWriterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeWriter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloseWriterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("writer", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:writer: ", p), err)
	}
	if err := oprot.WriteString(string(p.Writer)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.writer (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:writer: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloseWriterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloseWriterArgs(%+v)", *p)
}

// Attributes:
//  - Ouch1
//  - Ouch2
type AccumuloProxyCloseWriterResult struct {
	Ouch1 *UnknownWriter              `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2 *MutationsRejectedException `thrift:"ouch2,2" json:"ouch2,omitempty"`
}

func NewAccumuloProxyCloseWriterResult() *AccumuloProxyCloseWriterResult {
	return &AccumuloProxyCloseWriterResult{}
}

var AccumuloProxyCloseWriterResult_Ouch1_DEFAULT *UnknownWriter

func (p *AccumuloProxyCloseWriterResult) GetOuch1() *UnknownWriter {
	if !p.IsSetOuch1() {
		return AccumuloProxyCloseWriterResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCloseWriterResult_Ouch2_DEFAULT *MutationsRejectedException

func (p *AccumuloProxyCloseWriterResult) GetOuch2() *MutationsRejectedException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCloseWriterResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}
func (p *AccumuloProxyCloseWriterResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCloseWriterResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCloseWriterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloseWriterResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &UnknownWriter{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCloseWriterResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &MutationsRejectedException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCloseWriterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeWriter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloseWriterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloseWriterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCloseWriterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloseWriterResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Row
//  - Updates
type AccumuloProxyUpdateRowConditionallyArgs struct {
	Login     []byte              `thrift:"login,1" json:"login"`
	TableName string              `thrift:"tableName,2" json:"tableName"`
	Row       []byte              `thrift:"row,3" json:"row"`
	Updates   *ConditionalUpdates `thrift:"updates,4" json:"updates"`
}

func NewAccumuloProxyUpdateRowConditionallyArgs() *AccumuloProxyUpdateRowConditionallyArgs {
	return &AccumuloProxyUpdateRowConditionallyArgs{}
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) GetTableName() string {
	return p.TableName
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) GetRow() []byte {
	return p.Row
}

var AccumuloProxyUpdateRowConditionallyArgs_Updates_DEFAULT *ConditionalUpdates

func (p *AccumuloProxyUpdateRowConditionallyArgs) GetUpdates() *ConditionalUpdates {
	if !p.IsSetUpdates() {
		return AccumuloProxyUpdateRowConditionallyArgs_Updates_DEFAULT
	}
	return p.Updates
}
func (p *AccumuloProxyUpdateRowConditionallyArgs) IsSetUpdates() bool {
	return p.Updates != nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) readField4(iprot thrift.TProtocol) error {
	p.Updates = &ConditionalUpdates{}
	if err := p.Updates.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Updates), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateRowConditionally_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:row: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updates", thrift.STRUCT, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:updates: ", p), err)
	}
	if err := p.Updates.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Updates), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:updates: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateRowConditionallyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyUpdateRowConditionallyResult struct {
	Success *ConditionalStatus         `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyUpdateRowConditionallyResult() *AccumuloProxyUpdateRowConditionallyResult {
	return &AccumuloProxyUpdateRowConditionallyResult{}
}

var AccumuloProxyUpdateRowConditionallyResult_Success_DEFAULT ConditionalStatus

func (p *AccumuloProxyUpdateRowConditionallyResult) GetSuccess() ConditionalStatus {
	if !p.IsSetSuccess() {
		return AccumuloProxyUpdateRowConditionallyResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyUpdateRowConditionallyResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyUpdateRowConditionallyResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyUpdateRowConditionallyResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyUpdateRowConditionallyResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyUpdateRowConditionallyResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyUpdateRowConditionallyResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyUpdateRowConditionallyResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyUpdateRowConditionallyResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyUpdateRowConditionallyResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyUpdateRowConditionallyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		temp := ConditionalStatus(v)
		p.Success = &temp
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateRowConditionally_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowConditionallyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowConditionallyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateRowConditionallyResult(%+v)", *p)
}

// Attributes:
//  - Login
//  - TableName
//  - Options
type AccumuloProxyCreateConditionalWriterArgs struct {
	Login     []byte                    `thrift:"login,1" json:"login"`
	TableName string                    `thrift:"tableName,2" json:"tableName"`
	Options   *ConditionalWriterOptions `thrift:"options,3" json:"options"`
}

func NewAccumuloProxyCreateConditionalWriterArgs() *AccumuloProxyCreateConditionalWriterArgs {
	return &AccumuloProxyCreateConditionalWriterArgs{}
}

func (p *AccumuloProxyCreateConditionalWriterArgs) GetLogin() []byte {
	return p.Login
}

func (p *AccumuloProxyCreateConditionalWriterArgs) GetTableName() string {
	return p.TableName
}

var AccumuloProxyCreateConditionalWriterArgs_Options_DEFAULT *ConditionalWriterOptions

func (p *AccumuloProxyCreateConditionalWriterArgs) GetOptions() *ConditionalWriterOptions {
	if !p.IsSetOptions() {
		return AccumuloProxyCreateConditionalWriterArgs_Options_DEFAULT
	}
	return p.Options
}
func (p *AccumuloProxyCreateConditionalWriterArgs) IsSetOptions() bool {
	return p.Options != nil
}

func (p *AccumuloProxyCreateConditionalWriterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Login = v
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.TableName = v
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterArgs) readField3(iprot thrift.TProtocol) error {
	p.Options = &ConditionalWriterOptions{}
	if err := p.Options.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Options), err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConditionalWriter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("login", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:login: ", p), err)
	}
	if err := oprot.WriteBinary(p.Login); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.login (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:login: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("tableName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tableName: ", p), err)
	}
	if err := oprot.WriteString(string(p.TableName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.tableName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tableName: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("options", thrift.STRUCT, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:options: ", p), err)
	}
	if err := p.Options.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Options), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:options: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateConditionalWriterArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyCreateConditionalWriterResult struct {
	Success *string                    `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *AccumuloException         `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloSecurityException `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *TableNotFoundException    `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyCreateConditionalWriterResult() *AccumuloProxyCreateConditionalWriterResult {
	return &AccumuloProxyCreateConditionalWriterResult{}
}

var AccumuloProxyCreateConditionalWriterResult_Success_DEFAULT string

func (p *AccumuloProxyCreateConditionalWriterResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return AccumuloProxyCreateConditionalWriterResult_Success_DEFAULT
	}
	return *p.Success
}

var AccumuloProxyCreateConditionalWriterResult_Ouch1_DEFAULT *AccumuloException

func (p *AccumuloProxyCreateConditionalWriterResult) GetOuch1() *AccumuloException {
	if !p.IsSetOuch1() {
		return AccumuloProxyCreateConditionalWriterResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyCreateConditionalWriterResult_Ouch2_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyCreateConditionalWriterResult) GetOuch2() *AccumuloSecurityException {
	if !p.IsSetOuch2() {
		return AccumuloProxyCreateConditionalWriterResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyCreateConditionalWriterResult_Ouch3_DEFAULT *TableNotFoundException

func (p *AccumuloProxyCreateConditionalWriterResult) GetOuch3() *TableNotFoundException {
	if !p.IsSetOuch3() {
		return AccumuloProxyCreateConditionalWriterResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyCreateConditionalWriterResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &AccumuloException{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloSecurityException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &TableNotFoundException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("createConditionalWriter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCreateConditionalWriterResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyCreateConditionalWriterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCreateConditionalWriterResult(%+v)", *p)
}

// Attributes:
//  - ConditionalWriter
//  - Updates
type AccumuloProxyUpdateRowsConditionallyArgs struct {
	ConditionalWriter string                         `thrift:"conditionalWriter,1" json:"conditionalWriter"`
	Updates           map[string]*ConditionalUpdates `thrift:"updates,2" json:"updates"`
}

func NewAccumuloProxyUpdateRowsConditionallyArgs() *AccumuloProxyUpdateRowsConditionallyArgs {
	return &AccumuloProxyUpdateRowsConditionallyArgs{}
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) GetConditionalWriter() string {
	return p.ConditionalWriter
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) GetUpdates() map[string]*ConditionalUpdates {
	return p.Updates
}
func (p *AccumuloProxyUpdateRowsConditionallyArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ConditionalWriter = v
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]*ConditionalUpdates, size)
	p.Updates = tMap
	for i := 0; i < size; i++ {
		var _key225 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key225 = v
		}
		_val226 := &ConditionalUpdates{}
		if err := _val226.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _val226), err)
		}
		p.Updates[_key225] = _val226
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateRowsConditionally_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conditionalWriter", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conditionalWriter: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConditionalWriter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.conditionalWriter (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conditionalWriter: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("updates", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:updates: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Updates)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.Updates {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:updates: ", p), err)
	}
	return err
}

func (p *AccumuloProxyUpdateRowsConditionallyArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateRowsConditionallyArgs(%+v)", *p)
}

// Attributes:
//  - Success
//  - Ouch1
//  - Ouch2
//  - Ouch3
type AccumuloProxyUpdateRowsConditionallyResult struct {
	Success map[string]ConditionalStatus `thrift:"success,0" json:"success,omitempty"`
	Ouch1   *UnknownWriter               `thrift:"ouch1,1" json:"ouch1,omitempty"`
	Ouch2   *AccumuloException           `thrift:"ouch2,2" json:"ouch2,omitempty"`
	Ouch3   *AccumuloSecurityException   `thrift:"ouch3,3" json:"ouch3,omitempty"`
}

func NewAccumuloProxyUpdateRowsConditionallyResult() *AccumuloProxyUpdateRowsConditionallyResult {
	return &AccumuloProxyUpdateRowsConditionallyResult{}
}

var AccumuloProxyUpdateRowsConditionallyResult_Success_DEFAULT map[string]ConditionalStatus

func (p *AccumuloProxyUpdateRowsConditionallyResult) GetSuccess() map[string]ConditionalStatus {
	return p.Success
}

var AccumuloProxyUpdateRowsConditionallyResult_Ouch1_DEFAULT *UnknownWriter

func (p *AccumuloProxyUpdateRowsConditionallyResult) GetOuch1() *UnknownWriter {
	if !p.IsSetOuch1() {
		return AccumuloProxyUpdateRowsConditionallyResult_Ouch1_DEFAULT
	}
	return p.Ouch1
}

var AccumuloProxyUpdateRowsConditionallyResult_Ouch2_DEFAULT *AccumuloException

func (p *AccumuloProxyUpdateRowsConditionallyResult) GetOuch2() *AccumuloException {
	if !p.IsSetOuch2() {
		return AccumuloProxyUpdateRowsConditionallyResult_Ouch2_DEFAULT
	}
	return p.Ouch2
}

var AccumuloProxyUpdateRowsConditionallyResult_Ouch3_DEFAULT *AccumuloSecurityException

func (p *AccumuloProxyUpdateRowsConditionallyResult) GetOuch3() *AccumuloSecurityException {
	if !p.IsSetOuch3() {
		return AccumuloProxyUpdateRowsConditionallyResult_Ouch3_DEFAULT
	}
	return p.Ouch3
}
func (p *AccumuloProxyUpdateRowsConditionallyResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) IsSetOuch1() bool {
	return p.Ouch1 != nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) IsSetOuch2() bool {
	return p.Ouch2 != nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) IsSetOuch3() bool {
	return p.Ouch3 != nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) readField0(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]ConditionalStatus, size)
	p.Success = tMap
	for i := 0; i < size; i++ {
		var _key227 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key227 = v
		}
		var _val228 ConditionalStatus
		if v, err := iprot.ReadI32(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			temp := ConditionalStatus(v)
			_val228 = temp
		}
		p.Success[_key227] = _val228
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) readField1(iprot thrift.TProtocol) error {
	p.Ouch1 = &UnknownWriter{}
	if err := p.Ouch1.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch1), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) readField2(iprot thrift.TProtocol) error {
	p.Ouch2 = &AccumuloException{}
	if err := p.Ouch2.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch2), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) readField3(iprot thrift.TProtocol) error {
	p.Ouch3 = &AccumuloSecurityException{}
	if err := p.Ouch3.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Ouch3), err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("updateRowsConditionally_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.MAP, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.I32, len(p.Success)); err != nil {
			return thrift.PrependError("error writing map begin: ", err)
		}
		for k, v := range p.Success {
			if err := oprot.WriteString(string(k)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
			if err := oprot.WriteI32(int32(v)); err != nil {
				return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return thrift.PrependError("error writing map end: ", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch1() {
		if err := oprot.WriteFieldBegin("ouch1", thrift.STRUCT, 1); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ouch1: ", p), err)
		}
		if err := p.Ouch1.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch1), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ouch1: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch2() {
		if err := oprot.WriteFieldBegin("ouch2", thrift.STRUCT, 2); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ouch2: ", p), err)
		}
		if err := p.Ouch2.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch2), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ouch2: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetOuch3() {
		if err := oprot.WriteFieldBegin("ouch3", thrift.STRUCT, 3); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ouch3: ", p), err)
		}
		if err := p.Ouch3.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Ouch3), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ouch3: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyUpdateRowsConditionallyResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyUpdateRowsConditionallyResult(%+v)", *p)
}

// Attributes:
//  - ConditionalWriter
type AccumuloProxyCloseConditionalWriterArgs struct {
	ConditionalWriter string `thrift:"conditionalWriter,1" json:"conditionalWriter"`
}

func NewAccumuloProxyCloseConditionalWriterArgs() *AccumuloProxyCloseConditionalWriterArgs {
	return &AccumuloProxyCloseConditionalWriterArgs{}
}

func (p *AccumuloProxyCloseConditionalWriterArgs) GetConditionalWriter() string {
	return p.ConditionalWriter
}
func (p *AccumuloProxyCloseConditionalWriterArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloseConditionalWriterArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ConditionalWriter = v
	}
	return nil
}

func (p *AccumuloProxyCloseConditionalWriterArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeConditionalWriter_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloseConditionalWriterArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("conditionalWriter", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:conditionalWriter: ", p), err)
	}
	if err := oprot.WriteString(string(p.ConditionalWriter)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.conditionalWriter (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:conditionalWriter: ", p), err)
	}
	return err
}

func (p *AccumuloProxyCloseConditionalWriterArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloseConditionalWriterArgs(%+v)", *p)
}

type AccumuloProxyCloseConditionalWriterResult struct {
}

func NewAccumuloProxyCloseConditionalWriterResult() *AccumuloProxyCloseConditionalWriterResult {
	return &AccumuloProxyCloseConditionalWriterResult{}
}

func (p *AccumuloProxyCloseConditionalWriterResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyCloseConditionalWriterResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("closeConditionalWriter_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyCloseConditionalWriterResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyCloseConditionalWriterResult(%+v)", *p)
}

// Attributes:
//  - Row
type AccumuloProxyGetRowRangeArgs struct {
	Row []byte `thrift:"row,1" json:"row"`
}

func NewAccumuloProxyGetRowRangeArgs() *AccumuloProxyGetRowRangeArgs {
	return &AccumuloProxyGetRowRangeArgs{}
}

func (p *AccumuloProxyGetRowRangeArgs) GetRow() []byte {
	return p.Row
}
func (p *AccumuloProxyGetRowRangeArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetRowRangeArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Row = v
	}
	return nil
}

func (p *AccumuloProxyGetRowRangeArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowRange_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetRowRangeArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("row", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:row: ", p), err)
	}
	if err := oprot.WriteBinary(p.Row); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.row (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:row: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetRowRangeArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetRowRangeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccumuloProxyGetRowRangeResult struct {
	Success *Range `thrift:"success,0" json:"success,omitempty"`
}

func NewAccumuloProxyGetRowRangeResult() *AccumuloProxyGetRowRangeResult {
	return &AccumuloProxyGetRowRangeResult{}
}

var AccumuloProxyGetRowRangeResult_Success_DEFAULT *Range

func (p *AccumuloProxyGetRowRangeResult) GetSuccess() *Range {
	if !p.IsSetSuccess() {
		return AccumuloProxyGetRowRangeResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccumuloProxyGetRowRangeResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetRowRangeResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetRowRangeResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Range{}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccumuloProxyGetRowRangeResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getRowRange_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetRowRangeResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetRowRangeResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetRowRangeResult(%+v)", *p)
}

// Attributes:
//  - Key
//  - Part
type AccumuloProxyGetFollowingArgs struct {
	Key  *Key       `thrift:"key,1" json:"key"`
	Part PartialKey `thrift:"part,2" json:"part"`
}

func NewAccumuloProxyGetFollowingArgs() *AccumuloProxyGetFollowingArgs {
	return &AccumuloProxyGetFollowingArgs{}
}

var AccumuloProxyGetFollowingArgs_Key_DEFAULT *Key

func (p *AccumuloProxyGetFollowingArgs) GetKey() *Key {
	if !p.IsSetKey() {
		return AccumuloProxyGetFollowingArgs_Key_DEFAULT
	}
	return p.Key
}

func (p *AccumuloProxyGetFollowingArgs) GetPart() PartialKey {
	return p.Part
}
func (p *AccumuloProxyGetFollowingArgs) IsSetKey() bool {
	return p.Key != nil
}

func (p *AccumuloProxyGetFollowingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetFollowingArgs) readField1(iprot thrift.TProtocol) error {
	p.Key = &Key{
		Timestamp: 9223372036854775807,
	}
	if err := p.Key.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Key), err)
	}
	return nil
}

func (p *AccumuloProxyGetFollowingArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		temp := PartialKey(v)
		p.Part = temp
	}
	return nil
}

func (p *AccumuloProxyGetFollowingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFollowing_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetFollowingArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("key", thrift.STRUCT, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err)
	}
	if err := p.Key.Write(oprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Key), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetFollowingArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("part", thrift.I32, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:part: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.Part)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.part (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:part: ", p), err)
	}
	return err
}

func (p *AccumuloProxyGetFollowingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetFollowingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AccumuloProxyGetFollowingResult struct {
	Success *Key `thrift:"success,0" json:"success,omitempty"`
}

func NewAccumuloProxyGetFollowingResult() *AccumuloProxyGetFollowingResult {
	return &AccumuloProxyGetFollowingResult{}
}

var AccumuloProxyGetFollowingResult_Success_DEFAULT *Key

func (p *AccumuloProxyGetFollowingResult) GetSuccess() *Key {
	if !p.IsSetSuccess() {
		return AccumuloProxyGetFollowingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AccumuloProxyGetFollowingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AccumuloProxyGetFollowingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *AccumuloProxyGetFollowingResult) readField0(iprot thrift.TProtocol) error {
	p.Success = &Key{
		Timestamp: 9223372036854775807,
	}
	if err := p.Success.Read(iprot); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
	}
	return nil
}

func (p *AccumuloProxyGetFollowingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("getFollowing_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *AccumuloProxyGetFollowingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := p.Success.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *AccumuloProxyGetFollowingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AccumuloProxyGetFollowingResult(%+v)", *p)
}
